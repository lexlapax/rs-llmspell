   Compiling llmspell-agents v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-agents)
   Compiling llmspell-utils v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-utils)
   Compiling llmspell-events v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-events)
   Compiling llmspell-bridge v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-bridge)
   Compiling llmspell-testing v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing)
   Compiling llmspell-cli v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-cli)
warning: unexpected `cfg` condition value: `lua`
 --> llmspell-testing/src/bridge_helpers.rs:6:7
  |
6 | #[cfg(feature = "lua")]
  |       ^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
  = help: consider adding `lua` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `javascript`
  --> llmspell-testing/src/bridge_helpers.rs:23:7
   |
23 | #[cfg(feature = "javascript")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
   = help: consider adding `javascript` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `llmspell-testing` (lib) generated 2 warnings
   Compiling llmspell-state-persistence v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-state-persistence)
   Compiling llmspell-hooks v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-hooks)
   Compiling llmspell-workflows v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-workflows)
   Compiling llmspell-core v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-core)
   Compiling llmspell-tools v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-tools)
error[E0603]: module `agent_io` is private
 --> llmspell-workflows/examples/parallel_workflow.rs:5:27
  |
5 | use llmspell_core::types::agent_io::AgentInput;
  |                           ^^^^^^^^ private module
  |
note: the module `agent_io` is defined here
 --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-core/src/types/mod.rs:4:1
  |
4 | mod agent_io;
  | ^^^^^^^^^^^^

error[E0425]: cannot find function `create_execution_params` in this scope
  --> llmspell-workflows/examples/parallel_workflow.rs:98:28
   |
98 |     let (input, context) = create_execution_params();
   |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:102:35
    |
102 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `branch_results` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:103:42
    |
103 |     info!("  Total branches: {}", result.branch_results.len());
    |                                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `successful_branches` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:104:47
    |
104 |     info!("  Successful branches: {}", result.successful_branches);
    |                                               ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `duration` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:105:38
    |
105 |     info!("  Duration: {:?}", result.duration);
    |                                      ^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:156:28
    |
156 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:160:35
    |
160 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `branch_results` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:162:34
    |
162 |     for branch_result in &result.branch_results {
    |                                  ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:214:28
    |
214 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:218:35
    |
218 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `stopped_early` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:219:41
    |
219 |     info!("  Stopped early: {}", result.stopped_early);
    |                                         ^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `branch_results` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:220:45
    |
220 |     info!("  Branches executed: {}", result.branch_results.len());
    |                                             ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `error` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:221:34
    |
221 |     if let Some(error) = &result.error {
    |                                  ^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:262:28
    |
262 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:271:35
    |
271 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:395:28
    |
395 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

warning: unexpected `cfg` condition value: `lua`
  --> llmspell-testing/src/bridge_helpers.rs:71:11
   |
71 |     #[cfg(feature = "lua")]
   |           ^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
   = help: consider adding `lua` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `javascript`
  --> llmspell-testing/src/bridge_helpers.rs:78:11
   |
78 |     #[cfg(feature = "javascript")]
   |           ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
   = help: consider adding `javascript` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

error[E0599]: no method named `generate_report` found for struct `AgentOutput` in the current scope
   --> llmspell-workflows/examples/parallel_workflow.rs:399:24
    |
399 |     info!("{}", result.generate_report());
    |                        ^^^^^^^^^^^^^^^ method not found in `AgentOutput`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:447:28
    |
447 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:451:43
    |
451 |     info!("  Overall success: {}", result.success);
    |                                           ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `branch_results` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:453:27
    |
453 |     for branch in &result.branch_results {
    |                           ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

Some errors have detailed explanations: E0425, E0599, E0603, E0609.
For more information about an error, try `rustc --explain E0425`.
error: could not compile `llmspell-workflows` (example "parallel_workflow") due to 21 previous errors
warning: build failed, waiting for other jobs to finish...
warning: `llmspell-testing` (lib test) generated 4 warnings (2 duplicates)
   Compiling jsonschema v0.18.3
   Compiling criterion v0.5.1
   Compiling llmspell-core v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-core)
   Compiling llmspell-storage v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-storage)
   Compiling llmspell-utils v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-utils)
   Compiling llmspell-security v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-security)
   Compiling llmspell-providers v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-providers)
   Compiling llmspell-config v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-config)
   Compiling llmspell-events v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-events)
   Compiling llmspell-hooks v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-hooks)
   Compiling llmspell-state-persistence v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-state-persistence)
   Compiling llmspell-tools v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-tools)
   Compiling llmspell-sessions v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-sessions)
   Compiling llmspell-workflows v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-workflows)
   Compiling llmspell-agents v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-agents)
   Compiling llmspell-bridge v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-bridge)
   Compiling llmspell-testing v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing)
warning: unexpected `cfg` condition value: `lua`
 --> llmspell-testing/src/bridge_helpers.rs:6:7
  |
6 | #[cfg(feature = "lua")]
  |       ^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
  = help: consider adding `lua` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `javascript`
  --> llmspell-testing/src/bridge_helpers.rs:23:7
   |
23 | #[cfg(feature = "javascript")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
   = help: consider adding `javascript` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `llmspell-testing` (lib) generated 2 warnings
error[E0603]: module `agent_io` is private
 --> llmspell-workflows/examples/loop_workflow.rs:5:27
  |
5 | use llmspell_core::types::agent_io::AgentInput;
  |                           ^^^^^^^^ private module
  |
note: the module `agent_io` is defined here
 --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-core/src/types/mod.rs:4:1
  |
4 | mod agent_io;
  | ^^^^^^^^^^^^

error[E0603]: module `agent_io` is private
 --> llmspell-workflows/examples/sequential_workflow.rs:7:27
  |
7 | use llmspell_core::types::agent_io::AgentInput;
  |                           ^^^^^^^^ private module
  |
note: the module `agent_io` is defined here
 --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-core/src/types/mod.rs:4:1
  |
4 | mod agent_io;
  | ^^^^^^^^^^^^

error[E0603]: module `agent_io` is private
 --> llmspell-workflows/examples/parallel_workflow.rs:5:27
  |
5 | use llmspell_core::types::agent_io::AgentInput;
  |                           ^^^^^^^^ private module
  |
note: the module `agent_io` is defined here
 --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-core/src/types/mod.rs:4:1
  |
4 | mod agent_io;
  | ^^^^^^^^^^^^

error[E0603]: module `agent_io` is private
 --> llmspell-workflows/examples/conditional_example.rs:5:27
  |
5 | use llmspell_core::types::agent_io::AgentInput;
  |                           ^^^^^^^^ private module
  |
note: the module `agent_io` is defined here
 --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-core/src/types/mod.rs:4:1
  |
4 | mod agent_io;
  | ^^^^^^^^^^^^

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/sequential_workflow.rs:227:28
    |
227 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `successful_steps` on type `AgentOutput`
   --> llmspell-workflows/examples/sequential_workflow.rs:231:47
    |
231 |             if let Some(step_result) = result.successful_steps.first() {
    |                                               ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/sequential_workflow.rs:289:28
    |
289 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find function `create_execution_params` in this scope
  --> llmspell-workflows/examples/parallel_workflow.rs:98:28
   |
98 |     let (input, context) = create_execution_params();
   |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `successful_steps` on type `AgentOutput`
   --> llmspell-workflows/examples/sequential_workflow.rs:294:16
    |
294 |         result.successful_steps.len(),
    |                ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `failed_steps` on type `AgentOutput`
   --> llmspell-workflows/examples/sequential_workflow.rs:295:16
    |
295 |         result.failed_steps.len()
    |                ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `failed_steps` on type `AgentOutput`
   --> llmspell-workflows/examples/sequential_workflow.rs:299:16
    |
299 |         result.failed_steps.len()
    |                ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `total_iterations` on type `AgentOutput`
  --> llmspell-workflows/examples/loop_workflow.rs:70:44
   |
70 |     info!("  Total iterations: {}", result.total_iterations);
   |                                            ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `completed_iterations` on type `AgentOutput`
  --> llmspell-workflows/examples/loop_workflow.rs:71:48
   |
71 |     info!("  Completed iterations: {}", result.completed_iterations);
   |                                                ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `success` on type `AgentOutput`
  --> llmspell-workflows/examples/loop_workflow.rs:72:35
   |
72 |     info!("  Success: {}", result.success);
   |                                   ^^^^^^^ unknown field
   |
   = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `aggregated_results` on type `AgentOutput`
  --> llmspell-workflows/examples/loop_workflow.rs:75:16
   |
75 |         result.aggregated_results.get("loop_metadata")
   |                ^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:102:35
    |
102 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `branch_results` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:103:42
    |
103 |     info!("  Total branches: {}", result.branch_results.len());
    |                                          ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `successful_branches` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:104:47
    |
104 |     info!("  Successful branches: {}", result.successful_branches);
    |                                               ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `duration` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:105:38
    |
105 |     info!("  Duration: {:?}", result.duration);
    |                                      ^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:156:28
    |
156 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:160:35
    |
160 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `branch_results` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:162:34
    |
162 |     for branch_result in &result.branch_results {
    |                                  ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `completed_iterations` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:124:42
    |
124 |     info!("  Processed {} users", result.completed_iterations);
    |                                          ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:125:35
    |
125 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:214:28
    |
214 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:218:35
    |
218 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `stopped_early` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:219:41
    |
219 |     info!("  Stopped early: {}", result.stopped_early);
    |                                         ^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `branch_results` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:220:45
    |
220 |     info!("  Branches executed: {}", result.branch_results.len());
    |                                             ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `error` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:221:34
    |
221 |     if let Some(error) = &result.error {
    |                                  ^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `completed_iterations` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:162:43
    |
162 |     info!("  Search attempts: {}", result.completed_iterations);
    |                                           ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `break_reason` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:163:42
    |
163 |     info!("  Break reason: {:?}", result.break_reason);
    |                                          ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:164:35
    |
164 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `total_iterations` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:199:44
    |
199 |     info!("  Total iterations: {}", result.total_iterations);
    |                                            ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `completed_iterations` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:200:48
    |
200 |     info!("  Completed iterations: {}", result.completed_iterations);
    |                                                ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:201:35
    |
201 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `aggregated_results` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:202:38
    |
202 |     if let Some(iterations) = result.aggregated_results.get("iterations") {
    |                                      ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `aggregated_results` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:246:44
    |
246 |         info!("  Results: {} keys", result.aggregated_results.len());
    |                                            ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `aggregated_results` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:247:27
    |
247 |         for key in result.aggregated_results.keys() {
    |                           ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `completed_iterations` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:307:49
    |
307 |     info!("  Departments processed: {}", result.completed_iterations);
    |                                                 ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/loop_workflow.rs:308:35
    |
308 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:262:28
    |
262 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:271:35
    |
271 |     info!("  Success: {}", result.success);
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:395:28
    |
395 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

Some errors have detailed explanations: E0603, E0609.
For more information about an error, try `rustc --explain E0603`.
error[E0599]: no method named `generate_report` found for struct `AgentOutput` in the current scope
   --> llmspell-workflows/examples/sequential_workflow.rs:137:35
    |
137 |             println!("{}", result.generate_report());
    |                                   ^^^^^^^^^^^^^^^ method not found in `AgentOutput`

error[E0599]: no method named `generate_report` found for struct `AgentOutput` in the current scope
   --> llmspell-workflows/examples/parallel_workflow.rs:399:24
    |
399 |     info!("{}", result.generate_report());
    |                        ^^^^^^^^^^^^^^^ method not found in `AgentOutput`

error[E0599]: no method named `generate_report` found for struct `AgentOutput` in the current scope
  --> llmspell-workflows/examples/conditional_example.rs:96:31
   |
96 |     println!("{}", csv_result.generate_report());
   |                               ^^^^^^^^^^^^^^^ method not found in `AgentOutput`

error[E0609]: no field `successful_steps` on type `AgentOutput`
   --> llmspell-workflows/examples/sequential_workflow.rs:140:48
    |
140 |             for (index, step_result) in result.successful_steps.iter().enumerate() {
    |                                                ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `executed_branches` on type `AgentOutput`
  --> llmspell-workflows/examples/conditional_example.rs:98:38
   |
98 |     for branch_result in &csv_result.executed_branches {
   |                                      ^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `failed_steps` on type `AgentOutput`
   --> llmspell-workflows/examples/sequential_workflow.rs:149:48
    |
149 |             for (index, step_result) in result.failed_steps.iter().enumerate() {
    |                                                ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `successful_steps` on type `AgentOutput`
   --> llmspell-workflows/examples/sequential_workflow.rs:152:40
    |
152 |                     index + 1 + result.successful_steps.len(),
    |                                        ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0425]: cannot find function `create_execution_params` in this scope
   --> llmspell-workflows/examples/parallel_workflow.rs:447:28
    |
447 |     let (input, context) = create_execution_params();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error[E0609]: no field `success` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:451:43
    |
451 |     info!("  Overall success: {}", result.success);
    |                                           ^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error[E0609]: no field `branch_results` on type `AgentOutput`
   --> llmspell-workflows/examples/parallel_workflow.rs:453:27
    |
453 |     for branch in &result.branch_results {
    |                           ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

Some errors have detailed explanations: E0425, E0599, E0603, E0609.
For more information about an error, try `rustc --explain E0425`.
error[E0599]: no method named `generate_report` found for struct `AgentOutput` in the current scope
   --> llmspell-workflows/examples/conditional_example.rs:120:32
    |
120 |     println!("{}", json_result.generate_report());
    |                                ^^^^^^^^^^^^^^^ method not found in `AgentOutput`

error[E0609]: no field `executed_branches` on type `AgentOutput`
   --> llmspell-workflows/examples/conditional_example.rs:122:39
    |
122 |     for branch_result in &json_result.executed_branches {
    |                                       ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error: could not compile `llmspell-workflows` (example "sequential_workflow") due to 11 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0599]: no method named `generate_report` found for struct `AgentOutput` in the current scope
   --> llmspell-workflows/examples/conditional_example.rs:144:35
    |
144 |     println!("{}", default_result.generate_report());
    |                                   ^^^^^^^^^^^^^^^ method not found in `AgentOutput`

error[E0609]: no field `executed_branches` on type `AgentOutput`
   --> llmspell-workflows/examples/conditional_example.rs:146:42
    |
146 |     for branch_result in &default_result.executed_branches {
    |                                          ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

error: could not compile `llmspell-workflows` (example "loop_workflow") due to 18 previous errors
error: could not compile `llmspell-workflows` (example "parallel_workflow") due to 21 previous errors
error[E0599]: no method named `generate_report` found for struct `AgentOutput` in the current scope
   --> llmspell-workflows/examples/conditional_example.rs:218:35
    |
218 |     println!("{}", complex_result.generate_report());
    |                                   ^^^^^^^^^^^^^^^ method not found in `AgentOutput`

error[E0609]: no field `executed_branches` on type `AgentOutput`
   --> llmspell-workflows/examples/conditional_example.rs:220:42
    |
220 |     for branch_result in &complex_result.executed_branches {
    |                                          ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `media`, `tool_calls`, `metadata`, `transfer_to`

Some errors have detailed explanations: E0599, E0603, E0609.
For more information about an error, try `rustc --explain E0599`.
error: could not compile `llmspell-workflows` (example "conditional_example") due to 9 previous errors
warning: unexpected `cfg` condition value: `lua`
 --> llmspell-testing/src/bridge_helpers.rs:6:7
  |
6 | #[cfg(feature = "lua")]
  |       ^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
  = help: consider adding `lua` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `javascript`
  --> llmspell-testing/src/bridge_helpers.rs:23:7
   |
23 | #[cfg(feature = "javascript")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
   = help: consider adding `javascript` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `lua`
  --> llmspell-testing/src/bridge_helpers.rs:71:11
   |
71 |     #[cfg(feature = "lua")]
   |           ^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
   = help: consider adding `lua` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `javascript`
  --> llmspell-testing/src/bridge_helpers.rs:78:11
   |
78 |     #[cfg(feature = "javascript")]
   |           ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `agent-tests`, `all-tests`, `benchmark-tests`, `bridge-tests`, `clap`, `colored`, `comprehensive-tests`, `core-tests`, `database-tests`, `default`, `event-tests`, `experimental-tests`, `external-tests`, `fast-tests`, `flaky-tests`, `hook-tests`, `integration-tests`, `llm-tests`, `lua-tests`, `mocks`, `network-tests`, `performance-tests`, `scenario-tests`, `security-tests`, `session-tests`, `slow-tests`, `state-tests`, `test-runner`, `test-utilities`, `testing-tests`, `tool-tests`, `unit-tests`, `util-tests`, and `workflow-tests`
   = help: consider adding `javascript` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `llmspell-testing` (lib) generated 2 warnings
warning: `llmspell-testing` (lib test) generated 4 warnings (2 duplicates)
   Compiling llmspell-hooks v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-hooks)
   Compiling llmspell-sessions v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-sessions)
   Compiling llmspell-state-persistence v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-state-persistence)
   Compiling llmspell-workflows v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-workflows)
   Compiling llmspell-agents v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-agents)
   Compiling llmspell-tools v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-tools)
   Compiling llmspell-bridge v0.6.0 (/Users/spuri/projects/lexlapax/rs-llmspell/llmspell-bridge)
warning: unused imports: `ComponentId` and `ComponentType`
   --> llmspell-hooks/src/builtin/caching.rs:444:24
    |
444 |     use crate::types::{ComponentId, ComponentType, HookPoint};
    |                        ^^^^^^^^^^^  ^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `ComponentId`, `ComponentType`, and `HookPoint`
   --> llmspell-hooks/src/cache/mod.rs:387:24
    |
387 |     use crate::types::{ComponentId, ComponentType, HookPoint};
    |                        ^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `super::*`
 --> llmspell-hooks/src/persistence/tests.rs:6:9
  |
6 |     use super::*;
  |         ^^^^^^^^

warning: unused imports: `ComponentId` and `HookPoint`
  --> llmspell-hooks/src/persistence/tests.rs:11:24
   |
11 |     use crate::types::{ComponentId, ComponentType, HookPoint};
   |                        ^^^^^^^^^^^                 ^^^^^^^^^

warning: unused import: `create_test_tool`
   --> llmspell-tools/src/fs/file_converter.rs:559:42
    |
559 |     use llmspell_testing::tool_helpers::{create_test_tool, create_test_tool_input};
    |                                          ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unused import: `create_test_tool`
   --> llmspell-tools/src/fs/file_watcher.rs:455:42
    |
455 |     use llmspell_testing::tool_helpers::{create_test_tool, create_test_tool_input};
    |                                          ^^^^^^^^^^^^^^^^

warning: unused import: `create_test_tool`
   --> llmspell-tools/src/media/audio_processor.rs:656:42
    |
656 |     use llmspell_testing::tool_helpers::{create_test_tool, create_test_tool_input};
    |                                          ^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
   --> llmspell-tools/src/media/audio_processor.rs:657:9
    |
657 |     use std::collections::HashMap;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
   --> llmspell-tools/src/media/image_processor.rs:824:9
    |
824 |     use std::collections::HashMap;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
   --> llmspell-tools/src/media/video_processor.rs:561:9
    |
561 |     use std::collections::HashMap;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `create_test_tool_input_json` and `create_test_tool`
   --> llmspell-tools/src/system/environment_reader.rs:499:9
    |
499 |         create_test_tool, create_test_tool_input, create_test_tool_input_json,
    |         ^^^^^^^^^^^^^^^^                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `create_test_tool`
   --> llmspell-tools/src/system/process_executor.rs:729:42
    |
729 |     use llmspell_testing::tool_helpers::{create_test_tool, create_test_tool_input};
    |                                          ^^^^^^^^^^^^^^^^

warning: unused import: `create_test_tool`
   --> llmspell-tools/src/system/service_checker.rs:686:42
    |
686 |     use llmspell_testing::tool_helpers::{create_test_tool, create_test_tool_input};
    |                                          ^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
   --> llmspell-tools/src/system/service_checker.rs:687:9
    |
687 |     use std::collections::HashMap;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `create_test_tool`
   --> llmspell-tools/src/system/system_monitor.rs:683:42
    |
683 |     use llmspell_testing::tool_helpers::{create_test_tool, create_test_tool_input};
    |                                          ^^^^^^^^^^^^^^^^

warning: unused import: `create_test_tool`
   --> llmspell-tools/src/util/hash_calculator.rs:364:42
    |
364 |     use llmspell_testing::tool_helpers::{create_test_tool, create_test_tool_input};
    |                                          ^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> llmspell-hooks/src/builtin/caching.rs:449:9
    |
448 |     fn create_test_context() -> HookContext {
    |                                 ----------- expected `context::HookContext` because of return type
449 |         create_test_hook_context()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `context::HookContext`, found `llmspell_hooks::context::HookContext`
    |
note: the crate `llmspell_hooks` is compiled multiple times, possibly with different configurations
   --> llmspell-hooks/src/context.rs:13:1
    |
13  | pub struct HookContext {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the expected type `context::HookContext`
    |
   ::: /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-hooks/src/context.rs:13:1
    |
13  | pub struct HookContext {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the found type `llmspell_hooks::context::HookContext`
    |
   ::: llmspell-hooks/src/builtin/caching.rs:445:9
    |
445 |     use llmspell_testing::hook_helpers::create_test_hook_context;
    |         ---------------- one version of crate `llmspell_hooks` used here, as a dependency of crate `llmspell_workflows`
    = help: you can use `cargo tree` to explore your dependency tree

error[E0308]: arguments to this function are incorrect
   --> llmspell-hooks/src/builtin/rate_limit.rs:576:9
    |
576 |         create_test_hook_context_with_component(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
577 |             HookPoint::BeforeToolExecution,
    |             ------------------------------ expected `llmspell_hooks::types::HookPoint`, found `types::HookPoint`
578 |             ComponentType::System,
    |             --------------------- expected `llmspell_hooks::types::ComponentType`, found `types::ComponentType`
    |
note: the crate `llmspell_hooks` is compiled multiple times, possibly with different configurations
    |
   ::: /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-hooks/src/types.rs:10:1
    |
10  | pub enum HookPoint {
    | ^^^^^^^^^^^^^^^^^^ this is the expected type `llmspell_hooks::types::HookPoint`
   --> llmspell-hooks/src/types.rs:10:1
    |
10  | pub enum HookPoint {
    | ^^^^^^^^^^^^^^^^^^ this is the found type `types::HookPoint`
    |
   ::: llmspell-hooks/src/builtin/caching.rs:445:9
    |
445 |     use llmspell_testing::hook_helpers::create_test_hook_context;
    |         ---------------- one version of crate `llmspell_hooks` used here, as a dependency of crate `llmspell_workflows`
    = help: you can use `cargo tree` to explore your dependency tree
note: the crate `llmspell_hooks` is compiled multiple times, possibly with different configurations
    |
   ::: /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-hooks/src/types.rs:123:1
    |
123 | pub enum ComponentType {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the expected type `llmspell_hooks::types::ComponentType`
   --> llmspell-hooks/src/types.rs:123:1
    |
123 | pub enum ComponentType {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the found type `types::ComponentType`
    |
   ::: llmspell-hooks/src/builtin/caching.rs:445:9
    |
445 |     use llmspell_testing::hook_helpers::create_test_hook_context;
    |         ---------------- one version of crate `llmspell_hooks` used here, as a dependency of crate `llmspell_workflows`
    = help: you can use `cargo tree` to explore your dependency tree
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/hook_helpers.rs:22:8
    |
22  | pub fn create_test_hook_context_with_component(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> llmspell-hooks/src/builtin/rate_limit.rs:576:9
    |
575 |       fn create_test_context() -> HookContext {
    |                                   ----------- expected `context::HookContext` because of return type
576 | /         create_test_hook_context_with_component(
577 | |             HookPoint::BeforeToolExecution,
578 | |             ComponentType::System,
579 | |             "test",
580 | |         )
    | |_________^ expected `context::HookContext`, found `llmspell_hooks::context::HookContext`
    |
note: the crate `llmspell_hooks` is compiled multiple times, possibly with different configurations
   --> llmspell-hooks/src/context.rs:13:1
    |
13  | pub struct HookContext {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the expected type `context::HookContext`
    |
   ::: /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-hooks/src/context.rs:13:1
    |
13  | pub struct HookContext {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the found type `llmspell_hooks::context::HookContext`
    |
   ::: llmspell-hooks/src/builtin/caching.rs:445:9
    |
445 |     use llmspell_testing::hook_helpers::create_test_hook_context;
    |         ---------------- one version of crate `llmspell_hooks` used here, as a dependency of crate `llmspell_workflows`
    = help: you can use `cargo tree` to explore your dependency tree

error[E0308]: mismatched types
   --> llmspell-hooks/src/cache/mod.rs:393:9
    |
392 |     fn create_test_context() -> HookContext {
    |                                 ----------- expected `context::HookContext` because of return type
393 |         create_test_hook_context()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `context::HookContext`, found `llmspell_hooks::context::HookContext`
    |
note: the crate `llmspell_hooks` is compiled multiple times, possibly with different configurations
   --> llmspell-hooks/src/context.rs:13:1
    |
13  | pub struct HookContext {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the expected type `context::HookContext`
    |
   ::: /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-hooks/src/context.rs:13:1
    |
13  | pub struct HookContext {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the found type `llmspell_hooks::context::HookContext`
    |
   ::: llmspell-hooks/src/builtin/caching.rs:445:9
    |
445 |     use llmspell_testing::hook_helpers::create_test_hook_context;
    |         ---------------- one version of crate `llmspell_hooks` used here, as a dependency of crate `llmspell_workflows`
    = help: you can use `cargo tree` to explore your dependency tree

error[E0308]: mismatched types
   --> llmspell-hooks/src/persistence/tests.rs:73:9
    |
72  |     fn create_test_context() -> HookContext {
    |                                 ----------- expected `context::HookContext` because of return type
73  |         create_test_hook_context()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `context::HookContext`, found `llmspell_hooks::context::HookContext`
    |
note: the crate `llmspell_hooks` is compiled multiple times, possibly with different configurations
   --> llmspell-hooks/src/context.rs:13:1
    |
13  | pub struct HookContext {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the expected type `context::HookContext`
    |
   ::: /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-hooks/src/context.rs:13:1
    |
13  | pub struct HookContext {
    | ^^^^^^^^^^^^^^^^^^^^^^ this is the found type `llmspell_hooks::context::HookContext`
    |
   ::: llmspell-hooks/src/builtin/caching.rs:445:9
    |
445 |     use llmspell_testing::hook_helpers::create_test_hook_context;
    |         ---------------- one version of crate `llmspell_hooks` used here, as a dependency of crate `llmspell_workflows`
    = help: you can use `cargo tree` to explore your dependency tree

error[E0599]: no method named `estimate_query_depth` found for struct `graphql_query::GraphQLQueryTool` in the current scope
   --> llmspell-tools/src/api/graphql_query.rs:692:25
    |
149 | pub struct GraphQLQueryTool {
    | --------------------------- method `estimate_query_depth` not found for this struct
...
692 |         assert_eq!(tool.estimate_query_depth(simple_query), 2);
    |                    -----^^^^^^^^^^^^^^^^^^^^--------------
    |                    |    |
    |                    |    this is an associated function, not a method
    |                    help: use associated function syntax instead: `graphql_query::GraphQLQueryTool::estimate_query_depth(simple_query)`
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `graphql_query::GraphQLQueryTool`
   --> llmspell-tools/src/api/graphql_query.rs:382:5
    |
382 |     fn estimate_query_depth(query: &str) -> u32 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `estimate_query_depth` found for struct `graphql_query::GraphQLQueryTool` in the current scope
   --> llmspell-tools/src/api/graphql_query.rs:695:25
    |
149 | pub struct GraphQLQueryTool {
    | --------------------------- method `estimate_query_depth` not found for this struct
...
695 |         assert_eq!(tool.estimate_query_depth(nested_query), 5);
    |                    -----^^^^^^^^^^^^^^^^^^^^--------------
    |                    |    |
    |                    |    this is an associated function, not a method
    |                    help: use associated function syntax instead: `graphql_query::GraphQLQueryTool::estimate_query_depth(nested_query)`
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `graphql_query::GraphQLQueryTool`
   --> llmspell-tools/src/api/graphql_query.rs:382:5
    |
382 |     fn estimate_query_depth(query: &str) -> u32 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `estimate_query_depth` found for struct `graphql_query::GraphQLQueryTool` in the current scope
   --> llmspell-tools/src/api/graphql_query.rs:698:25
    |
149 | pub struct GraphQLQueryTool {
    | --------------------------- method `estimate_query_depth` not found for this struct
...
698 |         assert_eq!(tool.estimate_query_depth(flat_query), 1);
    |                    -----^^^^^^^^^^^^^^^^^^^^------------
    |                    |    |
    |                    |    this is an associated function, not a method
    |                    help: use associated function syntax instead: `graphql_query::GraphQLQueryTool::estimate_query_depth(flat_query)`
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `graphql_query::GraphQLQueryTool`
   --> llmspell-tools/src/api/graphql_query.rs:382:5
    |
382 |     fn estimate_query_depth(query: &str) -> u32 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 3 arguments but 0 arguments were supplied
   --> llmspell-tools/src/fs/file_search.rs:831:33
    |
831 |         let (tool, _temp_dir) = create_test_tool();
    |                                 ^^^^^^^^^^^^^^^^-- three arguments of type `&str`, `&str`, and `Vec<(&str, &str)>` are missing
    |
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:174:8
    |
174 | pub fn create_test_tool(name: &str, description: &str, parameters: Vec<(&str, &str)>) -> impl Tool {
    |        ^^^^^^^^^^^^^^^^
help: provide the arguments
    |
831 -         let (tool, _temp_dir) = create_test_tool();
831 +         let (tool, _temp_dir) = create_test_tool(/* &str */, /* &str */, /* Vec<(&str, &str)> */);
    |

error[E0308]: mismatched types
   --> llmspell-tools/src/fs/file_search.rs:831:13
    |
831 |         let (tool, _temp_dir) = create_test_tool();
    |             ^^^^^^^^^^^^^^^^^   ------------------ this expression has type `impl llmspell_core::Tool`
    |             |
    |             expected opaque type, found `(_, _)`
    |
   ::: /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:174:90
    |
174 | pub fn create_test_tool(name: &str, description: &str, parameters: Vec<(&str, &str)>) -> impl Tool {
    |                                                                                          --------- the expected opaque type
    |
    = note: expected opaque type `impl llmspell_core::Tool`
                     found tuple `(_, _)`

error[E0061]: this function takes 3 arguments but 0 arguments were supplied
   --> llmspell-tools/src/fs/file_search.rs:851:33
    |
851 |         let (tool, _temp_dir) = create_test_tool();
    |                                 ^^^^^^^^^^^^^^^^-- three arguments of type `&str`, `&str`, and `Vec<(&str, &str)>` are missing
    |
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:174:8
    |
174 | pub fn create_test_tool(name: &str, description: &str, parameters: Vec<(&str, &str)>) -> impl Tool {
    |        ^^^^^^^^^^^^^^^^
help: provide the arguments
    |
851 -         let (tool, _temp_dir) = create_test_tool();
851 +         let (tool, _temp_dir) = create_test_tool(/* &str */, /* &str */, /* Vec<(&str, &str)> */);
    |

error[E0308]: mismatched types
   --> llmspell-tools/src/fs/file_search.rs:851:13
    |
851 |         let (tool, _temp_dir) = create_test_tool();
    |             ^^^^^^^^^^^^^^^^^   ------------------ this expression has type `impl llmspell_core::Tool`
    |             |
    |             expected opaque type, found `(_, _)`
    |
   ::: /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:174:90
    |
174 | pub fn create_test_tool(name: &str, description: &str, parameters: Vec<(&str, &str)>) -> impl Tool {
    |                                                                                          --------- the expected opaque type
    |
    = note: expected opaque type `impl llmspell_core::Tool`
                     found tuple `(_, _)`

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/fs/file_search.rs:854:22
    |
854 |           let input1 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
855 |               "Missing pattern",
856 | /             json!({
857 | |                 "path": "/tmp/test.txt"
858 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/fs/file_search.rs:855:13
    |
855 |             "Missing pattern",
    |             ^^^^^^^^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
855 -             "Missing pattern",
855 +             /* Vec<(&str, &str)> */,
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/fs/file_search.rs:868:22
    |
868 |           let input2 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
869 |               "Missing path",
870 | /             json!({
871 | |                 "pattern": "test"
872 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/fs/file_search.rs:869:13
    |
869 |             "Missing path",
    |             ^^^^^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
869 -             "Missing path",
869 +             /* Vec<(&str, &str)> */,
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/fs/file_search.rs:882:22
    |
882 |           let input3 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
883 |               "Invalid context lines",
884 | /             json!({
885 | |                 "pattern": "test",
886 | |                 "path": "/tmp/test.txt",
887 | |                 "context_lines": 100
888 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/fs/file_search.rs:883:13
    |
883 |             "Invalid context lines",
    |             ^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
883 -             "Invalid context lines",
883 +             /* Vec<(&str, &str)> */,
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/system/environment_reader.rs:668:22
    |
668 |           let input1 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
669 |               "Get test variable",
670 | /             json!({
671 | |                 "operation": "get",
672 | |                 "variable_name": "TEST_ALLOWED"
673 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/system/environment_reader.rs:669:13
    |
669 |             "Get test variable",
    |             ^^^^^^^^^^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
669 -             "Get test variable",
669 +             /* Vec<(&str, &str)> */,
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/system/environment_reader.rs:683:22
    |
683 |           let input2 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
684 |               "Get PATH",
685 | /             json!({
686 | |                 "operation": "get",
687 | |                 "variable_name": "PATH"
688 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/system/environment_reader.rs:684:13
    |
684 |             "Get PATH",
    |             ^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
684 -             "Get PATH",
684 +             /* Vec<(&str, &str)> */,
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/system/environment_reader.rs:694:22
    |
694 |           let input3 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
695 |               "Get HOME",
696 | /             json!({
697 | |                 "operation": "get",
698 | |                 "variable_name": "HOME"
699 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/system/environment_reader.rs:695:13
    |
695 |             "Get HOME",
    |             ^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
695 -             "Get HOME",
695 +             /* Vec<(&str, &str)> */,
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/system/process_executor.rs:825:22
    |
825 |           let input1 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
826 |               "Execute with dangerous chars",
827 | /             json!({
828 | |                 "executable": "echo; rm -rf /",
829 | |                 "arguments": ["test"]
830 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/system/process_executor.rs:826:13
    |
826 |             "Execute with dangerous chars",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
826 -             "Execute with dangerous chars",
826 +             /* Vec<(&str, &str)> */,
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/system/process_executor.rs:841:22
    |
841 |           let input2 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
842 |               "Execute with path traversal",
843 | /             json!({
844 | |                 "executable": "../../../bin/echo",
845 | |                 "arguments": ["test"]
846 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/system/process_executor.rs:842:13
    |
842 |             "Execute with path traversal",
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
842 -             "Execute with path traversal",
842 +             /* Vec<(&str, &str)> */,
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/system/process_executor.rs:876:22
    |
876 |           let input2 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
877 |               "Empty executable",
878 | /             json!({
879 | |                 "executable": ""
880 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/system/process_executor.rs:877:13
    |
877 |             "Empty executable",
    |             ^^^^^^^^^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
877 -             "Empty executable",
877 +             /* Vec<(&str, &str)> */,
    |

For more information about this error, try `rustc --explain E0308`.
warning: `llmspell-hooks` (lib test) generated 4 warnings
error: could not compile `llmspell-hooks` (lib test) due to 5 previous errors; 4 warnings emitted
warning: build failed, waiting for other jobs to finish...
error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> llmspell-tools/src/system/service_checker.rs:784:22
    |
784 |           let input1 = create_test_tool_input(
    |                        ^^^^^^^^^^^^^^^^^^^^^^
785 |               "Missing target",
786 | /             json!({
787 | |                 "check_type": "tcp"
788 | |             }),
    | |______________- unexpected argument #2 of type `serde_json::Value`
    |
note: expected `Vec<(&str, &str)>`, found `&str`
   --> llmspell-tools/src/system/service_checker.rs:785:13
    |
785 |             "Missing target",
    |             ^^^^^^^^^^^^^^^^
    = note: expected struct `Vec<(&str, &str)>`
            found reference `&'static str`
note: function defined here
   --> /Users/spuri/projects/lexlapax/rs-llmspell/llmspell-testing/src/tool_helpers.rs:204:8
    |
204 | pub fn create_test_tool_input(parameters: Vec<(&str, &str)>) -> AgentInput {
    |        ^^^^^^^^^^^^^^^^^^^^^^
help: remove the extra argument
    |
785 -             "Missing target",
785 +             /* Vec<(&str, &str)> */,
    |

warning: unused variable: `output_path`
   --> llmspell-tools/src/media/image_processor.rs:950:13
    |
950 |         let output_path = temp_dir.path().join("output.png");
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_path`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `output_path`
   --> llmspell-tools/src/media/image_processor.rs:969:13
    |
969 |         let output_path = temp_dir.path().join("output.jpg");
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_output_path`

warning: unused variable: `target_path`
   --> llmspell-tools/src/media/video_processor.rs:684:13
    |
684 |         let target_path = temp_dir.path().join("thumb.jpg");
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_target_path`

warning: unused variable: `target_path`
   --> llmspell-tools/src/media/video_processor.rs:702:13
    |
702 |         let target_path = temp_dir.path().join("frame.jpg");
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_target_path`

warning: unused variable: `temp_dir`
   --> llmspell-tools/src/system/process_executor.rs:787:13
    |
787 |         let temp_dir = TempDir::new().unwrap();
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_temp_dir`

warning: unused variable: `env`
   --> llmspell-tools/src/system/process_executor.rs:804:13
    |
804 |         let env = json!({
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_env`

Some errors have detailed explanations: E0061, E0308, E0599.
For more information about an error, try `rustc --explain E0061`.
warning: `llmspell-tools` (lib test) generated 18 warnings
error: could not compile `llmspell-tools` (lib test) due to 17 previous errors; 18 warnings emitted
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
error[E0599]: no method named `execute` found for struct `LoopWorkflow` in the current scope
For more information about this error, try `rustc --explain E0599`.
error: could not compile `llmspell-workflows` (test "loop_tests") due to 18 previous errors
error[E0308]: mismatched types
error[E0308]: arguments to this function are incorrect
error[E0308]: mismatched types
error[E0308]: mismatched types
error[E0308]: mismatched types
For more information about this error, try `rustc --explain E0308`.
error: could not compile `llmspell-hooks` (lib test) due to 5 previous errors; 4 warnings emitted
