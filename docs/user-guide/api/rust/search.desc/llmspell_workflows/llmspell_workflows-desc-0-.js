searchState.loadedDescShard("llmspell_workflows", 0, "ABOUTME: llmspell-workflows implementation crate ABOUTME: …\nABOUTME: Input/Output adapters for workflow-agent …\nABOUTME: Conditional workflow implementation for …\nABOUTME: Condition evaluation engine for workflows …\nABOUTME: Error handling strategies for basic workflows …\nABOUTME: Workflow executor trait and implementations for …\nABOUTME: Workflow factory trait and implementations for …\nABOUTME: Hook infrastructure for workflows (preparing for …\nLoop workflow for iterative execution patterns\nParallel workflow for concurrent execution of multiple …\nABOUTME: Unified workflow result structure for state-based …\nABOUTME: Sequential workflow implementation for basic …\nABOUTME: State management infrastructure for workflows …\nABOUTME: Memory-based state management for workflows …\nABOUTME: Step execution engine for basic workflows …\nABOUTME: Workflow traits for foundational workflow patterns\nABOUTME: Workflow types for input/output and state …\nAdapter for converting between agent and workflow inputs\nAdapter for converting between workflow and agent outputs\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert AgentInput to WorkflowInput\nConvert AgentOutput back to WorkflowOutput\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience functions for adapter usage\nConvert WorkflowInput back to AgentInput\nConvert WorkflowOutput to AgentOutput\nConvert AgentInput to WorkflowInput\nConvert AgentOutput to WorkflowOutput\nConvert WorkflowInput to AgentInput\nConvert WorkflowOutput to AgentOutput\nBranch execution result\nConditional workflow branch containing steps to execute …\nType alias for consistency with other workflow configs\nBuilder for ConditionalWorkflowConfig\nConditional workflow that executes branches based on …\nBuilder for creating conditional workflows\nConfiguration for conditional workflow\nResult of conditional workflow execution\nAdd a branch to the workflow\nAdd a branch to the workflow\nAdd multiple branches to the workflow\nAdd multiple branches to the workflow\nGet number of branches\nBranch that was executed\nBranch name\nBuild the final ConditionalWorkflowConfig with validation\nBuild the conditional workflow\nCreate a new conditional workflow with builder pattern\nCreate a new builder for ConditionalWorkflowConfig\nCancel the workflow execution\nCondition that must be true to execute this branch\nSet timeout for condition evaluation in milliseconds\nTimeout for condition evaluation\nTimeout for condition evaluation\nCondition evaluation result\nCreate a default branch (executes when no conditions match)\nTotal execution time for the branch\nTotal execution duration\nError message if the workflow failed\nSet whether to execute all matching branches or just the …\nWhether to execute all matching branches or just the first …\nWhether to execute all matching branches or just the first …\nSet whether to execute the default branch if no conditions …\nWhether to execute the default branch if no conditions …\nWhether to execute the default branch if no conditions …\nExecute the conditional workflow with state-based outputs\nExecute the workflow (legacy method for backward …\nDetails of each branch that was executed\nGet failed steps count\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a human-readable report\nGet execution statistics\nGet shared data value\nGet current execution status\nUnique identifier for this branch\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is the default branch (executes if no other …\nNumber of branches whose conditions matched\nSet maximum number of branches to evaluate\nMaximum number of branches to evaluate (prevents infinite …\nMaximum number of branches to evaluate (prevents infinite …\nGet workflow name\nHuman-readable name for the branch\nCreate a new builder with default configuration\nCreate a new conditional workflow\nCreate a new builder\nCreate a new conditional branch\nCreate with hook integration\nCreate with both hooks and registry\nCreate with registry for component lookup\nReset the workflow to initial state\nSet shared data value\nSet whether to short-circuit evaluation (stop on first …\nWhether to short-circuit evaluation (stop on first true …\nWhether to short-circuit evaluation (stop on first true …\nResults from executed steps\nSteps to execute when condition is met\nCreate a successful branch execution result\nWhether the branch execution was successful\nWhether the workflow executed successfully\nGet success rate as percentage\nGet successful steps count\nCreate a timeout result\nTotal number of branches in the workflow\nGet total number of steps executed\nSet the conditional configuration\nSet the error strategy\nEnable hook integration with a WorkflowExecutor\nSet the component registry for component lookup\nAdd a step to this branch\nAdd multiple steps to this branch\nSet the workflow configuration\nName of the workflow that was executed\nCheck if agent classification matches expected type\nAlways true condition (for default branches)\nLogical AND of multiple conditions\nCondition types for workflows\nContext for condition evaluation\nCondition evaluator for workflows\nResult of condition evaluation\nCustom condition with JavaScript-like expression\nAlways false condition\nLogical NOT of a condition\nLogical OR of multiple conditions\nCompare a shared data value to a target value\nCheck if shared data key exists\nCheck if previous step failed\nCheck if step output contains a specific string\nCompare step result output to expected value\nCheck if previous step was successful\nCreate an agent classification condition\nCreate an AND condition\nCreate a custom condition with expression\nHuman-readable description of what was evaluated\nCreate an error result\nOptional error message if evaluation failed\nEvaluate a condition with the given context\nCurrent workflow execution ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet shared data value by key\nGet step output by step ID\nGet step result by step ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if evaluation failed\nCheck if evaluation was successful (no error)\nWhether the condition evaluated to true\nCreate a new condition evaluator\nCreate a new condition evaluation context\nCreate a NOT condition\nCreate an OR condition\nShared data from workflow state\nCreate a shared data equals condition\nCreate a shared data exists condition\nCreate a step failed condition\nCreate a step output contains condition\nStep outputs from completed steps\nCreate a step result equals condition\nStep results from completed steps\nCreate a step succeeded condition\nCreate a successful false result\nCreate a successful true result\nAdd shared data to context\nAdd step outputs to context\nAdd step results to context\nExpected classification type (e.g., “blog”, “social…\nExpected value for comparison\nKey in shared data to check\nText to search for in the output\nName of the step to check\nName of the classification step\nContinue to the next step\nAction to take after a step failure\nError handler for basic workflows\nSuggested recovery actions\nRetry the current step\nStop the entire workflow\nAnalysis of a workflow error\nTypes of workflow errors\nAnalyze workflow-level errors and provide recovery …\nCalculate retry delay based on strategy and attempt count\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a human-readable error report\nHandle a step failure and determine next action\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error handler with default strategy\nDefault implementation of WorkflowExecutor\nExecution context for workflows\nHook for monitoring workflow execution\nExecution metrics for workflow runs\nTrait for workflow execution management\nCalled after workflow execution completes\nCalled before workflow execution starts\nCancel a running workflow execution\nCancellation token\nEnable metrics collection\nCPU usage percentage (if available)\nTotal execution time\nEnable execution tracing\nExecute a workflow asynchronously, returning a handle\nExecute a workflow with execution context (timeout, …\nExecute a workflow with the given input\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet execution metrics for a completed workflow\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory usage in bytes (if available)\nCalled when workflow execution fails\nRegister an execution hook\nNumber of steps executed\nNumber of steps that failed\nExecution timeout\nDefault workflow factory implementation\nTemplate-based workflow factory\nFactory trait for creating workflows\nWorkflow creation parameters\nWorkflow template for common configurations\nSupported workflow types\nAdd a workflow template\nList available workflow types\nBase workflow configuration\nCreate workflow from template\nCreate workflow from string type name (convenience method)\nCreate a workflow instance based on parameters\nGet default configuration for a workflow type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a template by name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available templates\nList available workflow types as strings\nName of the workflow\nType-specific configuration\nType of workflow to create\nHook function type - will be expanded in Phase 4\nABOUTME: Hook builder pattern for workflow integration …\nABOUTME: Integration of llmspell-hooks HookExecutor with …\nABOUTME: Workflow lifecycle hook definitions and …\nABOUTME: Hook type definitions for workflow lifecycle …\nBuilder extension for adding hooks to workflows\nPrepare hook points for Phase 4 (no-op for now)\nAdd a logging hook that works now (before Phase 4)\nTrait for workflows to implement hook-aware execution\nWorkflow execution phases for hook context\nEnhanced workflow executor with hook integration\nWorkflow-specific hook context with execution metadata\nConfiguration for workflow lifecycle hook integration\nBase hook context\nCircuit breaker configuration\nEnable comprehensive audit logging\nEnable circuit breaker protection\nEnable hook execution (can be disabled for performance)\nExecute hooks for state changes\nExecute hooks for step boundaries\nExecute the workflow with hooks\nExecute hooks for a workflow phase\nWorkflow execution phase\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet hook point for this execution phase\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum time allowed for hook execution\nMaximum security level allowed for workflow execution\nCreate a new workflow hook context\nCreate a new workflow executor with hook integration\nPattern-specific context (e.g., iteration count for loops)\nShared workflow data\nCurrent step information (if applicable)\nAdd pattern-specific context\nSet shared data\nSet step context (for step boundary hooks)\nWorkflow metadata\nCurrent workflow state\nWorkflow type (Sequential, Conditional, Loop, Parallel)\nAfter workflow completes successfully\nAfter a step completes\nBefore workflow starts execution\nBefore a step executes\nCustom hook point\nLifecycle hook points for workflows\nWhen workflow encounters an error\nWhen a step fails\nExtension trait to add hooks to workflows\nWorkflow hooks container\nAdd a hook\nAdd a simple logging hook\nCreate a simple logging hook (works now without full hook …\nExecute hooks for a given point (placeholder …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet reference to hooks\nGet mutable reference to hooks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new hooks container\nRegister a hook (placeholder - full implementation in …\nContext passed to hook functions\nHook execution error\nResult returned by hook functions\nStep-specific context\nWhether to continue workflow execution\nStep duration (for after_step hooks)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent hook point\nHook point where error occurred\nStep index (0-based)\nStep input\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional message to log\nError message\nAdditional metadata\nStep name\nStep output (for after_step hooks)\nWhether the error is recoverable\nCurrent workflow state\nOptional modifications to workflow state\nStep information (if applicable)\nStep type (tool, agent, workflow)\nTimestamp\nWorkflow ID\nWorkflow name\nBreak condition for early loop termination\nCollect all iteration results\nIterate over a collection of values\nKeep first N results\nKeep last N results\nKeep only the last result\nConfiguration for loop workflow\nBuilder for LoopConfig\nIterator types for loop workflow\nLoop workflow implementation\nBuilder for loop workflows\nLoop workflow result\nNo aggregation\nIterate over a numeric range\nResult aggregation strategy\nIterate while a condition is true\nAdd a break condition\nAdd a step to the loop body\nAggregated results based on strategy\nSet the result aggregation strategy\nResult aggregation strategy\nSet all body steps at once\nSteps to execute in each iteration\nOptional break conditions\nReason for breaking if applicable\nBuild the final LoopConfig with validation\nCreate a new loop workflow with builder pattern\nCreate a new builder for LoopConfig\nNumber of iterations completed\nSet whether to continue on iteration errors\nWhether to continue on iteration errors\nTotal execution time\nError message if failed\nExecute the loop workflow with state-based output\nExecute the loop workflow\nCondition expression that when true, breaks the loop\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet delay between iterations\nDelay between iterations\nSet the iterator configuration\nIterator configuration\nOptional message to include when breaking\nGet workflow name\nCreate a new builder\nCreate a new loop workflow\nCreate with hook integration\nCreate with both hooks and registry\nCreate with registry for component lookup\nWhether the workflow completed successfully\nSet timeout for the entire loop\nMaximum execution time for the entire loop\nTotal number of iterations planned\nEnable hook integration with a WorkflowExecutor\nSet the component registry for component lookup\nWorkflow name\nCondition to evaluate - can reference loop variables\nMaximum iterations to prevent infinite loops\nResult from a parallel branch execution\nA branch in a parallel workflow\nConfiguration for parallel workflow execution\nBuilder for ParallelConfig\nParallel workflow implementation\nBuilder for parallel workflows\nResult of parallel workflow execution\nGet number of branches\nBranch name\nResults from all branches\nBuild the final ParallelConfig with validation\nCreate a new parallel workflow with builder pattern\nCreate a new builder for ParallelConfig\nSet whether to continue if optional branches fail\nWhether to continue if optional branches fail\nDescription of what this branch does\nTotal execution time\nTotal execution duration\nError message if failed\nError message if workflow failed\nSet whether to fail fast on first error\nWhether to fail fast on first error\nNumber of branches that failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a summary report\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet maximum number of branches to execute concurrently\nMaximum number of branches to execute concurrently\nGet workflow name\nUnique name for this branch\nCreate a new builder with default configuration\nCreate a new parallel workflow\nCreate with hook integration\nCreate with both hooks and registry\nCreate with registry for component lookup\nWhether this branch is required for workflow success\nWhether this was a required branch\nResults from steps in the branch\nSteps to execute in this branch\nWhether execution was stopped early due to fail-fast\nWhether the branch succeeded\nWhether the workflow completed successfully\nNumber of branches that succeeded\nSet timeout for the entire parallel execution\nMaximum execution time for this branch\nTimeout for the entire parallel execution\nEnable hook integration with a WorkflowExecutor\nSet the component registry for component lookup\nWorkflow name\nA condition evaluation failed\nConfiguration error\nGeneral workflow error\nState access failed\nA step in the workflow failed to execute\nThe workflow timed out\nWorkflow-specific error types\nUnified workflow result containing only execution metadata\nExtension trait for backwards compatibility during …\nWorkflow type identifier for result categorization\nTotal execution duration\nError information if the workflow failed\nUnique execution ID for this workflow run\nCreate a new failed workflow result\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a state key for aggregated results\nGenerate a state key for a parallel branch\nGenerate a state key for a loop iteration\nGenerate a state key for a workflow step\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdditional metadata for debugging\nCreate a partially successful result\nState keys where outputs were written Format: “…\nCurrent workflow status\nNumber of steps successfully executed\nNumber of steps that failed\nNumber of steps that were skipped\nCreate a new successful workflow result\nOverall success status\nHuman-readable summary of the execution\nConvert legacy result to unified WorkflowResult\nAdd metadata to the result\nName of the workflow instance\nType of workflow that was executed\nSequential workflow that executes steps one after another\nBuilder for creating sequential workflows\nAdd a step to the workflow\nAdd a step to the workflow\nAdd multiple steps to the workflow\nAdd multiple steps to the workflow\nBuild the sequential workflow\nCreate a new sequential workflow with builder pattern\nExecute the workflow with state-based outputs\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet shared data value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet workflow name\nCreate a new sequential workflow\nCreate a new builder\nCreate with hook integration\nCreate with hook integration and registry\nCreate a new sequential workflow with registry for …\nReset the workflow to initial state\nSet shared data value\nGet number of steps\nSet the workflow configuration\nSet the error strategy\nEnable hook integration with a WorkflowExecutor\nSet the component registry for component lookup\nABOUTME: State builder pattern for workflow integration …\nABOUTME: Shared state implementation for workflows …\nABOUTME: State type definitions for workflow state …\nBuilder extension for adding state management to workflows\nCreate a new state manager and enable it for this workflow\nEnable state management for this workflow\nGlobal state accessor\nStep-specific state accessor\nWorkflow-specific state accessor\nThread-safe workflow state manager\nDelete a value using the default workflow scope\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value using the default workflow scope\nAccess global state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new state manager\nSet a value using the default workflow scope\nGet the size of the state store\nAccess step-specific state\nCreate a workflow-specific state accessor\nCustom namespace\nGlobal scope - accessible by all workflows\nTrait for types that can access workflow state\nState entry with metadata\nState scope for isolation between workflows\nStep-specific scope within a workflow\nWorkflow-specific scope\nClear all values in a scope\nWhen this entry was created\nDelete a value from state\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all values in a scope\nGet a value from state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all keys in a scope\nOptional metadata\nCreate a new state entry\nCreate a scoped key combining scope and key\nSet a value in state\nUpdate the value and timestamp\nWhen this entry was last updated\nThe actual value\nExecution statistics for workflow monitoring\nPersistent workflow state for storage\nExtended state manager with persistence capabilities\nRetry statistics\nMemory-based state manager for workflows\nStep execution statistics\nWorkflow checkpoint for resumption\nWorkflow execution statistics\nExtension trait for workflow components to add persistence …\nAdvance to next step\nAverage execution time per run\nAverage retries per failed step\nAverage execution time for this step\nCancel workflow execution\nNumber of cancelled executions\nCheck if workflow has exceeded maximum execution time\nCheckpoint states for resumption\nComplete workflow execution\nWorkflow configuration\nTimestamp of checkpoint\nGet current execution time if workflow is running\nCustom workflow properties\nCheckpoint description\nExecution history\nExecution history up to checkpoint\nExecution statistics\nTotal executions of this step\nNumber of failed executions\nRetries that ultimately failed\nFailed executions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a formatted report\nGet all shared data\nGet current step index\nGet execution history\nGet execution statistics\nGet shared data\nGet a snapshot of the current state\nGet current workflow status\nGet step output\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is an automatic or manual checkpoint\nLast execution timestamp\nState timestamp\nLoad existing workflow state from persistent storage\nLoad workflow state\nGet in-memory state manager\nWorkflow metadata\nCreate new persistent workflow state manager\nCreate a new state manager\nCreate new persistent workflow state\nCreate with hook integration\nGet the persistent state manager\nRecord step execution result\nReset state to initial values\nRetry count for this step\nRetry statistics\nSave current state to persistent storage\nSet the persistent state manager\nSet shared data\nSet step output\nStart workflow execution\nWorkflow state at checkpoint\nCurrent workflow status\nStep index when checkpoint was created\nStep name\nSteps execution statistics\nCalculate success rate as percentage\nSuccessful executions\nNumber of successful executions\nRetries that eventually succeeded\nTotal execution time across all runs\nTotal number of workflow executions\nTotal retry attempts across all steps\nTotal execution time for this step\nTrack shared data access for hooks (call after get …\nEnable hook integration\nWorkflow identifier\nCurrent workflow state\nBasic step executor for workflow steps\nExecute a single step with retry logic\nExecute a single step with workflow metadata for hooks\nExecute a step with retry logic\nExecute a step with retry logic and workflow metadata\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new step executor with configuration\nCreate a new step executor with hook integration\nCreate a new step executor with both hooks and registry\nCreate a new step executor with registry for component …\nExecute an agent with given input\nContinue executing remaining steps\nCustom function execution\nError handling strategies for workflows\nStop execution on first error\nRetry failed step with exponential backoff\nWorkflow execution result\nTypes of workflow steps\nExecute a tool with given parameters\nWorkflow trait for workflow patterns.\nExecute a nested workflow\nWorkflow status\nWorkflow step for workflow patterns.\nAdd a step to the workflow\nExecute the workflow\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet execution results\nGet all steps\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet workflow name\nRemove a step from the workflow\nReset workflow to initial state\nGet workflow status\nValidate workflow before execution\nContext for step execution within a workflow\nWorkflow configuration\nBuilder for WorkflowConfig\nWorkflow input containing initial data and configuration\nWorkflow output containing results and metadata\nMemory-based workflow state\nBuild the final WorkflowConfig\nCreate a new builder for WorkflowConfig\nOptional context variables\nSet whether to continue execution after step failures\nWhether to continue execution after step failures\nCreate a child context for nested workflow execution\nCurrent step index\nSet default error handling strategy\nDefault error handling strategy\nSet default timeout for individual steps\nDefault timeout for individual steps\nConvenience method alias for default_step_timeout\nTotal execution duration\nError message if workflow failed\nEvent emitter from parent context\nWorkflow execution ID\nSet whether to use exponential backoff for retries\nWhether to use exponential backoff for retries\nCreate a fast configuration preset (minimal retries, short …\nFinal context state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial input data for the workflow\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is the final retry attempt\nLast update time (not serializable)\nSet maximum execution time for the entire workflow\nMaximum execution time for the entire workflow\nSet maximum retry attempts for failed steps\nMaximum retry attempts for failed steps\nCreate a new builder with default configuration\nFinal output data from the workflow\nCurrent retry attempt (0 for first attempt)\nSet delay between retry attempts (base delay for …\nDelay between retry attempts (base delay for exponential …\nConvenience method for setting retry strategy with common …\nCreate a robust configuration preset (more retries, longer …\nShared data between steps\nExecution start time (not serializable)\nState access for persistent storage (from ExecutionContext)\nShared state accessor for this workflow\nState key naming conventions for workflow outputs\nStep outputs for reference\nNumber of steps executed\nNumber of failed steps\nSuccess status\nExecution timeout for the entire workflow\nStep-specific timeout\nConvert StepExecutionContext to ExecutionContext for …\nConvert StepExecutionContext to ExecutionContext with …\nAdd event emitter to the context\nAdd state access to the context\nAdd state accessor to the context\nReference to workflow state\nGenerate state key for an agent execution metadata within …\nGenerate state key for an agent execution output within a …\nGenerate state key for the final workflow output\nGenerate state key for a nested workflow metadata\nGenerate state key for a nested workflow output\nGenerate state key for a workflow step metadata\nGenerate state key for a workflow step output\nGenerate state key for workflow execution errors\nGenerate state key for workflow execution state")