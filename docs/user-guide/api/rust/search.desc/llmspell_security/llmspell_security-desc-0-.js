searchState.loadedDescShard("llmspell_security", 0, "ABOUTME: llmspell-security implementation crate ABOUTME: …\nABOUTME: Security sandbox for safe tool execution ABOUTME: …\nEnvironment access violation\nFile access violation\nIntegrated sandbox that combines file, network, and …\nNetwork access violation\nResource limit violation\nSandbox execution context\nSandbox violation types\nAllowed network domains\nEnvironment variables allowed\nAllowed file paths\nGet sandbox context\nABOUTME: File system access control sandbox ABOUTME: …\nGet file sandbox\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet violation summary\nCheck if the sandbox has any violations\nUnique sandbox ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a domain is allowed\nCheck if an environment variable is allowed\nCheck if a file path is allowed\nABOUTME: Network access control sandbox ABOUTME: Controls …\nGet network sandbox\nCreate a new integrated sandbox\nCreate a new sandbox context\nResource limits\nABOUTME: Resource monitoring and enforcement for sandbox …\nGet resource monitor\nSecurity requirements\nStart monitoring resources\nStop monitoring resources\nWorking directory\nFile sandbox for controlling file system access\nSafe file append operation\nClear violations history\nSafe directory creation\nSafe file deletion\nCheck if file exists\nGet file metadata\nReturns the argument unchanged.\nGet all violations that occurred\nCalls <code>U::from(self)</code>.\nSafe directory listing\nCreate a new file sandbox\nSafe file read operation\nCheck if a path is safe (no path traversal, within allowed …\nSafe file write operation\nDomain-specific statistics\nNetwork request information\nNetwork sandbox for controlling network access\nNetwork statistics\nRate limiting configuration\nClear violations history\nMake a safe HTTP DELETE request\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMake a safe HTTP GET request\nGet network statistics\nGet all violations that occurred\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum requests per time window\nCreate a new network sandbox\nMake a safe HTTP POST request\nMake a safe HTTP PUT request\nValidate a network request\nTime window duration in seconds\nSet default rate limiting configuration\nEfficiency metrics\nResource monitor for tracking and enforcing limits\nResource statistics\nResource usage statistics\nCPU time used in milliseconds\nCustom resource usage\nFile operations performed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current resource usage\nGet detailed resource statistics\nGet all violations\nCheck if any violations occurred\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if monitoring is active\nMemory usage in bytes\nNetwork bytes transferred\nCreate a new resource monitor\nRecord custom resource usage\nRecord file operation\nRecord network usage\nReset resource counters\nStart resource monitoring\nStop resource monitoring\nTimestamp of measurement")