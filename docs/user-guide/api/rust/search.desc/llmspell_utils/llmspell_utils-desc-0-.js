searchState.loadedDescShard("llmspell_utils", 0, "<code>LLMSpell</code> Utilities\nAPI key management system API Key Management System\nPersistent storage for API keys ABOUTME: Persistent …\nAsync operation utilities and helpers Async operation …\nBail out with an error\nHelper macros for error construction\nCircuit breaker pattern for fault tolerance ABOUTME: …\nConnection pooling abstraction\nDebug infrastructure for script engines Debug …\nEncoding and hashing utilities Encoding and hashing …\nError construction and builder utilities Error …\nProduction-ready error handling with information …\nFile system monitoring utilities ABOUTME: File system …\nFile system operations and path utilities File system …\nComponent ID generation utilities Component ID generation …\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nParameter extraction and validation utilities Parameter …\nProgress reporting framework\nMacro for easy progress reporting\nRate limiting utilities\nProvider-specific rate limiting framework ABOUTME: …\nResource limit enforcement framework ABOUTME: Resource …\nResource monitoring and metrics ABOUTME: Resource …\nResponse building utilities Response building utilities\nRetry logic with exponential backoff\nFile and content search utilities File and content search …\nSecurity utilities for DoS protection and resource limits …\nSerialization and deserialization helpers Serialization …\nString manipulation and formatting helpers String …\nSystem information gathering utilities System information …\nTime and date utilities Time and date utilities\nTimeout management utilities\nHelper macro for tracking operations in loops\nCommon validation functions Common validation utilities\nTypes of API key actions for audit logging\nAudit log entry\nAPI Key Manager\nAPI key metadata\nAPI key storage backend\nNew key was created\nKey was deactivated\nKey was deleted\nIn-memory storage (for development/testing)\nKey was read/accessed\nKey was rotated\nKey was updated\nType of access (read, rotate, deactivate)\nAdd a new API key\nClear audit log\nWhen the key was created\nDeactivate a key\nDelete a key\nOptional details about the access\nWhen the key expires (if applicable)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a key\nGet audit log entries\nGet an API key by service name\nGet metadata\nGet metadata for a key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the key is currently active\nKey identifier\nKey that was accessed\nWhen the key was last used\nList all key IDs\nLoad API keys from a configuration file\nLoad API keys from environment variables\nCreate a new API key manager with in-memory storage\nRotate an API key\nService this key is for (e.g., “google_search”, “…\nService that accessed the key\nSet the environment variable prefix\nStore a key\nTimestamp of the event\nUpdate key metadata\nUsage count\nCreate a new API key manager with custom storage\nPersistent storage implementation using sled\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList all key IDs\nCreate a new persistent storage backend\nErrors that can occur during async operations\nResult type for async operations\nA type alias for boxed futures returning results\nRepresents a cancellable async operation\nA future that can be cancelled\nOperation was cancelled\nContains the error value\nContains the success value\nConfiguration for retry operations\nRetry limit exceeded\nOperation timed out\nFactor to multiply delay by after each attempt\nCancel this future\nMap a function over async operations with a concurrency …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial delay between retries\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this future has been cancelled\nAdd jitter to retry delays\nMaximum number of attempts\nMaximum delay between retries\nCreate a new cancellable future\nExecute multiple futures concurrently and return the first …\nRetry an async operation with exponential backoff\nExecute an async operation with a timeout\nExecute an async operation with a timeout, returning a …\n<code>ToString::to_string</code>, but without panic on OOM.\nNumber of attempts made before giving up\nCircuit breaker instance for a single service\nCircuit breaker configuration\nCircuit breaker errors\nPer-service circuit breaker manager\nResult type for circuit breaker operations\nCircuit breaker metrics\nMetrics collector for circuit breakers\nCircuit is open and rejecting requests\nCircuit breaker states\nCircuit is closed - normal operation, requests are allowed\nConfiguration error\nContains the error value\nCircuit is half-open - limited requests allowed for testing\nMetric collection error\nContains the success value\nCircuit is open - requests are rejected due to failures\nPre-configured settings for common services\nState transition event for tracking\nThreshold configuration for different severity levels\nOptional alert handler for circuit state changes\nGet metrics for all services\nCheck if the circuit allows a request\nCheck if the circuit allows requests\nGet average response time\nConfigure a specific service with custom settings\nCritical level configuration\nConfiguration for critical services (more conservative)\nGet current circuit state\nCurrent state\nConfiguration for database connections\nExecute a function with circuit breaker protection for a …\nExecute a function with circuit breaker protection\nNumber of consecutive failures to open circuit\nFailure rate percentage to open circuit (0-100)\nTime window for failure rate calculation\nForce the circuit to a specific state (for testing/manual …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrevious state\nGet current metrics\nGet or create a circuit breaker for a service\nConfiguration for high-volume services (more lenient)\nConfiguration for HTTP APIs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if circuit is critical\nCheck if circuit is degraded\nCheck if circuit is healthy\nCheck if the circuit is protecting (rejecting most …\nLast state change time\nConfiguration for message queues\nGet circuit metrics\nCreate a new configuration with default values\nCreate a new circuit breaker manager with default …\nCreate a new metrics collector\nCreate a new state transition\nCreate a new circuit breaker with configuration\nGet services in open state\nGet p95 response time\nReason for transition\nRecent response times (for allowed requests)\nRecord an allowed request\nRecord a failed operation\nRecord a failed request\nRecord a rejected request\nRecord a state change\nRecord a successful operation\nRecord a successful request\nCalculate rejection rate percentage\nReset metrics (for testing)\nTime to wait before attempting to close circuit\nState change count\nCalculate success rate percentage\nNumber of successes needed in half-open to close circuit\nNumber of test requests allowed in half-open state\nTime in current state\nTimestamp of transition\nNew state\nTotal requests allowed\nTotal failed operations\nTotal requests rejected\nTotal successful operations\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate configuration\nWarning level configuration\nBuilder-style method to set alert handler\nCreate a new circuit breaker manager with custom default …\nBuilder-style method to set failure threshold percentage\nBuilder-style method to set failure threshold count\nBuilder-style method to set reset timeout\nBuilder-style method to set success threshold\nBuilder-style method to set test request count\nReason why the circuit is open\nThe connection type this factory creates\nTrait for creating connections\nConnection pool implementation\nFailed to create a new connection\nThe error type for this connection\nPool has no available connections\nPool configuration is invalid\nBuilder pattern for connection pools\nPool configuration\nConnection pool error types\nGuard for pooled connections that returns them when dropped\nPool statistics\nTrait for poolable connections\nPool is in the process of shutting down\nConnection validation failed\nAcquire a connection from the pool\nSet acquisition timeout\nMaximum time to wait for a connection\nNumber of available connections in the pool\nBuild the pool\nClose the connection\nCreate a new connection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the connection\nGet a mutable reference to the connection\nHow often to run health checks\nSet idle timeout\nMaximum idle time before closing a connection\nNumber of connections currently in use\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the connection is still valid\nSet maximum lifetime\nMaximum lifetime of a connection\nSet maximum pool size\nMaximum number of connections allowed\nMaximum allowed pool size\nSet minimum pool size\nMinimum number of connections to maintain\nCreate a new connection pool\nCreate a new pool builder\nPerform any cleanup when returning to pool\nShutdown the pool\nGet current pool statistics\nTake the connection, preventing it from being returned to …\nEnable or disable test on checkout\nWhether to validate connections before use\nTotal number of connections (available + in use)\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate a connection before use\nValidate the configuration\nError message describing the failure\nError message describing the validation failure\nError message describing the configuration issue\nCentral debug manager that coordinates all debug operations\nAdd a filter rule with full configuration\nAdd a module filter\nClear captured entries\nClear all module filters\nDebug entry structure for capturing debug messages\nFlush all outputs\nReturns the argument unchanged.\nGenerate a performance report\nGet captured debug entries\nGet module filter summary\nGet the last N captured entries\nGet the current debug level\nGet a performance tracker by name\nConvenience functions for the global debug manager\nGet the global debug manager instance\nCalls <code>U::from(self)</code>.\nCheck if debugging is enabled\nDebug level definitions and utilities\nLog a debug message\nLog with metadata\nEnhanced module filtering system with pattern matching and …\nCreate a new debug manager with default settings\nDebug output handlers for various destinations\nPerformance tracking utilities for debug profiling\nRemove a specific filter pattern\nSet default filter behavior\nEnable or disable debugging entirely\nSet the debug level\nSet the output handler\nStart a performance timer\nCreate a debug manager with a specific output handler\nA single debug entry with all associated metadata\nSource location information for debug entries\nColumn number (if available)\nCorrelation ID for tracing related entries\nSource file path\nFormat as JSON\nFormat as pretty JSON\nFormat as plain text\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction name (if available)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug level of this entry\nLine number\nMain message content\nOptional structured metadata\nModule or component that generated this entry\nCreate a new debug entry\nSource file location (if available)\nThread ID that generated this entry\nTimestamp when the entry was created\n<code>ToString::to_string</code>, but without panic on OOM.\nAdd correlation ID for tracing\nAdd metadata to this entry\nSet the module for this entry\nAdd source location to this entry\nLog a debug message\nLog an error message\nLog an info message\nSet the global debug level\nStart a timer\nLog a trace message\nLog a warning message\nAll above plus debug messages\nDebug level hierarchy for script debugging\nOnly errors are shown\nErrors, warnings, and informational messages\nNo debug output at all\nEverything including detailed trace information\nErrors and warnings\nGet the level as a numeric value for comparisons\nGet a colored representation for terminal output\nReturns the argument unchanged.\nConvert from a numeric value\nCalls <code>U::from(self)</code>.\nCheck if this level should be shown given the current …\n<code>ToString::to_string</code>, but without panic on OOM.\nEnhanced module filter with pattern matching capabilities\nExact module name match\nPattern type for module filtering\nFilter rule with pattern and enable/disable action\nPerformance statistics for the filter\nSummary of all filter rules\nHierarchical pattern (module.submodule.*)\nRegular expression pattern\nWildcard pattern (*, ?, [])\nAdd a simple pattern filter\nAdd a filter rule\nClear all filters\nCreate a filter for specific component debugging\nDefault action when no patterns match\nOptional description of the rule\nCreate a filter for development debugging\nWhether to enable (true) or disable (false) logging\nCreate a filter that only logs errors and warnings\nNumber of exact match rules\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all current filter rules as a summary\nGet performance statistics\nNumber of hierarchical rules\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new enhanced module filter\nPattern to match against\nNumber of compiled regex patterns\nCreate a filter for production logging\nRemove a specific filter pattern\nAll active filter rules\nSet the default action when no patterns match\nCheck if a module should be logged\nTotal number of rules\nTotal number of rules\nOutput handler that buffers entries in memory\nTrait for debug output handlers\nFormat for file output\nOutput handler that writes to a file\nJSON format\nPretty-printed JSON format\nMulti-output handler that writes to multiple destinations\nNull output handler that discards all entries\nOutput handler that writes to stdout\nPlain text format\nAdd an output handler\nClear the output (if applicable)\nGet a description of this output handler\nFlush any buffered output\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all buffered entries\nGet the last N entries\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new stdout output handler\nCreate a new file output handler\nCreate a new buffer output handler\nCreate a new multi-output handler\nWrite a debug entry to this output\nJSON-serializable performance report\nSummary statistics for JSON report\nA lap or checkpoint in performance tracking\nMemory usage snapshot\nPerformance tracker for timing operations\nComplete profile report\nGlobal performance profiler for collecting all timings\nCustom event recorded during timing\nStatistics for timing operations\nMemory information for a specific tracker\nNumber of active trackers\nAverage operation time\nCreate a child tracker\nClear all trackers\nNumber of laps\nMemory delta (end - start, can be negative)\nDuration since last lap\nGet the elapsed time without stopping\nMemory usage at tracker end (bytes)\nRecord a custom event\nCustom events recorded during timing\nFastest operation\nFormat as a human-readable string\nFormat as a report string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate flame graph compatible output\nGenerate JSON performance report\nGenerate memory usage snapshot\nGenerate a full performance report\nWhen the report was generated\nWhen the report was generated (RFC3339)\nGet all trackers\nGet all events\nGet all laps\nGet statistics for this tracker\nGet a tracker by name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecord a lap/checkpoint\nList of lap names and durations\nMaximum lap duration\nMean lap duration\nMedian lap duration\nMemory usage when lap was recorded (bytes)\nMemory usage at end (bytes)\nMemory usage at start (bytes)\nEvent metadata\nMinimum lap duration\nName of the lap/checkpoint\nEvent name\nName of the operation\nCreate a new performance tracker\nCreate a new profiler\nWhen the event occurred (relative to timer start)\n95th percentile lap duration\n99th percentile lap duration\nSlowest operation\nMemory usage at tracker start (bytes)\nStart a new timer\nStandard deviation of lap durations\nStop the tracker and return total duration\nSummary statistics\nTimestamp when lap was recorded\nWhen the snapshot was taken (seconds since epoch)\nMap of operation names to timing statistics\nDetailed timing statistics\nTotal duration\nTotal memory delta across all trackers (bytes)\nTotal number of tracked operations\nTotal time tracked across all operations\nPer-tracker memory information\nReport format version\nASCII encoding\nClassic Mac line ending (CR)\nWindows line ending (CRLF)\nSupported hash algorithms\nISO-8859-1 (Latin-1)\nUnix line ending (LF)\nLine ending types\nMD5 hash algorithm (128-bit)\nMixed line endings\nSHA-1 hash algorithm (160-bit)\nSHA-256 hash algorithm (256-bit)\nSHA-512 hash algorithm (512-bit)\nText encoding types\nUnknown/other encoding\nUTF-16 Big Endian\nUTF-16 Little Endian\nUTF-8 encoding\nWindows-1252 (Western European)\nBase64 decode data\nBase64 decode (URL-safe variant)\nBase64 encode data\nBase64 encode (URL-safe variant)\nConvert line endings in text\nConvert text from one encoding to another\nDecode text data to UTF-8 string\nDetect line ending type in text\nDetect the encoding of text data\nEncode UTF-8 string to specified encoding\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse hexadecimal string to bytes\nCalculate hash of data using specified algorithm\nCalculate hash of a file with streaming (memory efficient)\nCalculate hash of a string\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove BOM (Byte Order Mark) from data if present\nConvert spaces to tabs (converts groups of spaces equal to …\nConvert tabs to spaces\nConvert bytes to hexadecimal string\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nVerify if data matches a given hash\nError built by <code>ErrorBuilder</code>\nError builder for fluent error construction\nTrait for adding context to errors\nBuild the final error\nAdd context with a static string\nGet the error context\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a specific context value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLLMSpellError-specific builders\nGet the error message\nCreate a new error builder with the given message\nCommon error templates\n<code>ToString::to_string</code>, but without panic on OOM.\nAdd context to the error\nAdd context information\nAdd multiple context entries\nAdd a source error\nAdd a source error from a string\nCreate a component error\nCreate a configuration error\nCreate a provider error\nCreate a script error\nCreate a security error\nCreate a storage error\nCreate a tool error\nCreate a validation error\nCreate a workflow error\nCreate a configuration error\nCreate an I/O error\nCreate a network error\nCreate a not found error\nCreate a parsing error\nCreate a permission error\nCreate a timeout error\nCreate a validation error\nDebug information manager for development\nError context builder for rich error information\nLogging standards enforcer\nSafe error handler for production use\nProduction-safe error response\nStack trace remover for production\nAdd debug information to response if enabled\nError category if allowed\nError code for reference\nError message safe for client\nFields that must be excluded\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle any error safely\nHandle an <code>LLMSpellError</code> safely\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdditional context\nMinimum log level for production\nCreate a new safe error handler\nCreate a new debug info manager\nCreate a new error context\nOperation being performed\nRemove stack traces from error strings\nRequest ID for correlation\nFields that must be included\nResource involved\nWhether the client should retry\nTimestamp\nUser or session ID (sanitized)\nValidate a log record\nAdd metadata\nSet the operation\nSet the resource\nSet the user ID\nFile or directory was created\nFile or directory was deleted\nFile system event\nFile system event types\nFile or directory was modified\nOther event type\nFile or directory was renamed\nConfiguration for file watching\nAdd a path to watch\nSet debounce duration\nDebounce events to prevent duplicates\nDebounce duration in milliseconds\nType of event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if event matches a glob pattern\nSet maximum events to buffer\nMaximum events to buffer\nCreate a new file event\nCreate a new watch configuration\nCreate a new rename event\nOptional old path (for rename events)\nPath that triggered the event\nPaths to watch\nSet pattern filter\nPattern filter (glob)\nSet recursive watching\nRecursive watching\nCheck if a path should be watched based on configuration\nSet timeout for watching\nTimeout for watching in seconds\nTimestamp of the event\nValidate the configuration\nList directory contents with metadata\nGet file or directory metadata\nLast access time (may not be reliable on all systems)\nAppend data to a file\nCopy a file with proper error handling\nCreation time (platform-dependent, may not be available)\nEnsure a directory exists, creating it if necessary\nExpand path with environment variables and tilde expansion\nCheck if a file or directory exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet file or directory metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a path is absolute\nWhether this is a directory\nWhether this is a directory\nWhether this is a regular file\nWhether this is a regular file\nWhether this is a symbolic link\nWhether this is a symbolic link\nJoin paths safely, handling platform differences\nList directory contents with metadata\nLast modification time\nLast modification time\nMove or rename a file\nFile or directory name (not full path)\nNormalize a path for cross-platform compatibility\nGet the parent directory of a path\nFull path to the entry\nSafely read a file with size limits\nWhether the file is read-only\nRemove a directory and all its contents if it exists\nRemove a file if it exists\nFile or directory size in bytes\nFile size in bytes\nWrite data to a file with proper error handling\nAtomically write data to a file\nType alias for component IDs\nBuilder for creating customized component IDs\nNamespace for agent IDs\nNamespace for tool IDs\nNamespace for workflow IDs\nBuild the component ID\nExtract the prefix from a component ID\nExtract the UUID part from a component ID\nReturns the argument unchanged.\nGenerate a unique component ID with prefix\nGenerate a deterministic component ID\nGenerate a sequential ID for testing\nGenerate a short component ID with prefix\nCalls <code>U::from(self)</code>.\nCreate a new ID builder\nUse short UUID format\nValidate a component ID format\nSet the prefix for the ID\nAdd a custom suffix\nInclude a timestamp in the ID\nExtract a boolean parameter with a default value\nExtract parameters directly from <code>AgentInput</code> (without …\nExtract an optional array parameter\nExtract an optional boolean parameter\nExtract an optional float parameter\nExtract an optional integer parameter\nExtract an optional object parameter\nExtract an optional string parameter\nExtract and deserialize an optional typed parameter\nExtract an optional unsigned integer parameter\nExtract the parameters object from an <code>AgentInput</code>\nExtract a required array parameter\nExtract a required boolean parameter\nExtract a required float parameter\nExtract a required integer parameter\nExtract a required object parameter\nExtract a required string parameter\nExtract and deserialize a required typed parameter\nExtract a required unsigned integer parameter\nExtract a required string parameter with a default value\nValidate that all of the specified parameters exist\nValidate that at least one of the specified parameters …\nProgress reporter channel is closed\nOperation completed\nCustom event\nOperation failed Operation failed\nInvalid progress value provided\nProgress operation failed\nProgress reporter builder for fluent API\nProgress callback function\nProgress error types\nProgress update event\nIterator wrapper that reports progress\nExtension trait for iterators with progress reporting\nProgress reporter for tracking operation progress\nProgress tracker that manages multiple progress reporters\nStarted a new operation\nSub-task progress\nProgress update\nGet active operations\nAdd a progress callback\nBuild the progress reporter\nMark the operation as completed\nCreate a new progress reporter\nGet current progress value\nSend a custom event\nGet elapsed time\nMark the operation as failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUpdate progress by incrementing\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new progress reporter\nCreate a new progress tracker\nCreate a new progress builder\nGet progress percentage (if total is known)\nReport a sub-task\nSet the total number of items\nSet the progress tracker\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate progress to a specific value\nAdd progress reporting to an iterator\nError message describing the issue\nError message describing the failure\nCurrent progress value\nCurrent progress value\nEvent data payload\nTotal operation duration\nDuration before failure\nError message\nType of the custom event\nOptional progress message\nOptional completion message\nName of the sub-task\nName of the operation\nTotal number of items to process (if known)\nTotal number of items (if known)\nTotal for this sub-task\nFixed window algorithm - simple time-based windows\nInvalid rate limiter configuration\nRate limiting algorithm\nRate limiter error types\nRate limit has been exceeded\nMain rate limiter struct\nBuilder pattern for rate limiters\nRate limiter configuration\nSliding window algorithm - smooth rate limiting\nToken bucket algorithm - allows bursts\nAcquire a permit, waiting if necessary\nAlgorithm to use\nAllow bursts (token bucket only)\nWhether to allow bursts (for token bucket)\nGet the number of available permits\nBuild the rate limiter\nSet custom rate limit\nUse fixed window algorithm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a permit is available without consuming it\nMaximum number of requests allowed\nCreate a new rate limiter with the given configuration\nCreate a rate limiter for requests per hour\nSet requests per hour\nCreate a rate limiter for requests per minute\nSet requests per minute\nCreate a rate limiter for requests per second\nSet requests per second\nUse sliding window algorithm\nUse token bucket algorithm\nTry to acquire a permit without waiting\n<code>ToString::to_string</code>, but without panic on OOM.\nTime window for the rate limit\nSet the algorithm\nEnable burst mode (for token bucket)\nError message describing the issue\nTime to wait before retrying\nBackoff strategy for retries\nCustom backoff with jitter\nExponential backoff - doubles each time\nLinear backoff - fixed increment\nCollects and manages rate limit metrics\nNo backoff - immediate retry\nPre-configured rate limits for known providers\nRate limit configuration for a specific provider\nProvider-aware rate limiter\nRate limit information from API response headers\nRate limit metrics for a provider\nHandles retry logic for rate-limited operations\nRetry policy configuration\nAdd a provider with rate limit configuration\nAllow burst requests\nAnthropic Claude API rate limits\nAverage response time for successful requests\nAWS SES rate limits (default)\nBackoff strategy for retries\nBackoff strategy to use\nBing Search API rate limits\nBrave Search API rate limits\nCalculate delay for a given retry attempt (0-indexed)\nCheck if a request is allowed for a provider\nDaily limit (optional)\n<code>DuckDuckGo</code> API rate limits (conservative estimate)\nExecute an operation with retry logic\nExecute a request with rate limiting and retry logic\nGet rate limit config for a provider by name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse rate limit information from HTTP headers\nGeneric API rate limits (conservative defaults)\nGet all metrics\nGet all provider metrics\nGet providers with critical rate limit usage\nGet current metrics for a provider\nGet metrics for a specific provider\nGet providers with warning level usage\nGitHub API rate limits (authenticated)\nGoogle Search API rate limits\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if rate limit is critical (&gt;90% used)\nCheck if rate limit is warning level (&gt;75% used)\nTime when metrics were last updated\nTotal limit for the window\nMaximum retry attempts\nMaximum number of retry attempts\nCreate a new metrics collector\nCreate a new provider rate limiter\n<code>OpenAI</code> API rate limits (GPT-3.5-turbo tier)\nProvider name\nTotal rate limit for current window (if known)\nRecord an allowed request\nRecord a denied request\nRecord a response time\nRecord a retry attempt\nRequests remaining in current window\nTotal requests allowed\nTotal requests denied due to rate limits\nRequests per hour (optional)\nRequests per minute\nCurrent requests remaining (if known)\nReset all metrics\nWhen the rate limit resets (Unix timestamp)\nReset metrics for a provider\nTime when rate limit resets\nTime to wait before retrying (from Retry-After header)\nWhether to retry on rate limit errors\n<code>SendGrid</code> API rate limits\n<code>SerpAPI</code> rate limits\nExecute with simple retry (no rate limiting)\nSlack API rate limits\nNumber of requests that succeeded after retry\nNumber of retries performed\nUpdate rate limit from response headers\nUpdate rate limit total\nUpdate remaining requests count\nUpdate reset time\nCalculate rate limit usage percentage\nCalculate wait time based on rate limit info\nCreate with provider configurations\nBase delay in milliseconds\nBase delay in milliseconds\nMilliseconds to add for each retry\nMaximum jitter in milliseconds\nGuard for tracking concurrent operations\nMemory allocation guard that tracks and releases memory\nResource limits configuration\nResource usage metrics\nResource usage tracker for monitoring\nTrack CPU time usage\nCheck file size limit\nCurrent concurrent operations\nCPU time used in milliseconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current resource usage metrics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum concurrent operations\nMaximum CPU time in milliseconds (None = unlimited)\nMaximum file size in bytes for read/write operations\nMaximum memory in bytes (None = unlimited)\nMaximum number of operations (e.g., loop iterations)\nMemory used in bytes\nCreate a new memory guard\nCreate a new resource tracker with given limits\nGet operation timeout duration\nTimeout for async operations\nNumber of operations performed\nCreate relaxed resource limits for trusted operations\nRelease tracked memory\nCreate strict resource limits for untrusted operations\nTrack concurrent operation start\nTrack memory allocation\nTrack an operation\nCreate unlimited resource limits (use with caution)\nExecute an async operation with timeout\nResource allocation\nHigh resource usage warning\nResource limit exceeded\nResource monitoring configuration\nOperation completed\nResource release\nResource usage event\nTypes of resource events\nResource monitor for tracking multiple components\nAggregated resource statistics\nAverage CPU time per component\nMonitoring interval\nClear event history\nTool or component name\nComponent count\nCurrent concurrent operations\nEnable detailed logging\nEvent type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current metrics for all components\nGet metrics for a specific component\nGet event history\nGet aggregated statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimit exceeded count\nMaximum events to keep in history\nResource metrics at the time of event\nCreate a new resource monitor\nRegister a component for monitoring\nSend a custom event\nStart monitoring loop\nEvent timestamp in milliseconds since start\nTotal memory allocated across all components\nTotal operations performed\nUnregister a component\nHigh usage warnings count\nWarning threshold percentage (0.0 - 1.0)\nError details for standardized error responses\nA builder for creating consistent response objects\nRepresents a validation error\nBuild the final response as a JSON value\nBuild the response and extract specific fields for tool …\nOptional error code for categorization\nOptional error code for categorization\nOptional additional error details\nCreate a new error response builder\nHelper function to create a simple error response\nThe field that failed validation (if applicable)\nHelper function to format file operation response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper function to format list operation response\nThe error message\nThe validation error message\nCreate a new error with just a message\nCreate a new validation error\nCreate a new successful response builder\nHelper function to create a simple success response\nHelper function to create a validation response\nAdd an error code\nAdd an error code\nAdd count information to metadata\nAdd additional error details\nAdd timing information to metadata\nAdd detailed error information\nAdd a field name\nAdd file information to metadata\nAdd a human-readable message\nAdd a metadata field\nAdd multiple metadata fields\nAdd the main result data\nDefault retry policy that retries on all errors\nThe retry operation was cancelled\nAll retry attempts have been exhausted\nHTTP status code based retry policy\nBuilder pattern for retry operations\nRetry configuration with exponential backoff\nError type for retry operations\nRetry policy determines which errors should trigger a retry\nSet backoff factor\nExponential backoff factor (e.g., 2.0 for doubling)\nDefault HTTP status codes that should trigger retry\nExecute the retry operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet initial delay\nInitial delay between retries\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable or disable jitter\nOptional jitter to add randomness to delays\nSet maximum attempts\nMaximum number of retry attempts\nSet maximum delay\nMaximum delay between retries\nCreate a new HTTP retry strategy\nCreate a new retry configuration\nRetry an async operation with the given configuration\nConvenience function to retry with default configuration\nHTTP status codes that should trigger a retry\nDetermine if an error should trigger a retry\n<code>ToString::to_string</code>, but without panic on OOM.\nSet the backoff factor\nSet the initial delay\nEnable or disable jitter\nSet the maximum delay\nCreate a new retry builder with a policy\nNumber of attempts made\nThe final error\nRepresents a search match result\nConfiguration options for search operations\nResult of a search operation\nAdd a match to the result\nAdd a skipped file\nWhether the search is case-sensitive\nColumn number where the match starts (1-based)\nContext lines after the match\nContext lines before the match\nNumber of context lines to include before and after matches\nPatterns to exclude directories (glob patterns)\nFile extensions to exclude\nThe file path where the match was found\nTotal number of files searched\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if any matches were found\nFile extensions to include (if empty, search all files)\nIncrement files searched counter\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe content of the matching line\nLine number where the match occurred (1-based)\nThe matched text substring\nAll matches found\nGet matches grouped by file\nMaximum search depth for recursive searches (0 = unlimited)\nMaximum file size to search (in bytes)\nMaximum number of matches per file (0 = unlimited)\nCreate a new <code>SearchOptions</code> with default values\nCreate a new empty search result\nWhether to search recursively in subdirectories\nSearch for a pattern recursively in a directory\nSearch for a pattern in a single file\nCheck if a file should be searched based on its type and …\nFiles that couldn’t be searched (due to errors)\nTotal number of matches found\nWhether to use regex pattern matching\nEnable or disable case-sensitive searching\nSet the number of context lines\nSet excluded directory patterns\nSet excluded file extensions\nSet included file extensions\nSet maximum search depth\nSet maximum file size to search\nSet maximum matches per file\nEnable or disable recursive searching\nEnable or disable regex pattern matching\nAnalyzes expression complexity to prevent <code>DoS</code> attacks\nResult of expression complexity analysis\nConfiguration for expression complexity analysis\nAnalyze expression complexity\nABOUTME: Credential protection framework for secure …\nEnhanced expression analyzer for comprehensive <code>DoS</code> …\nABOUTME: File upload security framework for validating and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumber of function calls\nABOUTME: Information disclosure prevention framework for …\nABOUTME: Comprehensive input sanitization framework for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the expression is safe to evaluate\nLength of the expression\nMaximum nesting depth for parentheses and functions\nMaximum nesting depth\nGet the configured maximum evaluation time\nMaximum evaluation time allowed\nMaximum number of function calls allowed\nMaximum expression length in characters\nMaximum number of operations allowed\nMemory tracking utilities for <code>DoS</code> prevention\nCreate a new configuration with default values\nCreate a new analyzer with default configuration\nNumber of operations\nPath security utilities\nCreate a relaxed configuration for trusted input\nABOUTME: SSRF (Server-Side Request Forgery) protection …\nCreate a strict configuration for untrusted input\nReason if expression is unsafe\nCreate analyzer with custom configuration\nAPI key credential\nCertificate\nAudit logger for credential access\nCredential audit logger\nLog filter for removing credentials from logs\nCredential type enumeration\nError message sanitizer\nOther credential type\nPassword credential\nPrivate key\nGeneric secret\nSecure credential container\nSecure string that zeros memory on drop\nAuthentication token\nAction performed (e.g., “access”, “use”)\nAdd a custom pattern\nClear audit log\nCheck if text contains credentials\nGet credential type\nType of credential accessed\nGet detected credential types\nGet audit entries\nGet entries for a specific tool\nError message if access failed\nGet the inner value (use with caution)\nGet the value (use with caution)\nFilter credentials from text\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from a str\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if empty\nGet length\nLog a credential access\nGet metadata\nOptional metadata about the access\nCreate a new credential filter with default patterns\nCreate a new error sanitizer\nCreate a new auditor\nCreate a new <code>SecureString</code>\nCreate a new secure credential\nCreate a new audit entry\nSanitize an error message\nWhether the access was successful\nTimestamp of the credential access\nTool that accessed the credential\n<code>ToString::to_string</code>, but without panic on OOM.\nAdd error\nCreate with metadata\nAdd metadata\nEnhanced expression analyzer\nEnhanced configuration for expression analysis\nAnalyze expression with enhanced checks\nBanned function patterns\nBase configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum exponent value allowed\nMaximum memory allocation estimate (in bytes)\nMaximum recursive function depth\nMaximum number of unique variables\nCreate new enhanced analyzer\nCreate strict configuration\nCreate with custom configuration\nFile not found\nFile processing sandbox for isolating file operations\nFile size exceeds limit\nFile upload security configuration\nFile upload validator\nFile validation errors\nFile validation result\nInvalid file extension\nInvalid filename\nInvalid MIME type\nIO error\nMagic number mismatch\nMalicious content detected\nAllowed file extensions\nAllowed MIME types\nClean up sandbox directory\nCopy file to sandbox for processing\nValidation errors\nDetected file type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet safe file storage path\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the file is valid\nMaximum file size in bytes\nMaximum filename length\nDetected MIME type\nCreate a new file upload validator\nCreate a new file processing sandbox\nQuarantine directory for suspicious files\nGet the sandbox directory\nSanitize a filename for safe storage\nEnable content scanning\nFile size in bytes\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate a file upload\nEnable magic number verification\nSecurity warnings\nCreate with default configuration\nExpected magic number\nThe invalid extension\nFound magic number\nMaximum allowed size in bytes\nError message\nThe invalid MIME type\nPath to the missing file\nReason for detection\nReason for invalidity\nActual file size in bytes\nError information that might be disclosed\nInformation disclosure prevention configuration\nInformation disclosure preventer\nLogging filter to prevent information disclosure\nProduction error handler that prevents information …\nSanitized error information safe for disclosure\nAllowed error details in production\nError category (if allowed)\nCheck if a string contains sensitive information\nAdditional context\nCreate with development configuration\nCreate development configuration (more verbose)\nError code for client reference\nFilter a log message\nWhether to filter debug information\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a stable error code from message\nHandle an error safely\nWhether to include stack traces in errors\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError kind/category\nWhether to mask sensitive data\nMaximum error message length\nError message\nSanitized error message\nCreate a new information disclosure preventer\nCreate a new production error handler\nCreate a new logging filter\nCreate with default production configuration\nCreate production configuration (most secure)\nWhether the error is retriable\nSanitize an error for safe disclosure\nSanitize a log message\nWhether to sanitize file paths\nSensitive patterns to mask\nCheck if a log message should be filtered out entirely\nSource file and line\nStack trace if available\nAbsolute path not allowed\nInput contains blocked pattern\nCommand injection\nCritical severity\nError\nFormat string attack\nHigh severity\nHTML/JavaScript injection\nInformational\nInput sanitizer for preventing injection attacks\nInput exceeds maximum length\nTypes of validation issues\nInput length violation\nPath traversal attempt detected\nPath traversal\nInput sanitization configuration\nSanitization error types\nSeverity levels for validation issues\nSQL injection\nIndividual validation issue\nValidation report for input analysis\nWarning\nXXE attack\nCustom blocked patterns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the input is considered safe\nType of issue\nList of validation issues found\nMaximum input length\nHuman-readable message\nCreate a new sanitizer with default configuration\nEnable XXE prevention\nCreate relaxed configuration for semi-trusted input\nSanitize input based on configuration\nSanitize command input to prevent command injection\nEnable command injection protection\nEnable format string protection\nSanitize format strings to prevent format string attacks\nSanitize HTML/JavaScript to prevent XSS\nEnable HTML/script sanitization\nValidate and sanitize file paths\nSanitize SQL input to prevent SQL injection\nEnable SQL injection protection\nSanitize XML to prevent XXE attacks\nSanitized version of input (if sanitization succeeded)\nSeverity level\nCreate strict configuration for untrusted input\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a validation report for input\nCreate sanitizer with custom configuration\nActual length of the input\nMaximum allowed length\nThe pattern that was matched\nGuard for automatic memory deallocation\nMemory tracker for monitoring allocations\nScoped memory tracking\nAllocate memory in this scope\nTrack memory allocation\nCreate a child scope with its own limit\nGet current usage in this scope\nGet current memory usage\nTrack memory deallocation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new memory guard\nCreate a new scoped tracker\nCreate a new memory tracker\nReset memory tracking\nCheck if allocation would exceed limit\nConfiguration for path security validation\nEnhanced path security validator\nAllow access to hidden files (starting with .)\nAllow following symlinks\nCheck permission inheritance from parent directories\nEnable cross-platform path validation\nDisallowed path prefixes (e.g., /etc, /sys)\nEnable chroot jail enforcement\nEnhanced symlink detection (recursive checking)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJail directory to restrict access\nMaximum path depth allowed\nMaximum number of symlinks to follow in a path\nCreate a new configuration with default values\nCreate a new validator with default configuration\nCreate a relaxed configuration for trusted input\nCreate a strict configuration for untrusted input\nValidate a path for security concerns\nCreate validator with custom configuration\nSet the jail directory\nBlocked host\nBlocked IP address\nBlocked port\nBlocked URL scheme\nDisallowed host\nDisallowed port\nDisallowed URL scheme\nInvalid URL format\nProtocol downgrade detected\nSSRF validation errors\nSSRF protection configuration\nSSRF protection validator\nSuspicious pattern detected\nValidated URL that passed SSRF checks\nWhitelist of allowed hosts/domains\nAllowed ports (empty = all ports allowed)\nAllowed schemes (e.g., <code>[&quot;http&quot;, &quot;https&quot;]</code>)\nBlock requests to link-local addresses\nBlock requests to localhost\nBlock requests to private IP ranges\nBlock requests to reserved IP ranges\nBlacklist of blocked hosts/domains\nBlocked ports (e.g., [22, 23, 3389])\nBlocked schemes (e.g., <code>[&quot;file&quot;, &quot;gopher&quot;, &quot;dict&quot;]</code>)\nEnable DNS rebinding protection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHost component\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of redirects to follow\nCreate a new SSRF protector with default configuration\nOriginal URL string\nParsed URL\n<code>ToString::to_string</code>, but without panic on OOM.\nCheck if a redirect URL is safe\nValidate a URL for SSRF risks\nCreate SSRF protector with custom configuration\nList of allowed schemes\nList of allowed hosts\nList of allowed ports\nOriginal protocol\nThe blocked host\nThe disallowed host\nThe blocked IP address\nThe detected pattern\nThe blocked port number\nThe disallowed port number\nReason for invalidity\nReason for blocking\nThe blocked scheme\nThe disallowed scheme\nDowngraded protocol\nThe invalid URL\nSupported serialization formats\nJSON format\nTOML format\nYAML format\nConvert between serialization formats\nGet the file extension for this format\nReturns the argument unchanged.\nDetect format from file extension\nDeserialize a value from JSON string\nSafe deserialization with default values\nDeserialize a value from TOML string\nDeserialize a value from YAML string\nCalls <code>U::from(self)</code>.\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nMerge two JSON values\nMerge two TOML values\nSerialize a value to JSON string\nSerialize a value to pretty-printed JSON\nSerialize a value to JSON with custom indentation\nSerialize a value to TOML string\nSerialize a value to pretty-printed TOML\nSerialize a value to YAML string\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate JSON against a simple schema\nDefault ellipsis string for truncation\nFind common prefix of multiple strings\nCount the number of lines in a string\nRemove common leading whitespace from lines\nEscape special characters for safe display\nAdd indentation to each line of a string\nAdd custom indentation to each line of a string\nCheck if a string is a valid identifier (alphanumeric + …\nJoin strings with delimiter\nSplit a string by lines, preserving line endings\nReplace multiple consecutive whitespace characters with a …\nCreate a string of repeated characters\nReplace all occurrences of a pattern in a string\nReverse a string\nSanitize a string for safe usage\nSplit string by delimiter and return vector of parts\nExtract substring by start and end indices\nConvert a string to <code>camelCase</code>\nConvert string to lowercase\nConvert a string to <code>PascalCase</code>\nConvert a string to <code>snake_case</code>\nConvert string to uppercase\nTrim whitespace from both ends of a string\nTruncate a string to a maximum length with ellipsis\nTruncate a string to a maximum length with custom ellipsis\nWrap text to fit within a specified width\nLinux\nmacOS\nOperating system type\nSystem information structure\nUnknown or unsupported OS\nWindows\nSystem architecture\nAvailable system memory in bytes\nNumber of CPU cores\nGet the current operating system type\nFind executable in PATH\nFormat bytes into human-readable string\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a list of all environment variables\nGet the number of CPU cores\nGet an environment variable with a default value\nGet a single environment variable\nGet the user’s home directory\nGet the system hostname\nGet current system information\nGet temporary directory path\nGet the current username\nHome directory\nHostname\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if an environment variable is set and truthy\nCheck if the current OS is Linux\nCheck if the current OS is macOS\nCheck if running in a container (Docker, Podman, etc.)\nCheck if running in a virtual machine\nCheck if the current OS is Unix-like (macOS or Linux)\nCheck if the current OS is Windows\nOperating system name\nSet an environment variable if allowed\nTotal system memory in bytes\n<code>ToString::to_string</code>, but without panic on OOM.\nCurrent user\nOS version\nCommon date formats for parsing\nContains the error value\nInvalid operation\nInvalid timezone\nContains the success value\nFailed to parse date/time\nTime utilities error type\nResult type for time operations\nAdd duration to datetime\nConvert datetime to specified timezone\nGet days in month\nCalculate duration between two datetimes\nGet end of day for a datetime\nFormat datetime in specified format\nFormat duration in human readable format\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if year is leap year\nGet current time in local timezone\nGet current time in UTC\nParse a date/time string trying multiple formats\nGet start of day for a datetime\nSubtract duration from datetime\n<code>ToString::to_string</code>, but without panic on OOM.\nGet weekday name\nA future that can be cancelled\nOperation was cancelled\nInvalid timeout configuration\nOperation timed out\nBuilder pattern for timeout operations\nTimeout configuration\nTimeout error types\nExtension trait for futures to add timeout methods\nTimeout manager for coordinating multiple timeouts\nGet currently active operations\nCancel the operation\nCancel all active operations (placeholder - would need …\nDefault timeout duration\nSet the timeout duration\nExecute an operation with managed timeout\nExecute the operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the grace period\nGrace period before hard timeout\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if cancelled\nMaximum allowed timeout\nSet the operation name\nCreate a new cancellable timeout\nCreate a timeout config with a specific duration\nCreate a new timeout manager\nGet remaining time\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate and clamp a requested timeout\nSet the warning threshold\nWhether to warn on long operations\nAdd a cancellable timeout to this future\nSet the grace period\nSet the maximum timeout\nExecute an operation with timeout\nAdd a timeout to this future\nExecute an operation with timeout and configuration\nSet the warning threshold\nDuration after which the timeout occurred\nError message describing the issue\nSanitize a string for safe usage (remove control …\nValidate that a date string matches a specific format\nValidate email format\nValidate that a value is one of allowed values\nValidate file permissions (Unix-specific)\nValidate that a file size is within allowed limits\nValidate that a string is a valid identifier (alphanumeric …\nValidate that a path is a directory\nValidate that a path is a file\nValidate JSON data against a JSON schema\nValidate that a string doesn’t contain dangerous shell …\nValidate that a string is not empty\nValidate that a collection is not empty\nValidate that a path exists\nValidate that a string matches a pattern\nValidate that a number is within a range\nValidate that a regex pattern is valid\nValidate that a required field is present\nValidate resource limits (memory, file size, etc.)\nValidate that a path is safe (no path traversal, symlink …\nValidate that a string length is within allowed limits\nValidate URL format")