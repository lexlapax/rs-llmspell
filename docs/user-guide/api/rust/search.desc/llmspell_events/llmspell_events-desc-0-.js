searchState.loadedDescShard("llmspell_events", 0, "LLMSpell Events\nPrelude module for convenient imports\nEvent bus for publishing and subscribing to events\nBuilder for EventBus\nErrors that can occur when publishing events\nErrors that can occur when subscribing\nGet current buffer size\nBuild the event bus\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet persisted events by correlation ID (if persistence is …\nGet persisted events by pattern (if persistence is enabled)\nGet flow statistics\nGet storage statistics (if persistence is enabled)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new event bus with default configuration\nCreate a new builder\nPublish an event to the bus\nSubscribe to events matching a pattern\nGet a broadcast receiver for all events\nSubscribe with a custom event handler\nGet number of active subscriptions\nSet broadcast channel capacity\nCreate an event bus with custom flow control configuration\nSet flow controller configuration\nCreate an event bus with persistence using any storage …\nSet persistence configuration with storage backend\nOne event caused another\nEvents are concurrent/parallel\nConfiguration for correlation tracking\nCorrelation context for tracking related events\nStatistics for correlation tracking\nEvent correlation tracker\nLink between two correlated events\nRelationship type between correlated events\nEvent follows another in sequence\nEvents are part of the same operation\nEvents are related but not directly causal\nEvent is a response to another\nTotal correlations active\nAdd a correlation context\nAdd a manual link between events\nEnable automatic link detection\nClear all correlation data\nPrimary correlation ID for this context\nCreate a child correlation context\nContext creation timestamp\nLink creation timestamp\nMemory usage estimate in bytes\nEvents processed per second (approximate)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSource event ID\nGet all correlations\nGet correlation context\nGet events for a correlation ID\nGet links for an event\nGet metadata value\nGet correlation statistics\nCheck if context has a specific tag\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLink detection time window\nMaximum age for correlation data\nMaximum number of events to track per correlation\nMaximum number of total correlations to track\nContext metadata\nLink metadata\nCreate a new correlation tracker\nCreate a new event link\nCreate a new root correlation context\nParent correlation ID (for nested operations)\nType of relationship\nRoot correlation ID (for tracing back to origin)\nLink strength (0.0 to 1.0)\nTags for filtering and categorization\nTarget event ID\nTotal events tracked\nTotal links detected\nTrack a new event\nCreate with default configuration\nAdd metadata to the context\nAdd metadata to the link\nSet link strength\nAdd a tag to the context\nBy causality depth (shallow first)\nBy causality depth (deep first)\nChronological order (oldest first)\nReverse chronological order (newest first)\nBy correlation ID\nQuery execution results\nQuery result entry\nBy event sequence number\nSort order for query results\nTime range for filtering events\nQuery filter for timeline searches\nQuery builder for constructing complex timeline queries\nTimeline query executor\nAdd a matching entry\nBuild the query\nFilter by causality depth range\nFilter by causality depth range\nCheck if a timestamp is within this range\nFilter by correlation IDs\nFilter by correlation IDs\nEnd time (inclusive)\nMatching entries\nThe timeline entry\nFilter by event type patterns\nFilter by event types (supports wildcards)\nExecute a timeline query\nQuery execution time in milliseconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet just the timeline entries\nGet entries sorted by match score\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFilter by languages\nFilter by event languages\nCreate a time range for the last N hours\nCreate a time range for the last N minutes\nFilter by the last N seconds\nCreate a time range for the last N seconds\nInclude only leaf effect events\nInclude only leaf effect events\nLimit results\nMaximum results to return\nMatching criteria\nMatch score (0.0 to 1.0)\nMaximum event count in correlation\nResult metadata\nMinimum event count in correlation\nCreate a new query executor\nCreate a new query builder\nCreate a time range\nCreate a new query result\nQuery that was executed\nExecute a query for events from a specific component\nExecute a simple query by event type pattern\nExecute a query for events in a time range\nExecute a query for leaf effect events\nExecute a query for root cause events\nFilter by event relationships\nInclude only root cause events\nInclude only root cause events\nSet sort order\nSort order\nFilter by source components\nFilter by source components\nStart time (inclusive)\nFilter by tags\nFilter by event tags\nFilter by target components\nFilter by target components\nFilter by time range\nFilter by time range\nTotal matches before limit was applied\nCausality chain representing a sequence of cause-effect …\nReconstructed timeline with causality analysis\nTimeline builder for reconstructing event timelines\nTimeline reconstruction configuration\nTimeline entry representing an event in chronological order\nTimeline statistics\nAdd a caused event\nAdd a causing event\nAdd a concurrent event\nAdd an event to the chain\nAdd metadata to timeline\nAdd a tag\nBuild timeline from correlation tracker\nBuild timeline from events with correlation data\nNumber of causal chains\nCausality chains\nDepth in causality chain (0 = root cause)\nEvents that this event caused\nEvents that caused this event\nTime window for considering events concurrent …\nConcurrent events (happening at similar time)\nNumber of concurrent event groups\nChain depth (number of causal links)\nTimeline duration\nChain duration\nTimeline duration\nChain end time\nTimeline end time\nTimeline entries in chronological order\nThe event\nEvents in the chain in causal order\nEvents per second average\nFind the causality chain containing an event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet events by component\nGet events within a time range\nGet events matching a pattern\nGet leaf effect events\nGet the longest causality chain\nGet root cause events\nChain ID\nTimeline ID\nInclude low-confidence links\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if event is a leaf effect (no caused events)\nCheck if event is a root cause (no causing events)\nLeaf effect events\nGet the leaf event (last in chain)\nMaximum causality depth to analyze\nMaximum causality depth\nMaximum events to include in timeline\nTimeline metadata\nMinimum link strength to consider\nCreate a new timeline builder\nCreate a new timeline entry\nCreate a new causality chain\nCreate a new empty timeline\nPosition in timeline (0-based)\nRelative time from timeline start\nRoot cause events\nGet the root event (first in chain)\nChain start time\nTimeline start time\nTimeline statistics\nTags for categorization\nChain tags\nTotal events in timeline\nCreate with default configuration\nNotification when backpressure conditions change\nFlow controller for rate limiting and backpressure handling\nBuilder for FlowController\nFlow controller configuration\nFlow control statistics\nRate limit exceeded\nBackpressure has been relieved\nBackpressure has started\nFlow control warning\nGet available tokens (for debugging)\nAverage processing rate (events/sec)\nGet current buffer size\nBuild the flow controller\nBuild with notification channel\nBurst capacity\nCheck if an event can be processed (rate limiting)\nClear all buffered events\nCurrent buffer size\nEnable backpressure notifications\nEvents blocked\nEvents dropped due to overflow\nTotal events processed\nEvents rejected\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet flow statistics\nHandle buffer overflow\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if buffer is empty\nMaximum buffer size seen\nMaximum events per second\nCreate a new flow controller\nCreate a new builder\nBuffer overflow configuration\nGet next event from buffer\nRate limiting configuration\nRate limit violations\nStatistics collection interval\nCreate a flow controller with notification channel\nEnable/disable notifications\nSet overflow configuration\nSet rate limiting\nSet statistics interval\nDisable rate limiting\nAsynchronous event handler trait\nSynchronous event handler trait\nFunction-based event handler\nReturns the argument unchanged.\nHandle an event synchronously\nHandle an event asynchronously\nCalls <code>U::from(self)</code>.\nGet handler name for debugging\nGet handler name for debugging\nDashboard metrics for real-time monitoring\nReal-time event metrics with windowed analytics\nLatency percentile metrics\nEnhanced metrics collector with real-time analytics\nReal-time analytics data\nThroughput trend indicator\nAverage processing time\nCurrent events per second\nEvents per second over last 60 seconds (sliding window)\nError rate tracking\nEvents by language\nEvents by type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet real-time dashboard data\nGet current metrics snapshot\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast update timestamp\nProcessing latency percentiles\nMemory usage over time\nPeak events per second\nReal-time analytics\nRecord an error for error rate calculation\nRecord an event with enhanced analytics\nReset all metrics\nThroughput trend (increasing/decreasing)\nTotal events processed\nEvent was accepted\nBlock until space is available\nBlock until space available overflow handler\nEvent was blocked (should retry)\nDrop the newest events when buffer is full\nDrop newest events overflow handler\nDrop the oldest events when buffer is full\nDrop oldest events overflow handler\nEvent was dropped\nConfiguration for overflow handling\nTrait for handling overflow situations\nFactory for creating overflow handlers\nResult of overflow handling\nStrategy for handling buffer overflow\nReject new events with an error\nReject overflow handler\nEvent was rejected (error)\nCreate an overflow handler for the given strategy\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle an overflow situation\nHigh water mark for warnings\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if buffer is full\nCheck if buffer size is at high water mark\nCheck if buffer size is at low water mark\nCheck if the operation was successful\nLow water mark for backpressure relief\nMaximum buffer size before overflow\nCreate a new overflow configuration\nNotify waiting producers that space is available\nCheck if the operation should be retried\nThe overflow strategy to use\nGet the strategy name\nEvent pattern for matching event types\nPattern matcher for efficient event routing\nGet the pattern string\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if an event type matches a pattern\nCheck if this pattern matches an event type\nCreate a new event pattern\nEvent serializer for JSON format\nReturns the argument unchanged.\nDeserialize event from JSON\nCalls <code>U::from(self)</code>.\nSerialize event to JSON\nPretty-print event to JSON\nEvent persistence manager using storage adapter\nEvent storage interface (domain-specific)\nEvent storage adapter that uses any StorageBackend\nEvent persistence configuration\nStorage statistics\nAutomatic cleanup interval\nDelete events older than a certain time\nEnable event persistence\nEvent TTL for automatic cleanup\nEvents by type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve events by correlation ID\nRetrieve events by pattern\nRetrieve events in a time range\nGet storage statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum events to store before cleanup\nStore an event if it matches persistence criteria\nCreate new adapter with storage backend\nCreate a new persistence manager\nNewest event timestamp\nOldest event timestamp\nPatterns to persist (None means persist all)\nStart the persistence manager with automatic cleanup\nStop the persistence manager\nGet storage reference\nStorage size in bytes\nStore an event\nTotal number of stored events\nBatched event stream for bulk processing\nHigh-throughput event stream processor\nEvent stream processing errors\nFiltered event stream\nHigh-throughput stream processor with advanced features\nStream utilities for high-frequency processing\nThroughput measurement results\nCreate a batched stream that collects events into batches\nCreate a filtered stream that only processes certain event …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new event stream from an EventBus\nCreate a high-frequency test stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMeasure stream throughput\nCreate a new high-throughput processor\nProcess events from a stream with parallel workers\nEvent metadata for tracking and debugging\nJavaScript events\nLanguage identifier for event source\nLua script events\nPython events\nRust native events\nUniversal event format for cross-language compatibility\nBuilder for UniversalEvent\nUnknown or external source\nGet event age in seconds\nGet the language name as a string\nBuild the event\nSet correlation ID\nCorrelation ID for tracing related events\nSet event data\nGet a reference to the event data\nEvent payload data\nGet mutable reference to event data\nEvent type/name (e.g., “agent.state_changed”)\nExtract typed data from the event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from JSON\nUnique event ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if event has expired\nSet source language\nSource language\nCheck if event matches a pattern\nEvent metadata\nCreate a new event builder\nCreate a new universal event\nSet priority\nPriority level (lower is higher priority)\nSchema version for compatibility\nSequence number for ordering\nSet source component\nSource component ID\nAdd a tag\nCustom tags for filtering\nSet target component\nTarget component ID (for directed events)\nEvent timestamp\nConvert to JSON for cross-language serialization\nSet TTL\nTime-to-live in seconds\nSet the correlation ID\nCreate an event with custom metadata\nSet priority\nSet the source component\nAdd a tag\nSet the target component\nSet TTL in seconds")