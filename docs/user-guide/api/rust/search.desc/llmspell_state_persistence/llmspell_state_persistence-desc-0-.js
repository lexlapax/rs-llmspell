searchState.loadedDescShard("llmspell_state_persistence", 0, "State Persistence Module\nAgent-specific scope\nRepresents a JSON array.\nRepresents a JSON boolean.\nConcurrent access conflicts\nConfiguration errors\nCustom component scope\nContains the error value\nGlobal application-wide scope\nHook-specific scope\nGeneric internal errors\nInvalid state scope or key format\nIO errors from storage operations\nMigration errors\nState not found for the given scope and key\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nContains the success value\nPermission/security errors\nResource limit errors\nSerialization/deserialization errors\nSession-specific scope\nErrors that can occur during state operations\nCore state management trait for all state operations\nEnhanced state persistence trait for components with …\nResult type for state operations\nHierarchical scope for state data organization\nStorage backend errors\nRepresents a JSON string.\nTool-specific scope\nUser-specific scope\nRepresents any valid JSON value.\nWorkflow-specific scope\nCreate an already exists error (maps to invalid format …\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nCreate a background task error (maps to internal error)\nCreate a backup error (maps to storage error)\nCheck if this scope can access data from another scope\nClear all values in a scope\nCompare and swap operation for atomic updates\nCreate a compression error (maps to storage error)\nCreate a concurrency error\nCreate a configuration error\nCopy all values from one scope to another\nDelete a value from the specified scope with the given key …\nDelete multiple keys within a scope\nCheck if a key exists in the specified scope\nDisplay a JSON value as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nReturns the argument unchanged.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert boolean to <code>Value::Bool</code>.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert a slice to <code>Value::Array</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert string slice to <code>Value::String</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert map (with string keys) to <code>Value::Object</code>.\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nRetrieve a value from the specified scope with the given …\nIndex into a JSON array or map. A string index can be used …\nGet all key-value pairs in a scope\nRetrieve multiple values by keys within a scope\nRetrieve a value as JSON Value for manual deserialization\nMutably index into a JSON array or map. A string index can …\nCreate a hook error (maps to internal error)\nGet the scope identifier if it has one\nIncrement a numeric value atomically\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCreate an internal error\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an invalid format error\nCreate an IO error\nCheck if this scope is agent-specific\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nCheck if this scope is custom\nReturns true if the <code>Value</code> is a number that can be …\nCheck if this scope is global\nCheck if this scope is hook-specific\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nCheck if this error indicates a missing/not found state\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nCheck if this error indicates a permanent failure\nCheck if this error is retryable\nCheck if this scope is session-specific\nReturns true if the <code>Value</code> is a String. Returns false …\nCheck if this scope is tool-specific\nReturns true if the <code>Value</code> is an integer between zero and …\nCheck if this scope is user-specific\nCheck if this scope is workflow-specific\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nList all keys within a scope\nCreate a lock error (maps to concurrency error)\nCreate a migration error\nMove all values from one scope to another (copy then clear …\nCreate a not found error\nGet the parent scope if this scope has one\nParse a storage key back into scope and key components\nCreate a permission denied error\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nGet the prefix for this scope (used by <code>KeyManager</code>)\nPrelude module for common imports\nCreate a resource limit exceeded error\nGet the scope type as a string\nCreate a serialization error\nStore a value in the specified scope with the given key\nStore multiple key-value pairs atomically within a scope\nSet a value only if the key doesn’t exist\nStore a serialized value directly as JSON Value\nStore data with expiration (if supported by backend)\nReorders the entries of all <code>Value::Object</code> nested within …\nCreate a storage error\nCreate a hierarchical key for storage\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nCreate a timeout error (maps to internal error)\nCreate a validation error (maps to invalid format error)\nAgent metadata for persistence\nCore agent state data\nConversation message structure\nAgent execution state\nAgent state operations trait\nPersistent agent state structure with full serialization …\nTool usage statistics\nAdd a conversation message\nGet the agent’s ID\nApply a persistent state to the agent\nDelete the agent’s state\nFast deserialization for benchmarks\nFast serialization for benchmarks (no protection)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current persistent state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad the agent’s state\nCreate a new persistent agent state\nUpdate tool usage statistics\nDeserialize from storage bytes (no special handling needed …\nSerialize with circular reference check and sensitive data …\nSave the agent’s state\nUpdate the last modified timestamp\nWrapper for state-specific storage operations\nClear all data in the namespace\nCreates appropriate storage backend based on configuration\nDelete a value\nCheck if a key exists\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList all keys in the namespace\nLoad a value with state-specific key formatting\nFast load method using UnifiedSerializer\nStore a value with state-specific key formatting\nFast store method using UnifiedSerializer for benchmark …\nBackup identifier type\nResult type for backup operations\nBackup validation result\nContains the error value\nContains the success value\nBackup restore options\nWhether to create a backup of current state before restore\nChecksum verification result\nWhether to perform a dry run without actual restore\nAny validation errors\nReturns the argument unchanged.\nReturns the argument unchanged.\nData integrity verification result\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the backup is valid\nTarget state version for restore\nValidation timestamp\nWhether to verify checksums before restore\nAny validation warnings\nAtomic backup operation handle\nBuilder for atomic backup operations\nBackup operation status\nOperation status\nIndividual snapshot entry\nSnapshot metadata\nSnapshot data structure\nBuild the atomic backup instance\nCreate a builder for more complex backup configurations\nCapture atomic snapshot of current state\nExclude keys matching patterns\nExclude specific scopes from backup\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInclude keys matching patterns\nInclude specific scopes in backup\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new atomic backup operation\nRestore state from snapshot data\nRestore state from snapshot data with progress tracking\nSet parent backup for incremental backup\nBackup cleanup engine\nCleanup operation tracker\nResult of cleanup operation\nAutomated cleanup scheduler\nExecute cleanup based on retention decisions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet deletion history\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMark cleanup as completed\nCreate a new cleanup engine\nRollback a cleanup operation (restore from trash if …\nCheck if cleanup should run\nBackup compression handler\nCompression analysis results\nCompression level\nAnalyze compression efficiency for data\nGet as u32\nBest compression (level 9)\nCompress data\nDecompress data\nDefault compression (level 3)\nFast compression (level 1)\nFind optimal compression settings for data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new compression handler\nCreate new compression level (1-9)\nBackup completed successfully\nIndividual backup deleted during cleanup\nBackup-related events\nBuilder for creating backup events\nBackup failed\nBackup progress update\nBackup operation started\nCleanup operation completed\nCleanup operation started\nRestore completed successfully\nRestore failed\nRestore progress update\nRestore operation started\nRollback completed\nRollback started\nBackup validation completed\nBackup validation started\nBuild backup deleted event\nBuild backup progress event\nBuild backup started event\nBuild cleanup completed event\nBuild cleanup started event\nGet correlation ID for the event\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new event builder\nBuild restore progress event\nBuild restore started event\nConvert to UniversalEvent for EventBus\nCreate with specific correlation ID\nBackup manager for coordinating backup operations\nBackup metadata stored with each backup\nBackup schedule configuration\nBackup statistics\nBackup status information\nBackup type\nCompression information\nEncryption information\nIncremental backup tracker\nApply retention policies to manage backup storage\nChain of backup IDs from oldest to newest\nBackup type (full or incremental)\nTotal size of the chain\nChecksums for validation\nManually trigger retention policy application\nCompression info if compressed\nCreate a new backup\nBackup creation time\nBackup creation timestamp\nTime of day for daily backups (if applicable)\nEnable scheduled backups\nEncryption info if encrypted\nNumber of state entries backed up\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBackup identifier\nBackup identifier\nInterval between backups\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is an incremental backup\nLast full backup in the chain\nList available backups\nCustom metadata\nCreate a new backup manager\nParent backup ID for incremental backups\nParent backup for incremental backups\nRestore from a backup\nState schema version\nBackup size in bytes\nState version at backup time\nStatistics about the backup\nValidate a backup\nBackup validation status\nDays of week for weekly backups (if applicable)\nRecovery options with advanced features\nRecovery orchestrator for managing complex recovery …\nRecovery progress event\nRecovery operation state\nRecovery operation status\nBase restore options\nWhether to create progress events\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new recovery orchestrator\nWhether to keep existing data not in backup\nPerform a coordinated recovery operation\nRollback to previous state\nSpecific scopes to restore (None = all scopes)\nMaximum time allowed for recovery\nWhether to validate each restored entry\nComposite policy that combines multiple policies\nCount-based retention policy\nNever delete (e.g., most recent full backup)\nImportance-based retention policy\nKeep if possible (e.g., checkpoint backups)\nDelete first when space needed\nContext for retention policy evaluation\nDecision made by retention policy\nTrait for backup retention policies\nPriority level for backup retention\nReport of retention policy execution\nNormal retention rules apply\nTime-based retention policy\nEvaluate whether a backup should be retained\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet policy name for logging\nTrait for types that can be checked for circular references\nCircular reference detector for JSON values\nCheck if a JSON value contains circular references\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafe serialization wrapper that checks for circular …\nSafe JSON serialization that checks for circular references\nBackup configuration\nCompression type for backups\nBuilder for <code>PersistenceConfig</code>\nSet the storage backend type\nSet the backup configuration\nBase directory for storing backups\nSet the backup retention duration\nBuild the <code>PersistenceConfig</code>\nCreate a new builder for <code>PersistenceConfig</code>\nEnable or disable compression\nEnable compression for backups\nCompression level (1-9, higher = better compression)\nCompression type to use\nEnable or disable persistence\nSet the encryption configuration\nEnable encryption for sensitive data\nGet file extension for compression type\nSet the flush interval\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterval for full backups when using incremental\nEnable incremental backups\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum age of backups to retain\nMaximum number of backups to retain\nCreate a new builder with default configuration\nSet the performance configuration\nBuilt-in state audit hook\nBuilt-in state cache invalidation hook\nState change event for hooks\nBuilt-in state validation hook\nHelper to aggregate hook results\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess control for state operations\nPermission system for state access control\nCheck if a scoped key belongs to a specific scope\nCreate a scoped key with namespace prefix\nExtract the original key from a scoped key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a collision-resistant key for internal use\nGrant permission to an agent for a scope\nCheck if an agent has permission for an operation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRevoke all permissions for an agent in a scope\nSanitize a key for safe storage\nValidate a state key\nHook replay manager for state persistence\nSerializable state value with metadata\nSerialized hook execution for persistence\nEnhanced StateManager with persistent backend\nGet the artifact correlation manager\nClear all state in a scope\nClear all values in a scope (returns count of deleted …\nConfigure hook batching for improved performance\nCopy state from one scope to another\nCorrelate an artifact with the current state operation\nGet the correlation tracker for external use\nCreate a correlation context for state operations\nDelete state value\nDelete agent state from persistent storage with concurrent …\nDelete scoped state value with isolation check\nDisable async hook processing (process hooks synchronously)\nEnable async hook processing for better performance\nGet event bus for external use\nCheck if a key exists in a scope\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet state value\nGet agent state metadata without loading full state\nGet all values in a scope (for backup/migration)\nGet all storage keys for backup/discovery purposes This is …\nGet artifact lineage (parent chain)\nGet artifacts associated with a component’s state\nGet scoped state value with isolation check\nGet state with explicit state class for performance …\nGet hook executor for external use\nGet hook processor statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if async hooks are enabled\nList all saved agent states\nList all keys in a scope\nList keys in a specific scope\nLoad agent state from persistent storage with concurrent …\nLoad agent state using lock-free fast path\nMove state from one scope to another\nCreate a new state manager with default in-memory backend\nCreate a benchmark-optimized state manager for performance …\nRegister a hook to run after state changes\nRegister a hook to run before state changes\nGet replay manager for hook history\nSave agent state to persistent storage with concurrent …\nSynchronous benchmark API for measuring true overhead\nPublic method to save agent state with custom async hooks\nSet state value (backward compatible method)\nSet scoped state value with isolation check\nPublic method to set state with async hooks and custom …\nSet state with explicit state class for performance …\nSet state with hooks and persistence (uses async hooks if …\nStart async hook processing (alias for enable_async_hooks …\nStop async hook processing (alias for disable_async_hooks …\nTrack that a state operation created an artifact\nWait for all queued hooks to be processed\nCreate a new state manager with specified backend\nMigration configuration\nMigration context for tracking progress\nMigration execution result\nMigration execution status\nValidation level for migrations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMigration engine that integrates with existing …\nMigration executor trait for different execution strategies\nCancel an active migration\nExecute a migration with the given strategy\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet active migrations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecute migration from one schema version to another\nCreate new migration engine with existing infrastructure\nSchema registry from Task 5.4.1\nMigration backup event\nBackup types for migration\nMigration completed successfully\nMigration-specific events that integrate with existing …\nMigration event builder for convenient event creation\nMigration failed with details\nMigration started with version information\nMigration rollback completed\nMigration rollback failed\nMigration rollback started\nMigration step completed\nMigration step failed\nMigration step started\nMigration validation event\nValidation phases during migration\nValidation results\nCreate event metadata for correlation tracking\nGet event type as string for correlation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is a completion event (success or failure)\nCheck if this is an error event\nGet the migration ID from any migration event\nMigration complexity assessment\nEnhanced migration plan that integrates with StateManager\nMigration planner that integrates with StateManager\nEnhanced migration step with more detail than legacy …\nCreate a migration plan between versions\nGet migration complexity estimate\nFind all possible migration paths from a version\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if migration is possible between versions\nRegister a schema for migration planning\nGet schema registry\nValidate a migration plan\nType conversion\nDirect field copy\nCustom transformation\nData transformer that applies transformations to state data\nDefault value assignment\nField transformation specification\nField merging (many to one)\nField removal\nField splitting (one to many)\nState transformation specification\nResult of a transformation operation\nValidation rule for transformed data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the source fields for this transformation\nGet the target fields for this transformation\nTransform a single state item\nCross-field validation\nCustom validation logic\nString length validation\nMigration validator that integrates with existing …\nPattern matching validation\nValue range validation\nForeign key integrity\nRequired field presence\nSchema conformance validation\nData type validation\nData uniqueness constraints\nValidation result for a single rule\nComplete validation result\nValidation rule definition\nValidation rules configuration\nValidation severity level\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate data after migration\nValidate data before migration\nAsync hook processor that runs hooks in background\nHook batcher for efficient batch processing\nHook completion event for monitoring\nHook event for async processing\nType of hook event\nHook processing statistics\nSnapshot of hook processor statistics\nAdd event to batch\nCalculate average processing time in microseconds\nForce flush current batch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new async hook processor\nGet current queue depth\nQueue hook event for async processing\nQueue multiple hook events\nSet completion notification channel\nStart background processing\nGet processing statistics\nStop background processing\nCalculate success rate\nWait for queue to drain (for testing)\nStatistics for ephemeral cache\nConfiguration for fast-path operations\nFast-path state manager for performance-critical operations\nClear ephemeral cache\nCompression threshold in bytes\nFast deserialization without any validation\nEnable compression for large values\nEnable in-memory cache for ephemeral data\nMaximum cache size for ephemeral data\nGet cache statistics\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve ephemeral data from memory cache\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompress data if it exceeds threshold\nDecompress data if needed\nFast serialization without any validation\nStore ephemeral data in memory cache\nEnable MessagePack for better performance than JSON\nStatistics for agent store memory usage\nFast agent state operations wrapper\nLock-free agent state store using SkipMap for concurrent …\nVersioned agent state for optimistic concurrency control\nGet total number of agents\nClear all agent states\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet agent state without locks\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all agent IDs\nLoad agent state without heavy deserialization\nGet memory statistics\nRemove agent state\nUltra-fast save for benchmarks - minimal overhead\nSave agent state without heavy serialization\nGet internal store for advanced operations\nUpdate agent state using lock-free compare-and-swap\nUpdate specific field in agent state\nIn-memory only, no persistence, zero overhead\nUntrusted external data, requires full validation Target: &lt;…\nContains PII/secrets, needs full validation and redaction …\nNormal user data with basic validation Target: &lt;3% overhead\nClassification of state data to determine appropriate …\nConfiguration for state class behavior\nInternal system state, skip all validation checks Target: &lt;…\nWhether to enable automatic class inference from keys\nCreate a benchmark-optimized configuration\nForce all state to use benchmark mode (Trusted class)\nDetermine the appropriate state class for a given key\nDefault class for unspecified state\nReturns the argument unchanged.\nReturns the argument unchanged.\nInfer state class from state key patterns\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey patterns mapped to specific classes\nCreate a production-ready configuration\nReturns true if this class requires circular reference …\nReturns true if this class requires sensitive data …\nReturns true if hooks should be executed for this class\nReturns true if this class should be persisted to storage\nReturns the maximum expected overhead percentage for this …\nStreaming serializer for large data\nUnified serializer that performs all operations in a …\nBuilder for UnifiedSerializer with fluent API\nDeserialize value\nCreate a fast serializer for trusted data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new unified serializer\nSerialize value with all protections in a single pass\nAgent-specific scope\nConcurrent access conflicts\nConfiguration errors\nCustom component scope\nContains the error value\nGlobal application-wide scope\nHook-specific scope\nGeneric internal errors\nInvalid state scope or key format\nIO errors from storage operations\nMigration errors\nState not found for the given scope and key\nContains the success value\nPermission/security errors\nResource limit errors\nSerialization/deserialization errors\nSession-specific scope\nErrors that can occur during state operations\nCore state management trait for all state operations\nEnhanced state persistence trait for components with …\nResult type for state operations\nHierarchical scope for state data organization\nStorage backend errors\nTool-specific scope\nUser-specific scope\nWorkflow-specific scope\nClear all values in a scope\nCompare and swap operation for atomic updates\nCopy all values from one scope to another\nDelete a value from the specified scope with the given key …\nDelete multiple keys within a scope\nCheck if a key exists in the specified scope\nRetrieve a value from the specified scope with the given …\nGet all key-value pairs in a scope\nRetrieve multiple values by keys within a scope\nRetrieve a value as JSON Value for manual deserialization\nIncrement a numeric value atomically\nList all keys within a scope\nMove all values from one scope to another (copy then clear …\nStore a value in the specified scope with the given key\nStore multiple key-value pairs atomically within a scope\nSet a value only if the key doesn’t exist\nStore a serialized value directly as JSON Value\nStore data with expiration (if supported by backend)\nEnhanced state schema with semantic versioning\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSchema compatibility checker\nCompatibility matrix for managing multiple schema versions\nResult of compatibility analysis between two schemas\nStatistics about compatibility matrix\nType of change made to a field\nRisk level of schema migration\nAdd a compatibility result to the matrix\nCheck compatibility between two schemas\nFind upgrade path between versions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all compatible target versions for a source version\nGet compatibility result between two versions\nGet statistics about the compatibility matrix\nCheck if upgrade path exists between versions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuick compatibility check (boolean result only)\nCheck if upgrade is safe (no data loss)\nData transformation step within a migration\nField mapping for data transformation\nA complete migration plan from one schema version to …\nMigration planner for creating migration plans between …\nStatistics about migration planning\nCreate a migration plan between two schema versions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet migration statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegister a schema for migration planning\nValidate a migration plan\nRegistry statistics\nRegistry for managing state schemas across versions\nFind schemas compatible with a given version\nFind schemas that require migration from a given version\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current (latest) schema\nGet the latest version in a major version line\nGet schema by version\nGet schema by name\nGet schema metadata\nGet statistics about the registry\nCheck if a version exists in the registry\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all named schemas\nList all registered schema versions\nRegister a named schema for easier lookup\nRegister a new schema version\nRemove a schema version (use with caution)\nSet the current active schema version\nSchema version wrapper with additional metadata\nSemantic version implementation following semver.org …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait for types that can have sensitive data redacted\nConfiguration for sensitive data protection\nSensitive data protector\nCheck if this value contains sensitive patterns\nAdditional field names to redact\nAdditional patterns to detect\nCreate a disabled configuration (no redaction)\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to hash redacted values for tracking\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this field name should be redacted\nWhether to redact sensitive data\nRedact sensitive data from a JSON value\nGet the redaction map for recovery purposes\nRedaction placeholder\nRestore redacted values (for internal use only)\nSafe serialization with sensitive data redaction")