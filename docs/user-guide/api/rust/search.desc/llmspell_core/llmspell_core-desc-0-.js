searchState.loadedDescShard("llmspell_core", 0, "ABOUTME: Core traits, types, and infrastructure for …\nABOUTME: Error types and handling for rs-llmspell ABOUTME: …\nABOUTME: Event types and structures for llmspell-core …\nABOUTME: Enhanced <code>ExecutionContext</code> with hierarchical …\nThese macros provide structured logging for component …\nABOUTME: Structured logging infrastructure for rs-llmspell …\nABOUTME: State management types and structures for …\nABOUTME: Core types and foundational data structures …\nConfiguration-related errors\nCritical - severe error that may require intervention\nContains the error value\nError - normal error that can be recovered\nError category for classification.\nError severity levels.\nExternal service errors\nFatal - unrecoverable error\nInformational - can be ignored\nInternal system errors\nComprehensive error enum for all <code>LLMSpell</code> operations.\nBusiness logic errors\nNetwork or provider errors\nContains the success value\nResource errors (memory, disk, etc.)\nConvenience Result type alias\nSecurity and permissions\nWarning - should be addressed but not critical\nGet the error category\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the error is retryable\nGet suggested retry delay in milliseconds\nGet the error severity\nChain with another error as the source\nABOUTME: Event types and structures for artifact lifecycle …\nTypes of artifact access\nArtifact was accessed/read\nEvent emitted when an artifact is accessed\nEvent emitted when an artifact is created\nEvent emitted when an artifact is deleted\nEvent emitted when an artifact is derived from another\nBase event type for all artifact-related events\nBuilder for artifact events\nTypes of artifact events\nEvent emitted when artifact metadata is updated\nEvent emitted when an artifact is modified\nEvent emitted when an artifact is validated\nEvent emitted when artifact validation fails\nEvent emitted when an artifact is versioned\nCombined with other artifacts\nContent was changed\nContent validation\nArtifact was created\nCustom validation\nDatabase reference\nArtifact was deleted\nTypes of artifact derivation\nArtifact was derived from another\nArtifact was exported\nExternal storage (S3, etc.)\nExtracted from parent\nFile system path\nGenerated based on parent\nIntegrity check\nLocation changed\nMemory storage ID\nMetadata was updated\nArtifact metadata was queried\nArtifact metadata was updated\nTypes of modifications\nArtifact was modified\nPermissions changed\nArtifact was read\nSchema validation\nSecurity validation\nStorage location information\nArtifact was streamed\nTags were modified\nTransformed from parent\nArtifact was validated\nArtifact failed validation\nValidation failure information\nValidation results\nTypes of validation\nArtifact was versioned\nType of access\nActual value/format\nThe artifact that was created\nID of the modified artifact\nID of the deleted artifact\nID of the accessed artifact\nOriginal artifact ID\nArtifact ID\nArtifact ID\nArtifact ID\nMetadata of the deleted artifact (for recovery)\nBackup location if soft-deleted\nChanges in this version\nInitial content hash (for integrity)\nAdditional context\nBuild a created event\nAdditional validation data\nBuild a deleted event\nType of derivation\nThe new derived artifact\nGet event name for routing/filtering\nType of artifact event\nExpected value/format\nFailure reasons\nWhat failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvent metadata (ID, timestamp, etc.)\nWhat was modified\nBuild a modified event\nCreate a new event builder\nCreate a new artifact event\nNew content hash\nNew version artifact\nParent artifact ID\nWhether deletion is permanent\nPrevious content hash\nPrevious values (for rollback)\nPurpose of access\nWhy it failed\nRelationship to parent\nValidation results\nValidation score (0-100)\nSize change in bytes\nComponent that triggered the event\nLocation where artifact is stored (if applicable)\nUpdated fields and their new values\nWhether validation passed\nValidation type\nValidation type\nVersion number or tag\nWarnings that don’t block validity\nAdd context\nAdd context to the event\nAgent-specific scope\nHierarchical scope for context data\nCopy specific fields only\nEnhanced execution context with hierarchical support\nBuilder for <code>ExecutionContext</code>\nGlobal application-wide scope\nInherit all data from parent context\nContext inheritance policy\nIsolate from parent, start fresh\nSecurity context placeholder\nSession-specific scope\nShare read-only access to parent\nShared memory region for inter-agent communication\nUser-specific scope\nWorkflow execution scope\nBuild the context\nClear all data in a scope\nSet conversation ID\nCurrent conversation ID\nCreate a child context with inheritance\nAdd data\nLocal context data\nGet context depth in hierarchy\nSet event emitter provider\nEvent emitter for component lifecycle events …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet value from a memory region\nGet data from context hierarchy\nGet data from shared memory at specific scope\nCheck if context has a specific capability\nUnique context ID\nSet inheritance policy\nInheritance policy\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet all keys in a scope\nSecurity level\nMerge data from another context\nEvent metadata for correlation\nCreate a new builder\nCreate new shared memory\nCreate a new root execution context\nSet parent context ID\nParent context ID for hierarchical reference (avoids …\nUser permissions\nRemove value from a memory region\nGet the root context\nSet scope\nContext scope\nSet security context\nSecurity context (placeholder for Phase 3.2 integration)\nSet session ID\nSession ID for tracking\nSet value in a memory region\nSet data in context\nSet data in shared memory\nShared memory for inter-agent communication (transient …\nSet state access provider\nState access for persistent data (first-class citizen for …\nSet user ID\nUser ID if applicable\nCreate with conversation ID\nAdd a data field (builder pattern)\nSet the inheritance policy\nSet the scope\nSet the state access provider\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nDescribes the level of verbosity of a span or event.\nLogging configuration for the <code>LLMSpell</code> system.\nThe “trace” level.\nThe “warn” level.\nReturns the string representation of the <code>Level</code>.\nConstructs an event at the debug level.\nDefault log level\nCreate a development configuration with human-readable …\nConstructs an event at the error level.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an event at the info level.\nInitialize logging from environment variables\nInitialize logging with the given configuration.\nAttach a span to a <code>std::future::Future</code>.\nInstruments a function to create and enter a <code>tracing</code> span …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to use JSON formatting\nCreate a production configuration with JSON output\nSpans represent periods of time in which a program was …\nConstructs a new span.\nConstructs an event at the trace level.\nUpdate the global log filter at runtime\nConstructs an event at the warn level.\nWhether to include file and line numbers\nWhether to include span events\nWhether to include thread IDs\nWhether to include thread names\nWhether to include timestamps\nAttaches spans to a <code>std::future::Future</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> <code>Span</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> …\nExtension trait allowing futures to be instrumented with a …\nBorrows the <code>Dispatch</code> that is entered when this type is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruments this type with the current <code>Span</code>, returning an …\nBorrows the wrapped type.\nBorrows the wrapped type.\nMutably borrows the wrapped type.\nMutably borrows the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nInstruments this type with the provided <code>Span</code>, returning an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nBorrows the <code>Span</code> that this type is instrumented by.\nMutably borrows the <code>Span</code> that this type is instrumented by.\nAttaches the current default <code>Subscriber</code> to this type, …\nAttaches the provided <code>Subscriber</code> to this type, returning a …\nTrait implemented by types which have a span <code>Id</code>.\nAttributes provided to a <code>Subscriber</code> describing a new span …\nA guard representing a span which has been entered and is …\nAn owned version of <code>Entered</code>, a guard representing a span …\nIdentifies a span within the context of a subscriber.\nA set of fields recorded by a span.\nA handle representing a span, with the capability to enter …\nReturns the <code>Id</code> of the span that <code>self</code> corresponds to, or …\nConstructs a new <code>Span</code> as child of the given parent span, …\nReturns <code>Attributes</code> describing a new child span of the …\nReturns <code>true</code> if this set of <code>Attributes</code> contains a value …\nReturns <code>true</code> if this <code>Record</code> contains a value for the given …\nReturns a handle to the span considered by the <code>Subscriber</code> …\nEnters this span, returning a guard that will exit the …\nEnters this span, consuming it and returning a guard that …\nExits this span, returning the underlying <code>Span</code>.\nReturns a <code>Field</code> for the field with the given <code>name</code>, if one …\nReturns the set of all fields defined by this span’s …\nIndicates that the span with the given ID has an indirect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new span ID from the given <code>NonZeroU64</code>.\nConstructs a new span ID from the given <code>u64</code>.\nReturns true if this <code>Span</code> has a field for the given <code>Field</code> …\nReturns this span’s <code>Id</code>, if it is enabled.\nReturns this span’s <code>Id</code>, if it is enabled.\nExecutes the given function in the context of this span.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the span’s ID as a <code>NonZeroU64</code>.\nReturns the span’s ID as a <code>u64</code>.\nReturns true if the new span’s parent should be …\nReturns <code>true</code> if this span was disabled by the subscriber …\nReturns true if this set of <code>Attributes</code> contains <em>no</em> values.\nReturns true if this <code>Record</code> contains <em>no</em> values.\nReturns <code>true</code> if this span was constructed by <code>Span::none</code> …\nReturns true if the new span should be a root.\nReturns the number of fields that would be visited from …\nReturns this span’s <code>Metadata</code>, if it is enabled.\nReturns a reference to the new span’s metadata.\nConstructs a new <code>Span</code> with the given metadata and set of …\nReturns <code>Attributes</code> describing a new child span of the …\nConstructs a new <code>Record</code> from a <code>ValueSet</code>.\nConstructs a new disabled span with the given <code>Metadata</code>.\nConstructs a new <code>Span</code> as the root of its own trace tree, …\nReturns <code>Attributes</code> describing a new span at the root of …\nConstructs a new span that is <em>completely disabled</em>.\nReturns this span, if it was enabled by the current …\nReturns the new span’s explicitly-specified parent, if …\nRecords that the field described by <code>field</code> has the value …\nRecords all the fields in this set of <code>Attributes</code> with the …\nRecords all the fields in this <code>Record</code> with the provided …\nRecords all the fields in the provided <code>ValueSet</code>.\nReturns a reference to a <code>ValueSet</code> containing any values …\nInvokes a function with a reference to this span’s ID …\nABOUTME: Artifact state correlation for tracking …\nCorrelation between state operations and artifacts\nManages artifact correlations\nUnique identifier for artifacts\nMetadata about an artifact\nRelationship types between artifacts\nArtifact was created\nCustom operation\nCustom relationship\nArtifact was deleted\nArtifact was derived from another\nThis artifact was derived from parent\nArtifact was modified\nThis artifact is part of parent\nArtifact was referenced in state\nThis artifact references parent\nTypes of state operations that can affect artifacts\nThis artifact is a version of parent\nAdd a new correlation\nAdd custom metadata\nAdd a tag to the artifact\nID of the artifact\nType of artifact (e.g., “code”, “document”, “…\nClear all correlations\nComponent that owns the state\nCreate and add a correlation for artifact creation\nCorrelation ID linking state and artifact\nCreation timestamp\nAgent/component that created this artifact\nOptional description\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new random artifact ID\nGet artifacts created by a component\nGet correlations for an artifact\nGet correlations for a component\nFind artifact lineage (parent chain)\nUnique identifier for the artifact\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdditional metadata\nMIME type (if applicable)\nLast modification timestamp\nHuman-readable name\nCreate a new artifact ID\nCreate new artifact metadata\nCreate a new correlation manager\nState operation that created/modified the artifact\nOptional parent artifact (for derived artifacts)\nRelationship type to parent\nSize in bytes (if applicable)\nTags for categorization\nTimestamp of the correlation\nABOUTME: Agent trait for LLM-powered components ABOUTME: …\nABOUTME: <code>BaseAgent</code> trait - foundation for all components …\nABOUTME: ComponentLookup trait for registry access without …\nABOUTME: EventEmitter trait for universal event emission …\nABOUTME: StateAccess trait for universal state management …\nABOUTME: Tool trait for functional components with schema …\nABOUTME: <code>ToolCapable</code> trait for components that can …\nABOUTME: Workflow trait for orchestration components …\nAgent trait for LLM-powered components.\nConfiguration for LLM-powered agents.\nConversation message in an agent’s history.\nRole in a conversation.\nAdd message to conversation\nCreate an assistant message\nClear conversation history\nGet agent configuration\nGet the current conversation length\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet conversation history\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of messages to retain in conversation …\nMaximum tokens to generate\nCreate a new conversation message\nCreate a system message\nSystem prompt for the agent\nTemperature setting for LLM generation\nTrim conversation to configured max length\nCreate a user message\nBase trait for all components in the LLMSpell system.\nExecute the component with given input.\nImplementation-specific execution logic.\nHandle execution errors.\nGet component metadata.\nExecute the component with streaming output.\nGet the media types supported by this component.\nCheck if this component supports multimodal content.\nCheck if this component supports streaming execution.\nValidate input before execution.\nTrait for looking up components (agents, tools, workflows) …\nGet an agent by name\nGet any component as a BaseAgent by type and name\nGet a tool by name\nGet a workflow by name\nList all available agents\nList all available tools\nList all available workflows\nEvent configuration for filtering and processing\nFull event data structure for structured events\nUniversal event emission trait for all components\nComponent that emitted the event\nGet event configuration\nCorrelation ID for tracing related events\nEvent payload data\nEmit a simple event with type and data\nWhether to emit debug-level events\nWhether to emit state change events\nEmit with full event structure\nWhether to emit timing/performance events\nWhether events are enabled globally\nEvent type/name (e.g., “agent.completed”)\nEvent types to exclude (glob patterns)\nReturns the argument unchanged.\nReturns the argument unchanged.\nEvent types to include (glob patterns)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if events are enabled\nMaximum events per second (rate limiting)\nAdditional metadata for the event\nCreate a new event with the given type\nParent event ID for event chains\nSession ID for grouping events\nCheck if a given event type should be emitted\nUser ID for multi-tenant scenarios\nBuilder-style method to set component ID\nBuilder-style method to set correlation ID\nBuilder-style method to set data\nBuilder-style method to add metadata\nUniversal state access trait for all components\nClear all keys with a given prefix\nDelete a value from state\nCheck if a key exists without reading its value\nList all keys matching a prefix\nRead a value from state\nRead multiple values in a single operation\nWrite a value to state\nAtomically write multiple key-value pairs\nTool parameter definition\nParameter type information\nResource limits for tool execution\nSecurity level for tools.\nSecurity requirements for tool execution\nTool trait for functional components.\nTool category for organization and discovery.\nTool schema for parameter validation.\nCheck if this security level allows execution at the given …\nGet tool category\nCustom resource limits\nCustom security requirements\nEnvironment variables that can be accessed\nFile system permissions (paths that can be accessed)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequired security level\nMaximum CPU time in milliseconds\nMaximum file operations per second\nMaximum memory usage in bytes\nMaximum network bandwidth in bytes per second\nNetwork permissions (domains that can be accessed)\nCreate a new tool schema\nCreate privileged security requirements with full access\nGet required parameter names\nGet resource limits for this tool\nCreate restricted security requirements with limited access\nCreate safe security requirements (no file/network access)\nGet parameter schema\nGet security level\nGet security requirements for this tool\nExecute tool with streaming output\nCreate strict resource limits (for safe tools)\nConvert to JSON schema format\nCreate unlimited resource limits (for privileged tools)\nValidate tool parameters\nSet CPU time limit\nAdd environment variable permission\nAdd file permission\nSet memory limit\nAdd network permission\nSet network bandwidth limit\nAdd a parameter to the schema\nSet the return type\nContext passing mode for tool composition.\nContinue with the next step, using a default value\nError handling strategy for tool composition steps.\nStop the entire composition on error\nPass the full execution context\nPass only output from the previous step\nRetry the step up to N times\nPass specific fields from context/previous outputs\nSkip this step and continue\nTool-capable trait for components that can interact with …\nTool composition definition.\nTool composition step for executing multiple tools in …\nInformation about a tool that can be invoked.\nTool query criteria for tool discovery.\nFilter by required capabilities\nTool capabilities\nFilter by tool categories\nTool category\nCompose multiple tools into a workflow.\nWhether to pass the entire context or just specific values\nCustom query parameters\nTool description\nComposition description\nDiscover available tools based on query criteria.\nHow to handle errors from this step\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet information about a specific tool.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke a tool by name with given parameters.\nList all available tools that this component can access.\nMaximum security level allowed\nMinimum security level required\nTool name/identifier\nComposition name\nCreate a new empty tool query\nCreate a new <code>ToolInfo</code>\nCreate a new tool composition\nWhether to execute steps in parallel (when possible)\nParameters for the tool (can reference outputs from …\nAdditional requirements\nParameter schema (JSON Schema format)\nSecurity level required\nSteps to execute\nText search in tool names/descriptions\nCheck if a specific tool is available for invocation.\nTool name to invoke\nFilter by required capability\nAdd a capability\nFilter by tool category\nAdd custom filter\nSet maximum security level\nSet minimum security level\nEnable parallel execution\nSet requirements\nSet the parameter schema\nAdd a composition step\nAdd text search filter\nWorkflow configuration.\nRetry policy for workflow steps.\nWorkflow execution status\nStep execution result\nWorkflow trait for orchestration components.\nWorkflow step definition.\nAdd step to workflow\nGet workflow configuration\nContinue on step failure\nCreate a failed result\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet step results\nGet result for specific step\nGet all steps\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum parallel executions\nCreate a new workflow step\nCreate a new retry policy\nCreate a new workflow configuration\nGet execution plan (topologically sorted)\nRemove step from workflow\nGet workflow status\nCreate a successful result\nGlobal timeout for workflow\nCheck if workflow can execute (no cycles, all dependencies …\nCreate a workflow step with all fields\nSet continue on error behavior\nSet dependencies\nAdd a dependency\nSet maximum parallel executions\nSet retry policy\nSet timeout\nSet global timeout\nRepresents a single chunk in a streaming agent response.\nType alias for a stream of agent chunks.\nAudio data with format and metadata\nAudio content\nSupported audio formats\nMetadata for audio content\nAVI format\nGeneric binary data\nBinary content\nCMYK color space\nContent types that can appear in agent chunks.\nMetadata associated with each chunk.\nColor space information for images\nUnique identifier for components in the <code>LLMSpell</code> system.\nMetadata for components in the <code>LLMSpell</code> system.\nControl messages for stream management\nControl messages for stream management.\nCustom control message\nMetadata for events in the <code>LLMSpell</code> system.\nFLAC format\nGIF format\nGrayscale\nHeartbeat to keep connection alive\nImage data with format and metadata\nImage content\nSupported image formats\nMetadata for image content\nJPEG format\nM4A format\nMaximum file size limits for different media types (in …\nMedia content (images, audio, etc.)\nMultimodal content that can be processed by agents\nMedia types for capability detection\nMKV format\nMOV format\nMP3 format\nMP4 format\nOGG format\nPNG format\nRGB color space\nRGBA color space (with alpha)\nRate limit information\nInformation about reasoning steps in the agent’s thought …\nStream was cancelled\nStream has ended normally\nStream has started\nSVG format\nPlain text content\nText content\nPlain text content\nTIFF format\nComplete tool call ready for execution\nPartial tool call in progress\nSemantic version information for components.\nVideo data with format and metadata\nVideo content\nSupported video formats\nMetadata for video content\nWAV format\n<code>WebM</code> format\nWebP format\nAdd custom attribute\nABOUTME: Agent input/output types with multimodal support …\nGet all attributes\nBitrate in bits per second\nNumber of channels (1 = mono, 2 = stereo, etc.)\nSequential index of this chunk in the stream\nVideo codec name\nColor space\nGet the component type as a string for event emission\nThe actual content of this chunk\nGet correlation ID\nCreate a child event metadata with new span ID\nDots per inch (if available)\nDuration in milliseconds\nDuration in milliseconds\nGet common file extensions for the format\nGet common file extensions for the format\nGet common file extensions for the format\nFrames per second\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate <code>ComponentId</code> from name (deterministic)\nGet custom attribute\nWhether image has transparency\nImage height in pixels\nVideo height in pixels\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this version is compatible with another (same …\nWhether this is the final chunk in the stream\nCheck if this version is newer than another\nGet the media type of this content\nMetadata about this chunk\nGet MIME type for the image format\nGet MIME type for the audio format\nGet MIME type for the video format\nModel that generated this chunk\nGenerate a new random <code>ComponentId</code>\nCreate new empty event metadata\nGet parent span ID\nAdditional properties for this step\nIf this chunk is part of a reasoning step\nSample rate in Hz\nSet correlation ID\nSet parent span ID\nSet source component\nSet span ID\nSet trace ID\nGet the size of the content in bytes\nGet source component\nGet span ID\nStep number in sequence\nType of reasoning step\nUnique identifier for this stream\nTimestamp when this chunk was created\nNumber of tokens in this chunk (if available)\nGet trace ID\nUpdate the version and updated_at timestamp\nGet inner UUID\nValidate size constraints\nImage width in pixels\nVideo width in pixels\nCreate metadata with trace and span IDs\nComplete arguments as JSON string\nTool call ID\nTool call ID\nOptional caption or description\nBase64 encoded data or URL\nMIME type of the media\nPartial arguments being built\nTool name being called\nTool name to execute\nStream configuration\nDuration in milliseconds\nExpected total chunks (if known)\nMessage type\nMessage payload\nReason for cancellation\nRequests remaining\nReset time\nTotal chunks sent\nTotal tokens used\nRaw image bytes\nRaw audio bytes\nRaw video bytes\nRaw binary bytes\nOriginal filename if available\nImage format\nAudio format\nVideo format\nImage metadata\nAudio metadata\nVideo metadata\nMIME type if known\nEnhanced agent input with multimodal support\nBuilder for <code>AgentInput</code>\nEnhanced agent output with multimodal support\nBuilder for <code>AgentOutput</code>\nMetadata about agent output\nRepresents a tool call made during agent execution\nOutput from a tool execution\nAdd media content\nAdd media content\nAdd a tool call\nBuild the <code>AgentInput</code>\nBuild the <code>AgentOutput</code>\nCreate a builder for more complex inputs\nCreate a builder for more complex outputs\nConfidence score (0.0 to 1.0)\nSet the context\nContext from previous interactions\nOutput data\nError message if failed\nExecution time in milliseconds\nExecution time in milliseconds\nAdditional metadata\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet media of a specific type\nCheck if input has media content\nCheck if output has media content\nCheck if output has tool calls\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this is a transfer response\nOptional media content\nGenerated or processed media\nSet metadata\nMetadata about the execution\nModel used for generation\nCreate a new builder\nCreate a new builder\nSet output modalities\nPreferred output modalities\nAdd a parameter\nInput parameters for the tool\nParameters for execution\nResult of the tool call (if completed)\nSuccess status\nSet the text\nSet the text\nCreate a text-only input\nCreate a text-only output\nText prompt or instruction\nPrimary text response\nNumber of tokens used\nTool calls made during execution\nID of the tool being called\nTool name for display\nSet transfer target\nNext agent to transfer to (if any)\nSet the execution context\nAdd media content to the input\nAdd media content to the output\nAdd multiple media items\nSet metadata\nSet output modalities\nAdd a parameter\nAdd a tool call\nSet transfer target")