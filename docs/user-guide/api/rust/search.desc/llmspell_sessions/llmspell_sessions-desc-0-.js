searchState.loadedDescShard("llmspell_sessions", 0, "ABOUTME: Session and artifact management for rs-llmspell, …\nSession analytics using MetricsHook ABOUTME: Session …\nArtifact storage system ABOUTME: Artifact storage system …\nScript bridge implementations ABOUTME: Script bridge …\nConfiguration types ABOUTME: Configuration types for …\nError types for session operations ABOUTME: Error types …\nEvent system integration ABOUTME: Session event system …\nHook integration ABOUTME: Hook integration module for …\nSession manager orchestration ABOUTME: Session manager …\nSession middleware using pattern hooks ABOUTME: Session …\nSession policies using hook patterns ABOUTME: Session …\nPrelude module for convenient imports\nSession replay engine ABOUTME: Session replay engine for …\nSession security and isolation ABOUTME: Session security …\nSession management ABOUTME: Core session implementation …\nCore type definitions ABOUTME: Core type definitions for …\nCreate default session analytics\nABOUTME: Session-specific analytics implementation using …\nCheckpoint frequency\nOperation count metrics\nResource usage metrics\nSession analytics facade\nSession analytics configuration\nSession duration metrics\nSession-specific metric types\nSession metrics collector\nSession metrics summary\nState size metrics\nSuccess rate metrics\nUser activity metrics\nGet the hook for registration\nAverage operation time\nClean up old metrics based on retention period\nEnable detailed metrics collection\nEnable operation tracking\nEnable resource usage tracking\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet aggregated metrics across all sessions\nGet session metrics summary\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast activity timestamp\nCreate new session metrics collector\nCreate new session analytics\nOperations breakdown by type\nPrivacy mode - anonymize sensitive data\nResource usage metrics\nMetrics retention period\nSession duration if ended\nSession ID (anonymized if privacy mode enabled)\nGet storage reference\nSuccess rate (0.0 to 1.0)\nTotal number of operations\nABOUTME: Artifact access control system providing …\nABOUTME: Metadata management utilities for artifact storage\nABOUTME: Artifact search and query functionality for …\nABOUTME: <code>SessionArtifact</code> implementation that represents a …\nABOUTME: Artifact storage system that provides …\nABOUTME: Core types for the artifact storage system …\nABOUTME: Version management for artifacts, tracking …\nAudit log entry for access attempts\nConfiguration for access control\nAccess control entry for an artifact\nAccess control list for an artifact\nAccess control manager for artifacts\nType of access being attempted\nFull control including sharing and deletion\nChanging permissions\nDeleting artifact\nListing/searching artifacts\nPermission level for artifact access\nRead access only\nReading artifact content\nSharing artifact with another session\nRead and write access\nModifying artifact content\nType of access attempted\nWhether to allow cross-session sharing\nCheck if this access allows the given permission\nArtifact that was accessed\nCheck if a session has permission to access an artifact\nCleanup expired permissions and old audit entries\nClean up expired entries\nAuto-cleanup interval for expired permissions\nCreated timestamp\nDefault permissions for different artifact types\nReason for denial (if denied)\nEnable audit logging\nAdditional access entries\nOptional expiration time\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet access control list for an artifact\nGet audit log entries for an artifact\nGet all sessions with access\nGrant permission to a session\nGrant permission to a session for an artifact\nWhether access was granted\nWhen this permission was granted\nWho granted this permission (for audit trail)\nCheck if a session has the required permission\nInitialize ACL for a new artifact\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this access is expired\nList artifacts accessible by a session\nMaximum audit log entries to keep in memory\nLast modified timestamp\nCreate a new access control entry\nCreate a new ACL with the given owner\nCreate a new access control manager\nOwner session (has implicit admin access)\nPermission level granted\nRevoke permission from a session\nRevoke permission from a session for an artifact\nSession that has access\nSession attempting access\nSource IP or identifier (if available)\nTimestamp of access attempt\nMetadata index for efficient querying\nMetadata search builder for complex queries\nAdd metadata to the index\nIndex by creation date (bucketed by day)\nIndex by session ID\nIndex by tags\nIndex by artifact type\nFilter by creation date range\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet metadata by artifact ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFull metadata cache\nCreate a new metadata index\nCreate a new search builder\nQuery artifacts by date range\nQuery artifacts by session\nQuery artifacts by tag\nQuery artifacts by type\nRemove metadata from the index\nExecute the search against a metadata index\nGet session artifact count\nFilter by size range\nGet total artifact count\nFilter by name pattern (substring match)\nFilter by session IDs\nRequire all specified tags\nFilter by artifact types\nExclude artifacts with these tags\nArtifact search engine\nExtended artifact query with sorting and pagination\nSort by creation date (oldest first)\nSort by creation date (newest first)\nSort by name (A-Z)\nSort by name (Z-A)\nSearch result with pagination info\nSort by size (smallest first)\nSort by size (largest first)\nSort order for search results\nSort by type then name\nFilter by artifact type\nThe matching artifacts\nCount artifacts by session\nCount artifacts by type\nFilter by creation date (after)\nFilter by creation date (before)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all unique tags\nGet artifacts by session ID\nGet artifacts by tag\nGet artifacts by type\nWhether there are more results\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of results to return\nMaximum artifact size in bytes\nMinimum artifact size in bytes\nFilter by name pattern (substring match, case-insensitive)\nCreate a new search engine with the given index\nOffset for pagination\nOffset used in the query\nSearch artifacts with the given query\nFilter by specific session ID\nSort order for results\nFilter by tags (artifacts must have all specified tags)\nTotal number of matches (before pagination)\nCurrent storage format version\nA single artifact within a session\nCalculate blake3 hash of content\nCompress the artifact content\nGet compression ratio if compressed\nCreate artifact with custom metadata\nDecompress the artifact content\nCreate a derived artifact from this one\nUpdate MIME type based on content\nReturns the argument unchanged.\nCreate from parts (used during retrieval)\nDeserialize from storage format with integrity check\nGet the raw content (decompressing if necessary)\nGet content as string (assumes UTF-8)\nUnique identifier for this artifact\nCalls <code>U::from(self)</code>.\nArtifact metadata\nCreate a new session artifact\nSet new content, updating hash and metadata\nGet storage size (actual bytes stored)\nStorage format version\nWhen this artifact was stored\nSerialize to storage format with integrity check\nCheck if content matches hash\nQuery criteria for artifacts\nArtifact storage system that works with any <code>StorageBackend</code>\nConfiguration for artifact storage\nTrait for artifact storage operations\nStorage statistics for a session\nAccess control configuration\nGet access to the access control manager\nNumber of artifacts stored\nFilter by artifact type\nCache size for frequently accessed artifacts\nChunk size for streaming large artifacts\nEnable compression for artifacts above this size\nCount artifacts by type across all sessions\nFilter by creation date (after)\nFilter by creation date (before)\nNumber of deduplicated artifacts\nDelete an artifact\nEnable content deduplication\nSearch for artifacts by content hash\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all versions of an artifact by name\nRetrieve an artifact\nGet artifact content as a stream of bytes\nBatch retrieve multiple artifacts by their IDs\nGet the latest version of an artifact by name\nGet artifacts from a session with pagination\nGet a specific version of an artifact by name and version …\nGet storage statistics\nGet total artifact count across all sessions\nGet total storage size across all sessions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage key prefix (useful for multi-tenant scenarios)\nLast time stats were updated\nMaximum number of results to return\nList artifacts for a session\nMaximum size for a single artifact (bytes)\nMaximum total storage per session (bytes)\nMaximum artifact size in bytes\nMinimum artifact size in bytes\nFilter by name pattern (substring match)\nCreate a new artifact storage instance with any storage …\nQuery artifacts by criteria\nFilter by specific session ID\nStore an artifact\nStream artifact content in chunks (useful for large …\nFilter by tags (artifacts must have all specified tags)\nTotal storage size in bytes\nCreate with default configuration\nOutput from an agent execution\nUnique identifier for an artifact\nMetadata for an artifact\nType of artifact stored\nVersion information for an artifact\nContent hash type for artifacts (using blake3 for …\nCustom artifact type with description\nMaximum length for artifact names\nMaximum size for a single artifact (100MB)\nMaximum length for tags\nGenerated by the system (logs, metrics, etc.)\nResult from a tool execution\nInput provided by the user\nAdd a tag if it doesn’t already exist\nArtifact type\nGet a human-readable name for the artifact type\nContent hash (blake3) of the artifact\nGet just the content key (for deduplication)\nWhen this version was created\nWhen the artifact was created\nWho created the artifact (user ID, agent ID, etc.)\nCustom key-value metadata\nOptional description\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet custom metadata value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this artifact is compressed\nMIME type of the content\nHuman-readable name\nCreate a new artifact ID\nCreate new metadata with defaults\nOriginal size before compression\nParent artifact reference (for derived artifacts)\nPrevious version’s content hash (if any)\nSequence number within the session\nSession this artifact belongs to\nSet custom metadata value\nSize in bytes\nGenerate a storage key for this artifact\nTags for categorization\nValidate the metadata\nVersion number (starts at 1)\nVersion information\nVersion history for a named artifact\nVersion manager for tracking artifact versions\nCurrent version number\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet version history for an artifact\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArtifact name\nCreate a new version manager\nGet the next version number for an artifact\nRecord a new version\nMap of version number to content hash\nMap of version number to artifact ID\nScript bridge stub - to be implemented in Phase 6.5\nABOUTME: Type conversions between Rust and script types …\nABOUTME: Error handling and conversion for session script …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new session bridge\nABOUTME: Extended session operations for script bridge …\nConvert <code>ArtifactMetadata</code> to JSON value\nConvert a script value (JSON) to <code>CreateSessionOptions</code>\nConvert a script value (JSON) to <code>SessionQuery</code>\nParse artifact type from string\nConvert <code>SessionMetadata</code> to JSON value\nHelper to create script errors for common cases\nScript-friendly error representation\nError code (e.g., <code>SESSION_NOT_FOUND</code>)\nCreate a conversion error\nAdditional error details\nError codes for script bridge operations\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an invalid input error\nHuman-readable error message\nCreate a new script error\nCreate a not found error\nCreate a permission denied error\nAdd details to the error\nArtifact error\nConfiguration error\nEvent dispatch error\nHook execution error\nInternal error\nInvalid input error\nInvalid operation error\nInvalid state transition error\nIO error\nPermission denied error\nResource limit exceeded error\nScript conversion error\nSerialization error\nSession already exists error\nSession not found error\nStorage error\nSession export data\nExtended operations for session management\nSession statistics\nAdd tags to session (appends to existing)\nNumber of artifacts in session\nArtifacts if included in export\nSession creation timestamp\nExport session data\nTimestamp when export was created\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet session statistics\nGet session tags\nCheck if session has a specific tag\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSession metadata\nCreate new session operations handler\nNumber of operations performed\nRemove tags from session\nSession identifier\nSession identifier\nSet session tags (replaces all tags)\nSession state snapshot\nCurrent session status\nNumber of tags\nTotal size of artifacts in bytes\nUpdate session metadata\nLast update timestamp\nConfiguration for session cleanup\nConfiguration for event publishing\nConfiguration for hook execution\nConfiguration for the <code>SessionManager</code>\nBuilder for <code>SessionManagerConfig</code>\nArchive sessions before deletion\nArchive path\nEnable or disable auto-persistence\nEnable automatic session persistence\nBuild the configuration\nCreate a new builder for <code>SessionManagerConfig</code>\nSet cleanup configuration\nSession cleanup configuration\nCleanup interval in seconds\nSet compression level (1-9)\nCompression level (1-9, higher = better compression but …\nSet default session timeout\nDefault session timeout\nDelete sessions older than this duration\nEnable automatic artifact collection\nEnable artifact events\nEnable artifact hooks\nEnable automatic cleanup of old sessions\nEnable or disable compression\nEnable compression for session data\nEnable or disable deduplication\nEnable content deduplication\nEnable session lifecycle hooks\nEnable session events\nEvent buffer size\nSet event configuration\nEvent publishing configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet hook execution configuration\nHook execution configuration\nHook timeout in milliseconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet maximum active sessions\nMaximum number of active sessions\nMaximum concurrent hook executions\nMaximum retry attempts\nSet maximum storage size in bytes\nMaximum session storage size in bytes\nCreate a new builder with default configuration\nSet persist interval in seconds\nAuto-persist interval in seconds\nEvent publish timeout in milliseconds\nRetry failed hooks\nSet storage path\nPath for session storage\nEnable or disable activity tracking\nEnable session activity tracking\nAccess denied error\nArtifact already exists\nArtifact not found\nConfiguration error\nDeserialization error\nContains the error value\nEvent system error\nGeneral error with context\nHook execution error\nData integrity error\nInvalid operation\nSession is in invalid state for operation\nInvalid session state transition\nI/O error\nContains the success value\nReplay error\nResource limit exceeded\nResult type alias for session operations\nSerialization error\nSession already exists\nComprehensive error type for session operations\nSession not found\nState persistence error\nStorage backend error\nTimeout error\nValidation error\nReturns the argument unchanged.\nCreate a general error with context\nCreate a general error with source\nCalls <code>U::from(self)</code>.\nCreate a replay error\nCreate a replay error with source\nCurrent state\nSession ID that was not found\nSession ID that already exists\nSession ID\nArtifact ID\nArtifact ID\nError message\nError message\nError message\nError message\nError message\nOperation that was attempted\nOperation that timed out\nReason for the invalid operation\nResource type\nSession ID\nOptional source error\nOptional source error\nCurrent session state\nAttempted new state\nABOUTME: Session-specific event types with built-in …\nSession archived\nArtifact deleted\nArtifact retrieved\nArtifact stored\nSession completed\nSession created\nCustom event\nSession failed\nHook executed\nSession loaded\nSession resumed\nPrefix for all session-related events\nSession saved\nSession event with correlation context\nBuilder for complex session events\nSession event types\nSession started\nState changed\nSession suspended/checkpointed\nBuild the event\nSet correlation context\nAssociated correlation context\nCreate a correlated session event\nCreate a session event with a new correlation root\nAdd data field\nThe underlying universal event\nEvent type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a link to another event\nAdd metadata\nCreate a new builder\nCreate a new session event\nSet parent correlation\nSession ID this event belongs to\nSet event source\nAdd a tag\nSet event target\nConvert to event type string\nAdd metadata to the event\nCreate with parent correlation\nSet event source\nAdd a tag to the event\nSet event target\nABOUTME: Integration of artifact collectors with session …\nABOUTME: Session-specific hook context extensions and …\nABOUTME: Session-specific hooks implementing <code>ReplayableHook</code>…\nArtifact collection hook processor\nConfiguration for artifact collectors\nConfiguration for agent output collection\nWhether to store collected artifacts automatically\nWhether to collect agent outputs\nWhether to collect tool results\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new artifact collection processor\nProcess collected artifacts from hook context\nProcess hook context for artifact collection\nRegister artifact collectors with the hook registry\nCheck if a hook point should trigger artifact collection\nConfiguration for tool result collection\nExtension trait for <code>HookContextBuilder</code> with …\nHelper functions for creating session hook contexts\nCreate an artifact operation context\nCreate a comprehensive session lifecycle context\nCreate a minimal session context for performance-critical …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdd artifact operation context\nAdd comprehensive session metadata to the context\nAdd session performance metrics to the context\nAdd session state snapshot\nAdd session timing information\nHook for session checkpoint events (suspend)\nHook for session end events\nRegistry of session hooks for easy registration\nHook for session restore events (resume)\nHook for session save events\nHook for session start events\nCreate a default set of session hooks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new session start hook\nCreate a new session end hook\nCreate a new session checkpoint hook\nCreate a new session restore hook\nCreate a new session save hook\nRegister all session hooks with a <code>ReplayManager</code>\nSet whether to calculate checksums\nSet whether to cleanup resources\nSet whether to compress data\nSet whether to calculate session duration\nSet whether to log session start\nSet whether to restore metadata\nSet whether to capture state snapshot\nSet whether to validate restored state\nSet whether to validate configuration\nSet whether to validate checkpoint\nCore session manager orchestrating all session operations\nCheck if a session can be replayed\nComplete a session\nCreate a new session\nDelete an artifact\nDelete a session\nReturns the argument unchanged.\nGet all active replays\nRetrieve an artifact by ID\nGet access control list for an artifact\nGet audit log for an artifact\nRetrieve artifact content only (without metadata)\nGet replay status for a session\nGet an active session\nGet session replay metadata\nGet the timeline of events for a session\nGrant permission for another session to access an artifact\nCalls <code>U::from(self)</code>.\nList all artifacts for a session\nList all sessions that can be replayed\nList sessions matching query\nLoad a session from storage\nCreate a new session manager with the given dependencies\nQuery artifacts with filtering and pagination\nQuery hook executions for a specific session\nGet the replay engine for direct access\nReplay a session using the existing replay infrastructure\nRestore recent sessions\nResume a session\nRevoke permission for another session to access an artifact\nSave all active sessions\nSave a session to storage\nShutdown the manager\nStop session replay\nStore a user-provided artifact in a session\nStore a file as an artifact\nSuspend a session\nCreate caching middleware for read operations\nCreate default middleware chain for session operations\nCreate security middleware with voting pattern\nABOUTME: Session middleware implementation with …\nMiddleware configuration\nMiddleware execution pattern\nType of middleware to create\nExecute middleware in parallel\nParallel middleware implementation\nExecute middleware in sequence\nSequential middleware implementation\nMiddleware for session creation\nMiddleware for session deletion\nSession middleware manager\nGeneral session operation\nMiddleware for session read operations\nMiddleware for session update operations\nUse voting for consensus\nVoting middleware implementation\nAdd a hook\nAdd a hook\nAdd a hook\nAdd multiple hooks\nAdd multiple hooks\nAdd multiple hooks\nGet middleware configuration\nCreate operation-specific middleware\nCreate session creation middleware\nCustom middleware hooks\nEnable caching for read operations\nEnable logging middleware\nEnable metrics collection\nEnable rate limiting\nEnable security checks\nExecute middleware for a specific operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize middleware chains\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new session middleware\nCreate new sequential middleware\nCreate new parallel middleware\nCreate new voting middleware\nMiddleware execution pattern\nUpdate middleware configuration\nSet metadata\nSet metadata\nSet metadata\nPercentage of hooks that must pass (0.0 to 1.0)\nExecute policies in parallel (all must pass)\nPolicy composition pattern\nPolicy evaluation result\nPolicy type enumeration\nRate limit policy\nResource limit policy\nExecute policies sequentially (fail fast)\nSession policy configuration\nSession policy manager\nTimeout policy\nExecute policies with voting (majority wins)\nPolicy composition pattern\nEnable rate limiting\nEnable resource limit policy\nEnable timeout policy\nEvaluate policies for a session operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a specific policy is enabled\nOptional metadata\nCreate a new policy manager\nWhether the policy passed\nPolicy that was evaluated\nABOUTME: Session rate limiting policy leveraging …\nRate limit configuration\nOptional reason for failure\nRegister session policies with the hook system\nResource limit configuration\nABOUTME: Session resource limit policy leveraging …\nABOUTME: Session timeout policy implementation using Hook …\nTimeout configuration\nUpdate policy configuration\nMinimum percentage of policies that must pass (0.0 to 1.0)\nRate limit configuration for sessions\nSession rate limit policy\nWhether to allow burst traffic\nBurst capacity multiplier\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal rate limit (requests per minute)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new rate limit policy\nPer-operation type limits\nPer-session rate limit\nRate limit window duration\nResource configuration\nSession resource limit policy\nCost alert thresholds (percentage of max)\nEnable cost tracking\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum cost in USD\nMaximum memory usage in bytes\nMaximum number of operations\nMaximum tokens per operation\nMaximum total tokens per session\nCreate a new resource limit policy\nSession timeout policy\nTimeout configuration\nWhether to send warnings before timeout\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrace period before hard timeout\nIdle timeout duration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum session duration\nCreate a new timeout policy\nWarning intervals (e.g., 5min, 1min before timeout)\nBridge adapter that implements <code>hooks::HookReplayManager</code> …\nSession replay engine integrating existing replay …\nAdd a breakpoint\nGet error analysis for a session\nCheck if a session can be replayed\nClear session controls\nCompare hook results\nCompare states at two different points in time\nExport debug data for a session\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all active replay progresses\nGet all active replays\nGet session replay progress\nGet replay status for a session\nGet session replay metadata\nGet session timeline\nImport debug data for a session\nInspect session state at a point in time\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all sessions that can be replayed\nNavigate to a specific point in the timeline\nCreate a new hook replay bridge\nCreate new replay engine with existing infrastructure\nPause session replay\nQuery hook executions for a specific session\nRemove a breakpoint\nReplay a session\nResume session replay\nSchedule a session replay\nABOUTME: Session-specific replay adapter that bridges …\nGet the session replay adapter\nABOUTME: Session-specific replay controls adapting …\nABOUTME: Session-specific debugging helpers that integrate …\nSet replay speed\nStep to next hook (when paused)\nStop session replay\nFilter for querying session hooks\nSession replay adapter that bridges session operations to …\nSession-specific replay configuration\nSession replay metadata\nSession replay result\nActive session replay tracking\nAdd a breakpoint\nGet error analysis for a session\nUnderlying batch replay response\nWhether the session can be replayed\nCheck if a session can be replayed\nClear completed replays\nClear session controls\nCompare hook results\nWhether to compare results with original execution\nCompare states at two different points in time\nGet the replay controls\nCorrelation ID used for the session\nCorrelation ID\nCurrent hook being replayed\nGet the debugger\nEnd time filter\nExport debug data for a session\nNumber of failed hook replays\nFirst hook timestamp\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all active replay progresses\nGet all active replay statuses\nGet session replay progress\nGet current replay status for a session\nGet session replay metadata\nGet replay timeline for a session\nSpecific hook ID filter\nNumber of hooks processed\nNumber of hooks replayed\nImport debug data from replay session\nInspect session state at a point in time\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to the underlying <code>ReplayConfig</code>\nLast hook timestamp\nList all sessions that can be replayed\nMaximum number of results\nSession-specific metadata\nSession-specific metadata\nReplay mode (exact, modified, simulate, debug)\nGet timeline navigation\nCreate a new session replay adapter\nPause session replay\nQuery hook executions for a specific session\nRemove a breakpoint\nReplay a session using the existing replay infrastructure\nResume session replay\nSchedule a session replay\nSession ID that was replayed\nSession being replayed\nSession ID\nSet replay speed\nStart time of the replay\nStart time of replay\nStart time filter\nCurrent replay state\nStep to next hook (when paused)\nWhether to stop on first error\nStop/cancel session replay\nNumber of successful hook replays\nTarget timestamp for partial replay\nTimeout for the entire session replay\nTotal duration of the replay\nTotal duration\nTotal hooks to process\nTotal number of hooks\nUpdate replay progress (called during replay execution)\nBreakpoint hit callback\nCancelled by user\nCompleted successfully\nFailed with error\nBreak after N hooks executed\nBreak at specific hook execution\nBreak on error\nPaused by user\nProgress update callback\nCurrently running\nScheduled but not started\nSession replay breakpoint\nSession-specific breakpoint condition\nSession replay control configuration\nSession replay controls\nSession replay progress information\nSession replay speed control\nExtended replay state for sessions\nBreak on specific session state\nBreak at specific timestamp\nActive breakpoints\nAdd a breakpoint\nApply speed to duration\nCallback data when breakpoint hits\nClear all controls for a session\nBreakpoint condition\nCurrent hook being replayed\nDecrease speed\nDefault replay mode for sessions\nDefault speed multiplier (1.0 = normal speed)\nDefault timeout for session replays\nWhether to enable breakpoints\nWhether breakpoint is enabled\nEstimated time remaining\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all active replays\nGet current progress\nHooks completed\nUnique breakpoint ID\nIncrease speed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum concurrent session replays\nGet current speed multiplier\nCreate new session replay controls\nOne-time breakpoint (auto-disable after hit)\nPause session replay\nProgress percentage (0-100)\nRegister breakpoint callback\nRegister progress callback\nRemove a breakpoint\nReset to normal speed\nResume session replay\nSchedule a session replay\nSession this breakpoint applies to\nSession being replayed\nSet replay speed\nSet specific speed\nCurrent speed multiplier\nStart time of replay\nCurrent replay state\nStep to next hook (when paused)\nStop session replay\nConvert to base replay state if possible\nTotal hooks to replay\nUpdate replay progress\nNumber of hooks after which to break\nExpected value for the state key\nID of the hook to break on\nKey in session state to check\nTimestamp to break at\nA specific difference found during comparison\nError analysis for a session\nExported debug data for a session\nSession debugging helper that integrates existing replay …\nSession state at a point in time\nComparison between two session states\nAdd an error to the session\nAnalyze errors for a session\nAll captured states\nClear debug data for a session\nCompare two session states\nCompare hook results between original and replay\nCompare states at two different points in time\nContext snapshot\nContext differences\nDescription of the difference\nError analysis\nError rate over time\nError timeline\nErrors by hook\nErrors by type\nHook execution ID\nExport debug data for a session\nWhen this data was exported\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from a captured state\nCreate analysis from replay errors\nGet all captured states for a session\nGet timeline for a session\nHook that was executed\nImport captured states from a replay session\nInspect state at a specific point in time\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdditional metadata\nMetadata differences\nMost common error\nNavigate to a specific point in the timeline\nCreate a new session debugger\nOriginal value\nPath to the difference\nReplayed value\nResult of the hook execution\nResult differences\nSession ID\nSummary of changes\nTimeline entries\nWhen this state was captured\nFirst state timestamp\nSecond state timestamp\nTotal number of errors\nUpdate timeline for a session\nSession security policy enforcer\nGet list of active sessions\nCheck if a session can access another session’s resources\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if session is active\nCreate a new security manager\nRegister an active session\nUnregister a session (when completed or deleted)\nValidate cross-session operation\nValidate state scope access\nCurrent snapshot format version\nCore session structure managing lifecycle and state\nSerializable representation of a session for persistence\nAdd an artifact ID to this session\nGet all artifact IDs for this session\nArtifact IDs\nClear session state\nComplete the session\nSession configuration\nSession configuration\nDecrement artifact count\nMark the session as failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nRestore a session from a snapshot\nGet all session state\nGet a session state value\nGet the session ID\nIncrement artifact count\nIncrement operation count and return the new sequence …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSession metadata\nSession metadata\nCreate a new session with the given options\nResume a suspended session\nSet a session state value\nCreate a snapshot of the session for persistence\nSnapshot timestamp\nSession state\nGet the current session status\nSuspend the session\nSnapshot format version\nSession is actively being used\nSession has been archived\nSort by artifact count\nSession completed successfully\nSession creation options\nBuilder for <code>CreateSessionOptions</code>\nSort by creation date\nSession failed with error\nHook configuration for session events\nSort by session name\nSort by operation count\nResource limits for a session\nConfiguration for session behavior\nUnique identifier for a session\nMetadata about a session\nSession query filters\nSort options for session queries\nCurrent status of a session\nSession is temporarily suspended\nSort by update date\nAdd a metadata entry\nAdd a tag to the session\nAdd a tag to the session\nNumber of artifacts in session\nGet the inner UUID as a string\nGet the underlying UUID\nEnable automatic artifact collection\nAuto-save interval in seconds (None to disable)\nBuild the <code>CreateSessionOptions</code>\nCreate a new builder for <code>CreateSessionOptions</code>\nCheck if the session can be resumed\nSet the custom configuration\nCustom configuration (overrides defaults)\nFilter by creation date (from)\nSession creation timestamp\nFilter by creation date (to)\nSet the user creating the session\nUser who created the session\nUser creating the session\nFilter by creator\nCustom metadata\nSet the session description\nSession description\nSession description\nCalculate session duration\nEnable session replay recording\nSession end timestamp (when completed/failed)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a session ID from a UUID\nHook configuration\nSession identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the session is active\nCheck if the session is in a terminal state\nMaximum number of results\nMaximum number of artifacts to retain\nMaximum CPU time in seconds\nMaximum session duration in seconds (None for unlimited)\nMaximum memory usage in bytes\nMaximum number of operations\nMaximum storage size in bytes\nSet all metadata at once\nCustom metadata for the session\nInitial metadata\nSet the session name\nSession name/title\nSession name\nCreate a new unique session ID\nCreate new metadata for a session\nCreate a new builder with default options\nOffset for pagination\nEnable artifact creation hooks\nEnable session end hooks\nEnable session resume hooks\nEnable session start hooks\nEnable session suspend hooks\nNumber of operations performed\nSet the parent session ID\nParent session ID if this is a child session\nParent session ID\nFilter by parent session\nRemove a tag from the session\nResource limits for the session\nSession retention days (None for unlimited)\nSearch in name and description\nSort order\nSort direction\nSession start timestamp (when first activated)\nCurrent session status\nFilter by status\nSet all tags at once\nTags for categorization\nInitial tags\nFilter by tags (sessions must have all specified tags)\nHook timeout in milliseconds\nTotal size of artifacts in bytes\nUpdate the session status\nLast update timestamp")