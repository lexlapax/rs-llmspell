searchState.loadedDescShard("llmspell_agents", 0, "ABOUTME: Agent infrastructure for rs-llmspell ABOUTME: …\nABOUTME: Agent-as-tool wrapper for enabling agents to be …\nABOUTME: Agent implementations ABOUTME: Contains various …\nABOUTME: Agent builder with fluent API for easy agent …\nABOUTME: Composition patterns for agents and tools …\nABOUTME: Agent configuration management and loading …\nABOUTME: Context management module for hierarchical …\nABOUTME: Dependency injection container for agent …\nABOUTME: Agent factory system for creating and configuring …\nABOUTME: Factory registry for managing multiple agent …\nABOUTME: Health monitoring system for agent lifecycle …\nABOUTME: Agent lifecycle hooks for extending agent behavior\nMacro to implement <code>PersistentAgent</code> trait for types that …\nABOUTME: Agent lifecycle management system ABOUTME: …\nABOUTME: Monitoring and observability infrastructure for …\nPrelude module for convenient imports\nABOUTME: Agent registry module organization ABOUTME: …\nState management module for agent isolation and sharing\nABOUTME: Agent templates system for pre-configured patterns\nABOUTME: Testing infrastructure for agent system ABOUTME: …\nABOUTME: Tool execution context integration for enhanced …\nABOUTME: Tool discovery and registration APIs for …\nABOUTME: Comprehensive error handling for tool operations …\nABOUTME: Tool invocation wrapper with validation and error …\nABOUTME: <code>ToolManager</code> for managing tool discovery, …\nWrapper that allows any <code>BaseAgent</code> to be used as a <code>Tool</code>.\nConvert using custom function (name only for serialization)\nExtract specific field from object\nPass through as-is\nApply custom JSON path\nConfiguration for parameter mapping between tool and agent …\nParameter transformation rule\nConvert to string representation\nCustom metadata for the wrapped tool\nTypes of parameter transformations\nGet the wrapped agent\nWhether to pass all tool parameters as a single “…\nAdditional tool capabilities\nDefault value if not provided\nOverride tool description (defaults to agent description)\nCreate field extraction transform\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate identity transform\nWhether to include tool metadata in agent context\nCustom input text template\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOverride tool name (defaults to agent name)\nCreate a new agent-wrapped tool with default configuration\nCreate new parameter mapping configuration\nGet parameter mapping configuration\nCustom parameter transformations\nMark transform as required\nWhether this parameter is required\nTool-specific requirements\nTarget parameter name in agent input\nCreate string conversion transform\nGet tool metadata override\nValue transformation type\nSet default value\nCreate with both custom metadata and parameter …\nSet custom input template for agent\nCreate with custom tool metadata\nCreate with custom parameter mapping\nAdd a parameter transformation\nDon’t bundle parameters, pass them individually\nDon’t include tool context in agent execution\nABOUTME: Basic agent implementation ABOUTME: Simple agent …\nABOUTME: LLM agent implementation that uses language model …\nBasic agent implementation\nReturns the argument unchanged.\nGet configuration\nInitialize the agent and its state machine\nCalls <code>U::from(self)</code>.\nCheck if agent is healthy\nCreate a new basic agent\nPause the agent execution\nResume the agent execution\nStart the agent execution\nGet state machine for lifecycle management\nStop the agent execution\nTerminate the agent\nLLM-powered agent implementation\nReturns the argument unchanged.\nInitialize the agent and its state machine\nCalls <code>U::from(self)</code>.\nCheck if agent is healthy\nCreate a new LLM agent\nPause the agent execution\nResume the agent execution\nStart the agent execution\nGet state machine for lifecycle management\nStop the agent execution\nTerminate the agent\nBuilder for creating agent configurations with a fluent API\nAllow access to all tools\nAllow access to specific tools\nAllow access to multiple tools\nCreate a builder for a basic agent\nBuild the agent configuration\nAdd a custom configuration parameter\nSet the agent description\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a builder for an LLM agent\nSet maximum execution time\nSet maximum memory usage\nSet maximum recursion depth\nSet maximum tokens for model\nSet maximum number of tool calls\nAdd a model setting\nCreate a new agent builder with required fields\nSet all resource limits at once\nSet model temperature\nCreate a builder for a tool orchestrator agent\nConfigure the model for LLM-based agents\nCreate a builder for a workflow agent\nABOUTME: Capability aggregation and management for …\nABOUTME: Delegation patterns for agent composition …\nABOUTME: Hierarchical agent composition for parent-child …\nABOUTME: Lifecycle management for composite agents …\nABOUTME: Tool composition patterns for chaining and …\nABOUTME: Core traits and interfaces for agent composition …\nCapability aggregator that manages and matches capabilities\nEntry for a registered capability\nResult of a capability match\nRequirement for a capability\nBuilder for capability requirements\nTrait for scoring capabilities\nStatistics about capabilities\nUsage statistics for a capability\nDefault capability scorer based on usage statistics\nAdd a capability requirement\nWhether this capability is currently available\nNumber of available capabilities\nAverage capability score\nAverage execution time\nBuild the requirement\nCount by category\nThe capability itself\nThe matched capability\nSet the category requirement\nRequired category\nClear all requirements\nNumber of failed invocations\nFind capabilities matching requirements\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet capabilities by category\nGet all capabilities for a provider\nGet statistics for all capabilities\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTotal number of times invoked\nLast invocation time\nSet as mandatory\nWhether this requirement is mandatory\nAdd required metadata\nSet minimum score\nMinimum score required\nSet minimum version\nMinimum version\nName pattern (supports wildcards)\nCreate a new capability aggregator\nCreate a new requirement builder\nProvider of this capability\nProvider of the capability\nRegister a capability\nRequired metadata fields\nWhich requirements were satisfied\nScore a capability (0.0 to 1.0)\nScore for this capability (0.0 to 1.0)\nMatch score (0.0 to 1.0)\nSet availability for a capability\nNumber of successful invocations\nTotal number of registered capabilities\nUnregister a capability\nUpdate usage statistics for a capability\nUsage statistics\nCreate with a custom scorer\nAgent with the best capability score\nCustom selection function\nA delegation-based composite agent\nBuilder for delegating agents\nConfiguration for delegating agents\nMetrics for delegation tracking\nDelegation request containing task details\nResult of a delegation\nStrategy for selecting which agent to delegate to\nFirst agent that matches capabilities\nLoad-balanced based on agent metrics\nRandom selection from matching agents\nRound-robin between matching agents\nAdd an initial agent\nBuild the delegating agent\nWhether to cache capability lookups\nSet the configuration\nDefault timeout for delegations\nDelegate a request to an appropriate agent\nAgent that handled the task\nTime taken to complete\nError message if failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInput data for the task\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum concurrent delegations\nNumber of retry attempts\nAdditional metadata\nGet delegation metrics\nCreate a new delegating agent\nCreate a new builder\nPriority level (higher is more important)\nRegister an agent for delegation\nRequired capabilities for the task\nResult of the task\nWhether to retry failed delegations\nSet the delegation strategy\nSet the delegation strategy\nWhether the task was successful\nTask identifier\nTask identifier\nTimeout for the task\nUnregister an agent\nBuilder for hierarchical composite agents\nA hierarchical composite agent that manages parent-child …\nConfiguration for hierarchical agents\nAdd a capability\nBuild the hierarchical agent\nTimeout for child operations\nSet the configuration\nSet the description\nSet the initial execution pattern\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether children inherit parent capabilities\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of children allowed\nMaximum depth allowed in the hierarchy\nCreate a new hierarchical composite agent\nCreate a new builder\nWhether to propagate events down the hierarchy\nWhether to propagate events up the hierarchy\nSet the parent of this agent\nAgent is actively processing\nDirection for cascading events\nComponent added\nComponent health information\nLifecycle information for a single component\nComponent removed\nLifecycle manager for composite agents\nCritical error\nCascade down to children\nError occurred\nError\nError severity levels\nHealth check result\nHealth check result\nHierarchical lifecycle manager for hierarchical agents\nInformational\nAgent is being initialized\nConfiguration for lifecycle management\nLifecycle events\nEvent handler for lifecycle events\nLifecycle state of a composite agent\nAgent is paused\nAgent is ready to accept work\nAgent is shutting down\nState transition event\nAgent has terminated\nCascade up to parents\nWarning\nActivate the composite agent\nAdd a component dynamically\nCascade an event through the hierarchy\nWhether to cascade lifecycle events to children\nComponent reference\nComponent health statuses\nGet component states\nError count\nError count\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a lifecycle event\nPerform health check\nHealth check interval\nWhether component is healthy\nComponent ID\nMaximum initialization time\nInitialize a composite agent\nInitialize a hierarchical agent\nInitialization timestamp\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast activity timestamp\nLast activity\nManager state\nCreate a new lifecycle manager\nCreate a new hierarchical lifecycle manager\nOverall health status\nPause the composite agent\nRecord component error\nRegister an event handler\nRemove a component\nResume from pause\nShutdown the composite agent\nMaximum shutdown time\nGet current state\nComponent state\nComponent state\nTimestamp of check\nUpdate component activity\nWhether to wait for all components during state transitions\nID of the component undergoing transition\nID of the added component\nID of the removed component\nID of the component that encountered the error\nID of the component being checked\nAdditional health check details\nError description\nPrevious lifecycle state\nWhether the component is healthy\nID of the parent component, if any\nReason for removal\nSeverity level of the error\nTimestamp of the transition\nNew lifecycle state\nError that occurred during composition execution\nError handling strategies for compositions\nMetrics for composition execution\nResult of executing a tool composition\nA single step in a tool composition\nTypes of execution conditions\nUse a constant value\nContinue to next step\nContinue execution, collecting errors\nApply a custom transformation function\nDescribes how data flows between steps\nData transformation types\nField equals value\nExecution condition for steps\nField exists and is not null\nExtract a field from an object\nStop execution on first error\nField is greater than value\nInherit from composition strategy\nApply a JSON path expression\nField is less than value\nField matches regex (for strings)\nField does not equal value\nField does not exist or is null\nOutput transformation applied to step results\nUse a parameter from the initial input\nRetry this step\nRetry configuration for steps\nRetry failed steps with exponential backoff\nUse shared context value\nSkip this step\nSkip failed steps and continue\nError handling strategies for individual steps\nMetrics for step execution\nUse output from a previous step\nResult of executing a single step\nStop execution on error\nParse as number\nConvert to string\nA composition of tools that can be executed as a workflow\nTrait for providing tools to compositions\nTransform data from another source\nAdd a step to the composition\nBase delay between retries\nCondition type\nConditions that must be met to execute this step\nDescription of what this composition does\nError if step failed\nGlobal error handling strategy\nError handling strategy for this step\nAny errors that occurred\nExecute the composition with the given tool provider\nExecute a tool by name\nStep execution time\nWhether to use exponential backoff\nWhether this error stopped execution\nField to check\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if a tool is available\nUnique identifier for this composition\nUnique identifier for this step\nInput parameter mappings for this step\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether to keep the original field\nMaximum number of retry attempts\nMaximum delay between retries\nMaximum execution time for the entire composition\nMaximum execution time for this step\nMemory used during execution\nError message\nExecution metrics\nStep execution metrics\nHuman-readable name\nCreate a new tool composition\nCreate a new composition step\nMark step as optional\nWhether this step is optional\nFinal output of the composition\nOutput from the step\nOutput transformations for this step\nWhether to run steps in parallel where possible\nNumber of retry attempts\nRetry configuration\nShared data that persists across all steps\nSource field in the step output\nStep ID where error occurred\nResults from each step\nSteps in the composition\nNumber of steps executed\nNumber of steps that failed\nWhether the composition succeeded overall\nWhether the step succeeded\nTarget field name\nName of the tool to execute\nTotal execution time\nNumber of retries performed\nTransformation to apply\nValue to compare against\nAdd execution condition\nSet error strategy for the composition\nSet error strategy for this step\nAdd an input mapping\nSet maximum execution time\nEnable parallel execution where possible\nSet retry configuration\nAdd shared context data\nSource of the data to transform\nTransformation to apply to the source data\nRepresents a capability that an agent exposes or requires\nExecute based on capability matching\nCategories of capabilities\nCapability mismatch\nComponent not found\nTrait for components that can be composed into …\nTrait for agents that compose other agents\nBuilder for creating composite agents\nError types specific to composition\nMetadata about a composable component\nTypes of composition patterns\nExecute based on conditions\nConfiguration change event\nCustom composition type\nCustom execution pattern\nCustom capability\nCustom event\nCycle detected in hierarchy\nData processing capabilities\nPeer-to-peer delegation\nDelegation failed\nEnsemble composition\nError event\nCondition for conditional execution\nExecution patterns for composite agents\nHierarchical parent-child relationships\nTrait for hierarchical agent composition\nEvent types for hierarchical agents\nInvalid composition\nMaximum depth exceeded\nLLM-related capabilities\nMonitoring capabilities\nOrchestration capabilities\nExecute components in parallel\nPipeline composition\nExecute in a round-robin fashion\nExecute components sequentially\nState change event\nTool-related capabilities\nAdd a child agent\nAdd a child agent to this composite\nAdd a component\nBuild the composite agent (to be implemented by concrete …\nWhether this component can be a child\nWhether this component can be a parent\nCheck if this component can be composed with another\nCategory of the capability\nGet all child agents\nComponent ID to check\nGet all child components\nGet the composition metadata for this component\nType of composition this component supports\nCustom metadata\nDelegate execution to a specific component\nGet the depth of this agent in the hierarchy\nSet the description\nComponent to execute if false (optional)\nExecute all components in a specific pattern\nSet the execution pattern\nExpected value\nGet the exposed capabilities of this component\nField to evaluate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a specific component by ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of components this can compose\nAdd metadata\nAdditional metadata\nName of the capability\nCreate a new composite agent builder\nGet the parent agent if this is a child\nPropagate an event down the hierarchy\nPropagate an event up the hierarchy\nRemove a child agent\nRemove a child agent by ID\nGet the required capabilities this component needs\nComponent to execute if true\n<code>ToString::to_string</code>, but without panic on OOM.\nVersion of the composition interface\nVersion requirement\nABOUTME: Configuration for automatic agent state …\nBuilder for persistence configuration\nBuild the configuration\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new builder with default settings\nConfigure whether saves should be non-blocking\nPreset configurations for common use cases\nConfigure whether to restore on resume\nConfigure whether to save on pause\nConfigure whether to save on stop\nEnable auto-save with specified interval\nSet backoff multiplier for retries\nSet failure threshold for circuit breaker\nSet maximum retry attempts\nConfiguration for development environments\nMinimal configuration (only save on stop)\nConfiguration for production environments\nConfiguration for testing\nABOUTME: Distributed context synchronization for …\nABOUTME: Event bus integration for context-aware event …\nABOUTME: Hierarchical context support for parent-child …\nABOUTME: Context inheritance rules and field propagation …\nABOUTME: Shared memory system for inter-agent communication\nReplicate to all nodes\nCluster statistics\nConflict resolution strategy\nConsistency level for distributed operations\nContext synchronization service\nCustom resolver\nDistributed context for cross-node coordination\nNode is draining (preparing to shutdown)\nEventually consistent\nNode is healthy and accepting requests\nNode heartbeat\nHighest version wins\nLast write wins\nMock node discovery for testing\nReplicate to N nodes\nNode discovery trait\nNode information in distributed system\nNode status\nNo replication\nNode is overloaded\nRead from quorum\nWrite to quorum\nReplication metrics\nContext replication strategy\nReplicate based on scope\nSerialized context for network transmission\nStrong consistency (linearizable)\nAcknowledgment of sync\nContext data for sync\nContext synchronization message\nRequest to sync context\nNode is unreachable\nNode address\nAverage replication time\nNode capabilities\nDiscover nodes in the cluster\nFailed replications\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle incoming sync message\nSend heartbeat\nNode ID\nInitialize distributed context\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast heartbeat\nCreate new sync service\nCreate new distributed context\nRefresh node list\nRegister local node\nReplicate context to other nodes\nRun sync service\nGet cluster statistics\nNode status\nSuccessful replications\nSync context from remote node\nTotal replications\nUnregister local node\nContext-aware event\nContext-aware event bus\nEvent bus configuration\nEvent bus statistics\nEvent handler trait\nExample event handler for logging\nCorrelation ID for tracing\nEvent TTL in seconds\nEvent type/name\nGet event types this handler is interested in\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle an event\nHandle event by logging it\nGet event history by context\nGet event history by type\nEvent ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if event is targeted to a specific context\nMaximum concurrent handlers\nMaximum event history size\nEvent metadata\nCreate a new context event\nCreate a new event bus\nEvent payload\nEnable event persistence\nGet handler priority (lower = higher priority)\nPublish an event\nGet event receiver for raw event stream\nSource context\nGet event bus statistics\nSubscribe to events\nTarget contexts (empty for broadcast)\nUnsubscribe from events\nCreate with custom configuration\nSet correlation ID\nAdd target context\nNode in the context hierarchy tree\nStatistics about the context hierarchy\nManages hierarchical context trees\nMetadata for a context node\nAccess count\nAdd a child node\nChild nodes\nThe execution context at this node\nCreate a child context\nCreate a new root context\nNode creation timestamp\nGet all descendant nodes\nFind a node by context ID\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a context by ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast access time\nNode metadata\nCreate a new context node\nCreate a new hierarchical context manager\nRemove a context and all its descendants\nGet all root contexts\nGet context statistics\nNode tags\nUpdate access metadata\nChild value takes precedence\nHow to resolve conflicts when inheriting data\nCopy as-is\nCustom transformation (field name)\nField-level inheritance configuration\nTransformation to apply when inheriting a field\nRules for context inheritance behavior\nTrait for custom inheritance validation\nKeep both in an array\nMerge values (for objects and arrays)\nParent value takes precedence\nAppend a prefix\nExample validator for security fields\nAppend a suffix\nAdd a custom validator\nAdd a field that should always be inherited\nFields that should always be inherited\nApply inheritance rules to create child context data\nAdd conditional inheritance for a field\nFields that are inherited only with specific policies\nSet conflict resolution strategy\nWhether to merge or replace on conflicts\nField-level inheritance configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet maximum inheritance depth\nMaximum inheritance depth\nAdd a field that should never be inherited\nFields that should never be inherited\nCreate new inheritance rules with defaults\nValidate whether a field should be inherited\nTransform functions for inherited fields\nValidate the inherited value\nAdd a field transform\nAccess statistics for a memory region\nType of memory change\nValue was created\nValue was deleted\nNotification of memory changes\nLimits for memory usage\nMemory access permissions\nMemory region with access control\nMemory usage statistics\nNo access\nRead-only access\nRead and write access\nMetadata about a memory region\nManages shared memory regions across the system\nValue was updated\nWrite-only access\nAccess statistics\nType of change\nComponent that made the change\nClean up unused regions\nClear all data in the region\nCreate a new memory region\nCreation time\nDelete a memory region\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a value with permission check\nGet a memory region\nGrant permission to a component\nCheck if component has permission\nRegion identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKey that changed\nNumber of keys\nGet all keys in the region\nLast modified time\nLast read time\nLast write time\nList all regions accessible by a component\nMaximum size per region in bytes\nMaximum number of regions\nMaximum total memory usage in bytes\nRegion metadata\nCreate a new memory region\nCreate a new shared memory manager\nTotal read operations\nRegion that changed\nRemove a value with permission check\nRevoke permission from a component\nRegion scope\nSet a value with permission check\nTotal size in bytes (approximate)\nGet memory usage statistics\nSubscribe to change notifications\nTimestamp of change\nTTL for unused regions\nTotal write operations\nType-safe dependency injection container\nBuilder for dependency injection container\nScoped dependency injection container\nBuild the container\nCreate a scoped container with additional dependencies\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a named instance\nGet a service by type\nGet a service (checks scope first, then parent)\nGet a tool by ID\nGet a tool (delegates to parent)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all registered tool IDs\nCreate a new dependency injection container\nCreate a new builder\nRegister a named instance\nRegister a scoped service\nRegister a service by type\nRegister a tool\nAdd a tool to the container\nConfiguration for creating agents\nBuilder for <code>AgentConfig</code>\nFactory for creating agent instances\nHook that runs during agent creation\nDefault implementation of <code>AgentFactory</code>\nModel configuration for LLM-based agents\nResource limits for agent execution\nAdd a creation hook\nAdd a custom template\nCalled after agent creation\nSet the agent type\nAgent type identifier (e.g., “llm”, “…\nAdd an allowed tool\nSet allowed tools\nTool IDs this agent can use\nCalled before agent creation\nBuild the final <code>AgentConfig</code>\nCreate a new builder for <code>AgentConfig</code>\nCreate an agent from configuration\nCreate an agent from a template\nSet custom configuration\nCustom configuration parameters\nAdd a custom configuration parameter\nSet the agent’s description\nDescription of the agent’s purpose\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available agent templates\nSet maximum execution time\nMaximum execution time in seconds\nSet maximum memory usage\nMaximum memory usage in MB\nMaximum recursion depth\nMaximum tokens\nSet maximum tool calls\nMaximum number of tool calls\nSet the model configuration\nModel configuration (if applicable)\nModel identifier\nUnique name for the agent\nCreate a new agent factory with provider manager\nCreate a new builder with required name\nProvider name (e.g., “openai”, “anthropic”)\nSet resource limits\nResource limits\nAdditional provider-specific settings\nTemperature setting\nValidate agent configuration\nEnable hooks and circuit breaker by default\nSet hook registry for state machine integration\nConfigure default state machine settings\nSpecialized factory for creating agents with custom …\nRegistry for agent factories\nCreate an agent using the default factory\nCreate an agent using a specific factory\nCreate an agent from a template using the default factory\nCreate an agent from a template using a specific factory\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the default factory\nGet a factory by name\nGet the global factory registry\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all registered factory names\nCreate a new factory registry\nCreate a new custom factory wrapping a base factory\nRegister a factory with a given name\nSet the default factory\nAdd a customizer function\nAgent health monitor\nSignificant issues, agent functionality may be degraded\nHealth check trait\nHealth check result\nHealth issue details\nHealth monitor configuration\nHealth status levels\nEverything is operating normally\nResource usage health check\nResponsiveness health check\nBuilt-in health checks State machine health check\nAgent is not responding or completely non-functional\nHealth status cannot be determined\nMinor issues detected, but agent is still functional\nAdd health check\nAgent being checked\nAlert on status changes\nIssue category\nPerform health check\nPerform immediate health check\nGet check type name\nType of health check\nDefault check interval\nDescription of the issue\nDuration of the health check\nEnable health check logging\nEnable continuous monitoring\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current health status\nGet health check history\nGet latest health check result\nUnique check ID\nGet check interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this health check is enabled\nCheck if agent is healthy\nCheck if status indicates agent is operational\nSpecific issues found\nMaximum check history size\nDetailed status message\nAdditional metrics and data\nCheck if status requires immediate attention\nCreate new health monitor for agent\nPossible causes\nGet check priority (lower numbers run first)\nRecommendations for improvement\nSuggested remediation steps\nGet numeric severity (higher is worse)\nIssue severity\nStart continuous health monitoring\nOverall health status\nGet time since last health check\nTimestamp of the check\nThreshold for marking agent as unhealthy\nABOUTME: Lifecycle hook for automatic agent state …\nSettings for event-based persistence\nConfiguration for automatic state persistence\nMetrics for tracking save/restore operations\nState persistence hook for automatic state management\nInterval for automatic saves (None disables auto-save)\nBackoff multiplier for retries (e.g., 2.0 for exponential …\nCheck if auto-save is needed for any agents\nEvent-based save settings\nNumber of failures before circuit breaker opens\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle lifecycle events\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of retry attempts\nGet persistence metrics\nCreate a new state persistence hook\nNon-blocking saves (run in background)\nRegister an agent with the hook for state management\nRestore on resume events\nSave on pause events\nSave on stop events\nUnregister an agent\nABOUTME: Production performance benchmarks for agent …\nABOUTME: Lifecycle event system for agent state machine …\nABOUTME: Agent lifecycle hooks for customizing agent …\nABOUTME: Lifecycle middleware system for agent transitions …\nABOUTME: Resource management for agent lifecycle with …\nABOUTME: Graceful shutdown mechanism for agents with …\nABOUTME: Agent state machine implementation for …\nBenchmark configuration\nBenchmark results\nProduction performance benchmark suite\nProduction-style logging hook - minimal overhead\nProduction-style metrics hook - tracks timing\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current log count\nGet the metrics count\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRun complete benchmark suite\nAgent paused\nAgent resumed\nError information\nAgent error occurred\nEvent statistics\nEvent subscription configuration\nEvent system configuration\nAgent execution completed\nAgent execution started\nGeneric event data\nHealth status\nAgent health check\nAgent initialization completed\nAgent initialization started\nLifecycle event data\nEvent payload data\nEvent listener trait\nLifecycle event system\nLifecycle event types\nDefault logging event listener\nMetrics collection event listener\nAgent recovery completed\nAgent recovery started\nResource information\nResource allocation\nResource deallocation\nAgent state changed\nState transition data\nAgent termination completed\nAgent termination started\nGet event age\nAgent ID that triggered the event\nClear event history\nEvent payload data\nEmit lifecycle event\nEmit error event\nEmit health check event\nEmit state transition event\nEnable detailed logging\nEnable event persistence\nEvent type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet events for specific agent\nGet event history\nGet events by type\nGet event statistics\nGet active subscriptions count\nHandle lifecycle event\nHandle event for logging\nUnique event ID\nCheck if listener is interested in event type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of concurrent listeners\nMaximum number of events in history\nGet listener metadata\nEvent metadata\nCreate new event system\nCreate new lifecycle event\nEvent processing timeout\nEvent source (component that triggered the event)\nSubscribe to events\nSubscribe to specific event types with a closure\nGet event receiver for custom processing\nTimestamp when event occurred\nUnsubscribe from events\nAdd metadata to event\nComposite hook that runs multiple hooks\nLogging hook that logs agent lifecycle events\nMetrics hook that tracks agent creation metrics\nSecurity hook that enforces security policies\nValidation hook that validates agent configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCustom phase\nError handling\nHealth check\nAgent initialization\nLifecycle middleware trait\nMiddleware chain executor\nLifecycle phases that middleware can intercept\nBuilt-in middleware implementations Logging middleware\nMetrics collection middleware\nMiddleware behavior flags\nMiddleware configuration\nMiddleware execution context\nMiddleware execution result\nResource allocation\nResource deallocation\nSecurity validation middleware\nShutdown\nState transition\nTask execution\nAdd middleware to the chain\nCalled after the lifecycle phase executes successfully\nAgent ID being processed\nCheck if middleware should run for given phase\nCalled before the lifecycle phase executes\nRuntime behavior flags\nClear middleware chain\nContinue chain on middleware errors\nMiddleware-specific data\nExecution duration\nEmit events for middleware execution\nEnable detailed logging\nEnable middleware execution\nError message if failed\nExecute middleware chain for a lifecycle phase\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet execution history\nGet middleware count\nExecute middleware error handlers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if middleware is enabled\nMaximum execution time per middleware\nMaximum history size\nAdditional metrics\nMiddleware name\nGet middleware name for identification\nCreate new middleware chain\nCalled if the lifecycle phase encounters an error\nCurrent lifecycle phase\nPhase being processed\nGet execution priority (lower numbers execute first)\nRequest ID for tracing\nExecution start time\nState transition context if applicable\nWhether execution was successful\nCPU cores or percentage\nCustom resource type\nDisk space in bytes\nFile handles\nLLM provider connections\nDefault logging resource hook\nMemory in bytes\nNetwork bandwidth in bytes/sec\nResource allocation\nResource allocation hook trait\nResource limits configuration\nResource manager for agent lifecycle\nResource allocation request\nResource types that can be allocated to agents\nResource usage statistics\nSecurity resource hook that enforces security policies\nThread pool workers\nTool access permissions\nAdd resource allocation hook\nCalled after successful resource allocation\nCalled after resource deallocation\nAgent requesting the resource\nAgent that owns the allocation\nAllocate resources for agent\nWhen allocation was created\nAmount requested\nAmount allocated\nCalled before resource allocation\nCalled before resource deallocation\nDeallocate specific resource\nDeallocate all resources for agent\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all allocations for agent\nGet total number of allocations\nGet global limit for resource type\nGet limit for specific resource type per agent\nGet resource usage statistics\nGlobal resource limits\nUnique request ID\nUnique allocation ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum CPU per agent (percentage, 0-100)\nMaximum disk per agent (bytes)\nMaximum file handles per agent\nMaximum LLM connections per agent\nMaximum memory per agent (bytes)\nMaximum network bandwidth per agent (bytes/sec)\nMaximum thread pool workers per agent\nMaximum tools per agent\nMetadata for the request\nAllocation metadata\nGet resource type name\nCreate new resource manager\nPriority level (0-10, higher is more important)\nType of resource\nType of resource\nMaximum wait time for allocation\nBackground agents that shutdown last\nCritical agents that must shutdown first\nHigh priority agents\nLogging shutdown hook\nLow priority agents\nNormal priority agents\nDefault resource cleanup hook\nShutdown configuration\nShutdown coordinator manages graceful shutdown of agents\nShutdown hook trait\nShutdown priority levels\nShutdown request\nShutdown result\nAdd shutdown hook\nCalled after shutdown completes (success or failure)\nAgent to shutdown\nAgent ID\nCalled before shutdown begins\nDefault shutdown timeout\nTime taken for shutdown\nEmergency shutdown all agents\nEmergency shutdown timeout\nEnable detailed logging\nError message if shutdown failed\nFinal agent state\nForce shutdown if graceful fails\nWhether shutdown was forced\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet active shutdowns\nGet shutdown history\nUnique request ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if agent is shutting down\nMaximum concurrent shutdowns\nMaximum shutdown history size\nMetadata for the shutdown request\nCreate new shutdown coordinator\nCalled during shutdown to perform custom cleanup\nWhether to preserve agent state\nGet hook priority (lower numbers run first)\nShutdown priority\nReason for shutdown\nRequest ID\nResources that were cleaned up\nShutdown single agent\nShutdown multiple agents by priority\nGet emergency shutdown receiver\nWhether shutdown was successful\nMaximum time to wait for graceful shutdown\nAgent lifecycle states\nAgent state machine\nDefault state handlers\nError state, recovery needed\nResource allocation, tool loading in progress\nTemporarily suspended, state preserved\nFully initialized, ready for execution\nAttempting recovery from error\nActively executing tasks\nState machine context for transitions\nTrait for handling state transitions\nAgent state machine configuration\nFeature flags for state machine behavior\nState machine metrics\nState transition metadata\nFully shut down, resources released\nGraceful shutdown in progress\nFresh agent, no resources allocated\nAdd custom state handler\nEnable automatic recovery from error states\nCheck if state allows execution\nCheck if state allows pausing\nCheck if state allows termination\nValidate if transition to target state is allowed\nCancel an ongoing state transition\nCircuit breaker configuration\nGet current state\nCreate state machine with default configuration\nEnable circuit breaker protection for state transitions\nEnable hook execution during state transitions\nEnable state transition logging\nEnable state persistence\nEnter the state\nTrigger error state\nExit the state\nFeature flags for state machine behavior\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet hook executor metrics (if hooks are enabled)\nGet last error message\nGet state machine metrics\nGet recovery attempt count\nGet transition history\nHandle state-specific operations\nCheck if hooks are enabled\nHook executor configuration (if hooks enabled)\nTimeout for initialization process\nInitialize agent (transition from Uninitialized to Ready)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if state indicates error condition\nCheck if agent is healthy\nCheck if state indicates healthy operation\nCheck if agent is in specific state\nMaximum number of recovery attempts\nMaximum time allowed for state transitions\nGet state-specific metadata\nCreate new state machine for agent\nPause execution\nAttempt recovery from error state\nResume execution\nStart execution (transition to Running)\nStop execution (transition to Ready)\nTerminate agent (graceful shutdown)\nTimeout for graceful termination\nTransition to new state\nTransition to new state with reason\nCreate config with custom hook executor configuration\nCreate new state machine with hook support\nCreate config with hooks enabled\nABOUTME: Alerting framework for monitoring agent health …\nABOUTME: Event logging system for agent activities …\nABOUTME: Health monitoring for agents and their components …\nABOUTME: Agent metrics collection and reporting ABOUTME: …\nABOUTME: Performance monitoring and profiling for agents …\nABOUTME: Distributed tracing for agent operations ABOUTME: …\nAlert is acknowledged\nAlert is active\nAlert instance\nAlert conditions\nAlert configuration\nContext for alert evaluation\nTrait for custom alert evaluation\nAlert manager for managing alerts and rules\nAlert rule configuration\nAlert severity levels\nAlert state\nAlert statistics\nConsole notification channel (for testing)\nCritical alert\nCustom condition with evaluation function\nEmergency alert\nEqual\nError rate condition\nGreater than\nGreater than or equal\nHealth status condition\nInformational alert\nLess than\nLess than or equal\nMetric threshold condition\nNot equal\nTrait for notification channels\nAlert is resolved\nAlert is silenced\nThreshold operators\nWarning alert\nAcknowledge the alert\nAcknowledge an alert\nNumber of active alerts\nAgent ID\nAgent ID\nAverage resolution time\nNotification channels\nGet color code for severity\nCondition that triggers the alert\nCool down period before re-triggering\nDefault cooldown period\nAlert description\nRule description\nAdditional details\nGet alert duration\nWhether the rule is enabled\nEvaluate if alert should be triggered\nEvaluate a value against a threshold\nEvaluate all rules\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet active alerts\nGet alert statistics\nCurrent health status\nAlert history retention\nAlert ID\nRule ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum active alerts\nCurrent metrics\nRule name\nCreate a new alert manager\nCreate a new alert\nNotification retry attempts\nSend notification for an alert\nRecent performance violations\nRegister a notification channel\nRegister an alert rule\nResolve the alert\nResolve an alert\nTimestamp when alert was resolved (if applicable)\nRule that triggered the alert\nAlert severity\nAlert severity\nCount by severity\nSilence the alert\nAlert state\nAlert title\nTotal alerts triggered\nTimestamp when alert was triggered\n<code>ToString::to_string</code>, but without panic on OOM.\nTimestamp when alert was last updated\nAdd detail to the alert\nComponent filter\nConsole log exporter\nDebug level\nError\nError details for log events\nTrait for filtering events\nEvent logger for managing log events\nEvent statistics\nFatal/Critical\nInformational\nLevel filter\nLog event\nTrait for exporting log events\nLog levels\nRate limiting filter\nTrace level - most verbose\nWarning\nAdd a log exporter\nAdd an event filter\nAgent ID\nConvert to string representation\nBuffer utilization percentage\nClear the event buffer\nComponent/module name\nCount by component\nAdditional context\nLog a debug event\nLog an error event\nError details\nNumber of error events\nError type/category\nExport a log event\nExport a log event to console\nLog a fatal event\nStructured fields\nPanics\nFormat as a log line\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet events by level\nGet events by trace ID\nGet current log level\nGet recent events\nGet event statistics\nEvent ID\nLog an info event\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLog level\nCount by log level\nLog an event\nLog message\nError message\nCreate a new event logger\nCreate a new log event\nCreate a new component filter\nCreate a new level filter\nCreate a new rate limit filter\nSet minimum log level\nCheck if an event should be logged\nCheck if this level should be logged given a minimum level\nSpan ID (for correlation)\nStack trace (if available)\nTimestamp\nTotal number of events\nLog a trace event\nTrace ID (for correlation)\nLog a warning event\nAdd error details\nAdd a field\nAdd trace context\nAgent health check implementation\nComponent health information\nComponent is degraded but still functional\nHealth check trait\nHealth check result\nHealth indicator for a specific aspect\nHealth monitor for managing health checks\nHealth status levels\nComponent is healthy and functioning normally\nComponent is unhealthy and may not be functioning\nComponent health is unknown\nCalculate overall status from indicators\nPerform all health checks\nCheck duration\nPerform a health check\nIndividual component health\nCreate a degraded indicator\nOptional details\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a healthy indicator\nIndividual health indicators\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the status indicates the component is operational\nLast check time\nTimestamp of last health check\nOptional message\nGet component metadata\nComponent metadata\nName of the indicator\nCreate a new health monitor\nCreate a new agent health check\nCreate a new health check result\nOverall system health\nRegister a health check\nConvert to a numeric score (0-100)\nStart periodic health monitoring\nCurrent status\nOverall status\nGet a summary of the health check\nTimestamp of the check\nTotal check duration\nCreate an unhealthy indicator\nAdd detail to the indicator\nConfigure maximum CPU usage\nConfigure maximum response time\nConfigure minimum memory requirement\nConfigure minimum success rate\nAgent-specific metrics\nCounter metric\nCounter - monotonically increasing value\nCounter value\nGauge metric\nGauge - value that can go up and down\nGauge value\nHistogram metric\nHistogram - distribution of values\nHistogram with buckets\nTrait for accessing metric values\nLabel for metrics\nMetric registry for managing all metrics\nType of metric\nMetric value\nSummary - statistical summary of values\nSummary with quantiles\nTimer for measuring durations\nAdd to the gauge\nAdd a custom metric\nAgent ID\nCollect all metrics\nComplete a request\nCPU usage percentage\nCustom metrics\nDecrement the gauge\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current value\nGet the current value\nGet the current histogram data\nGet a metric\nGet or create agent metrics\nIncrement the counter\nIncrement the gauge\nIncrement by a specific amount\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMemory usage\nGet the metric type\nLabel name\nCreate a new timer\nCreate a new counter\nCreate a new gauge\nCreate a new histogram with given buckets\nCreate new agent metrics\nCreate a new metric registry\nObserve a value\nRecord a tool invocation\nRegister a metric\nRequest duration histogram\nCurrent active requests\nNumber of failed requests\nNumber of requests processed\nReset the metric\nReset the counter\nReset all metrics\nSet the gauge value\nStart timing a request\nStop the timer and record the duration\nSubtract from the gauge\nTool invocations\nUpdate resource usage\nGet the current value\nLabel value\nCreate a histogram with default buckets\nCritical\nInformational\nPerformance monitor for tracking agent performance\nPerformance report over a time period\nPerformance snapshot at a point in time\nPerformance thresholds for alerting\nPerformance threshold violation\nResource usage snapshot\nViolation severity levels\nWarning\nActive requests\nAvailability (percentage)\nAverage CPU usage\nAverage memory usage\nAverage response time (milliseconds)\nAverage response time\nCheck if performance is within thresholds\nCPU usage percentage (0-100)\nCurrent value\nEnd time of the report period\nError rate (percentage)\nTotal failed requests\nFile descriptor count (Unix)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a report from snapshots\nGenerate a performance report\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum CPU usage percentage\nMaximum memory usage bytes\nMaximum response time milliseconds\nMemory usage in bytes\nMetric name\nMinimum availability percentage\nMinimum throughput (req/s)\nNetwork bytes received\nNetwork bytes sent\nCreate a new performance monitor\n95th percentile response time\n99th percentile response time\nPeak CPU usage\nPeak memory usage\nQueue depth\nRequest rate (requests per second)\nResource usage\nSeverity\nCreate a resource usage snapshot\nStart performance monitoring\nStart time of the report period\nGenerate a summary string\nTake a performance snapshot\nThread count\nThreshold value\nThroughput (requests per second)\nTimestamp of the snapshot\nTotal requests processed\nSet custom thresholds\nSpan was cancelled\nSimple console trace exporter\nSpan completed with error\nSpan is still in progress\nSpan completed successfully\nSpan context for propagation\nHandle to an active span\nSpan status\nTrace analysis utilities\nTrace collector for managing spans\nEvent that occurred during a span\nTrait for exporting traces\nTrace span representing a unit of work\nTrace statistics\nGet active span count\nAdd baggage item\nAdd an event to the span\nAdd an event to the span\nAdd a trace exporter\nAdd a tag to the span\nAdd a tag to the span\nEvent attributes\nBaggage items for propagation\nCreate a child span from this context\nClear all completed spans\nComplete the span\nComplete the span as cancelled\nComplete the span with error\nComplete the span successfully\nCalculate critical path in a trace\nDuration (if completed)\nGet span duration in milliseconds\nEnd time (if completed)\nNumber of error spans\nError rate percentage\nEvents that occurred during the span\nExport a completed span\nPanics\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from a span\nGet all traces\nGet completed spans for a trace\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEvent name\nCreate a new trace collector\nCreate a new trace event\nCreate a new child span\nCreate a new root span\nOperation name\nParent span ID (if any)\nService name\nService name\nDuration by service\nTotal number of spans\nSpan ID\nSpan ID\nStart a new span\nStart time\nStatus\nTags/labels\nEvent timestamp\nTotal duration of all spans\nTrace ID (shared across all spans in a trace)\nTrace ID\nCalculate trace statistics\nAdd an attribute to the event\nABOUTME: Agent categorization and tagging system ABOUTME: …\nABOUTME: Agent discovery and search capabilities ABOUTME: …\nABOUTME: Enhanced metadata management for agents ABOUTME: …\nABOUTME: Persistence integration for agent registry …\nABOUTME: Agent registration mechanism with validation and …\nABOUTME: Core registry types and traits ABOUTME: Defines …\nAgent category definition\nTag for flexible agent labeling\nCapability tag\nCategory builder for hierarchical categories\nCategory manager for organizing agents\nCustom tag\nEnvironment tag\nFeature tag\nPredefined agent categories\nType of agent tag\nVersion tag\nAdd a category\nAdd tag to agent\nGet all standard categories\nAssign agent to category\nBuild category\nCommunication agents\nData processing agents\nSet description\nDescription\nFind agents by tag\nFind agents in category\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet agent categories\nGet agent tags\nGet category by ID\nGet category hierarchy\nCategory ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all categories\nLLM-based agents\nAdd metadata\nCategory metadata\nMonitoring agents\nSet name\nDisplay name\nTag name\nCreate new category manager\nCreate new category builder\nSet parent category\nParent category ID (for hierarchy)\nRemove agent from category\nRemove tag from agent\nResearch agents\nSecurity agents\nTag type\nTool-using agents\nTag value (optional)\nWorkflow orchestration agents\nAscending order\nSort by average execution time\nSort by creation date\nDescending order\nAgent discovery\nSort by execution count\nSort by name\nContext for agent recommendations\nSearch builder for fluent API\nAdvanced search criteria\nSearch result with relevance scoring\nFields to sort by\nSort order\nSort by success rate\nSort by last update\nBasic query from <code>AgentQuery</code>\nBuild search criteria\nCache extended metadata\nSearch by capabilities\nExtended metadata if available\nFind similar agents\nPreviously used agents (for collaborative filtering)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet recommended agents based on usage patterns\nSearch by health state\nFilter by category\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet result limit\nMatch reasons\nSet maximum execution time\nMaximum execution time\nMaximum number of recommendations\nMaximum response time requirement\nAgent metadata\nSet minimum success rate\nMinimum success rate\nMinimum success rate requirement\nCreate new discovery instance\nCreate new search builder\nSet sort order\nRelevance score (0.0 - 1.0)\nRequired capabilities\nSearch agents with advanced criteria\nSet sort field\nSort options\nSort order\nRequire capability\nFilter by name\nFilter by status\nFilter by type\nAgent capability declaration\nAgent dependency specification\nType of agent capability\nCritical\nCustom capability\nDegraded but operational\nType of agent dependency\nDeployment information\nDevelopment/testing only\nError\nExtended agent metadata with versioning and relationships\nBuilder for extended metadata\nIndividual health check result\nHealth issue/warning\nHealth state enumeration\nAgent health status\nHealthy and operational\nInformational\nIssue severity levels\nLearning/adaptation\nMetadata manager for rich metadata operations\nMulti-agent communication\nPeer dependency\nRecommended but not required\nHard requirement\nResource requirements specification\nTool usage capability\nUnhealthy/failing\nUnknown state\nAgent version information\nWarning\nWorkflow orchestration\nAdd capability\nAdd capability\nAdd dependency\nAgent ID or type\nBuild extended metadata\nBuild timestamp\nCapabilities and features\nCapability type\nChange log entry\nHealth checks\nIssue code\nGit commit hash if available\nConfiguration for the capability\nDeployment configuration\nCore metadata\nCPU cores required\nDependencies on other agents\nDependency type\nDeployment timestamp\nSet deployment info\nDeployment information\nWhen issue was detected\nCheck duration in ms\nWhether capability is enabled\nDeployment environment\nFind agents by capability\nFind dependent agents\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new builder from core metadata\nRetrieve extended metadata\nGPU required\nHealth status\nHost information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIssues/warnings\nLast health check\nCheck message\nIssue message\nMinimum memory in MB\nCapability name\nCheck name\nNetwork bandwidth in Mbps\nCreate new metadata manager\nWhether dependency is optional\nCheck result\nContainer/process ID\nRecommended memory in MB\nSuggested remediation\nSet resource requirements\nResource requirements\nIssue severity\nOverall health state\nStorage requirements in MB\nStore extended metadata\nUpdate health status\nUpdate version info\nSet version info\nVersion information\nSemantic version (e.g., “1.2.3”)\nRequired version range\nPersistent agent registry using llmspell-storage backend\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad from snapshot (faster than loading individual entries)\nCreate new persistent registry with given storage backend\nPersist current state\nAgent registrar for managing registration process\nComposite registration hook\nAgent registration builder\nRegistration lifecycle hooks\nAgent registration options\nAdd a single category\nAdd a hook\nCalled after successful registration\nCustom agent ID (generated if not provided)\nSet auto-start behavior\nAuto-start agent after registration\nCalled before registration\nBuild registration options\nInitial categories\nCustom metadata\nSet heartbeat monitoring\nEnable heartbeat monitoring\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new registration builder\nCreate new registrar\nCreate new composite hook\nCalled on registration failure\nRegister agent with default options\nRegister agent with custom options\nBatch register multiple agents\nUnregister agent\nAdd categories\nSet custom agent ID\nAdd custom metadata\nAgent is active and ready\nAgent metadata for registry tracking\nAgent performance metrics\nQuery parameters for agent discovery\nAgent registry trait\nAgent status in the registry\nAgent has encountered an error\nIn-memory agent registry implementation\nAgent is initializing\nAgent is paused\nAgent is stopped\nAgent type\nAverage execution time in milliseconds\nCategories/tags\nFilter by categories\nGet total agent count\nCreation timestamp\nCustom metadata\nDescription\nError count\nTotal execution count\nCheck if agent exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet agent by ID\nGet agent metadata\nAgent heartbeat\nUnique agent ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast error message\nLast execution time\nPagination limit\nList all agent IDs\nPerformance metrics\nAgent name\nFilter by name (substring match)\nCreate new in-memory registry\nPagination offset\nQuery agents with filters\nRegister a new agent\nAgent status\nFilter by status\nSuccess rate (0.0 - 1.0)\nFilter by type\nUnregister an agent\nUpdate agent metadata\nUpdate agent metrics\nUpdate agent status\nLast updated timestamp\nCustom boundary with specific permissions\nIsolated state accessor that enforces permissions\nExtension trait for agents to use isolated state\nIsolation boundary types\nAllow read-only access to shared scopes\nAllow full access to shared scopes\nConfiguration for shared state scopes\nState access audit entry\nAccess control system for state operations\nAgent state isolation manager\nState permission types\nState scope for isolation\nComplete isolation - no cross-agent access\nCheck if an agent can access a specific state scope\nClear old audit log entries\nCreate a shared scope for multiple agents\nDelete state with isolation check\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet state with isolation check\nGet audit log entries\nGrant specific permission to an agent for a scope\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet isolated state accessor\nGet isolation manager (to be implemented by agent)\nList keys with isolation check\nRemove a shared scope\nRevoke all permissions for an agent in a scope\nSet state with isolation check\nSet isolation boundary for an agent\nGet state manager (to be implemented by agent)\nState manager holder trait for concrete implementations\nExtension trait for agents to add state persistence …\nTool usage statistics\nCreate a persistent state representation from current …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad the agent’s state from storage\nRestore agent state from persistent state\nSave the agent’s current state\nSet the state manager for this agent\nGet the state manager for this agent\nGet tool usage statistics (optional override)\nBroadcast - one agent publishes, all subscribed agents …\nCollaborative - multiple agents can read/write\nHierarchical - parent-child agent relationships\nPipeline - data flows through agents in sequence\nRequest-Response - one agent requests, another responds\nAccessor for shared state operations\nExtension trait for agents to use shared state\nShared state channel for agent communication\nState sharing patterns\nMessage in a shared state channel\nState sharing manager for controlled data exchange\nClean up expired channels\nCreate a new shared state channel\nCreate a collaborative workspace for multiple agents\nCreate a data pipeline between agents\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet new messages\nGet messages for an agent from their subscribed channels\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcess next stage in a pipeline\nPublish a message\nPublish a message to a channel\nReply to a message in a channel\nGet shared state accessor\nGet sharing manager (to be implemented by agent)\nSubscribe to a channel\nSubscribe an agent to a channel\nUnsubscribe from a channel\nUnsubscribe an agent from a channel\nBase template trait and factory ABOUTME: Base template …\nCreate and register all built-in templates\nTemplate customization API ABOUTME: Template customization …\nMonitor agent template ABOUTME: Monitor Agent template for …\nOrchestrator agent template ABOUTME: Orchestrator Agent …\nPrelude for convenient imports\nTemplate schema definitions ABOUTME: Template definition …\nTool agent template ABOUTME: Tool Agent template for …\nTemplate validation utilities ABOUTME: Template validation …\nBase trait for all agent templates\nTemplate factory for managing and instantiating templates\nTemplate instantiation parameters\nTemplate instantiation result\nCreated agent instance\nAgent ID for the new instance\nApplied configuration\nApplied parameter values\nApply default values to parameters\nGet template category\nClone template (for factory pattern)\nGet template complexity\nCustom configuration overrides\nEnvironment variables for the agent\nEvent system for lifecycle management\nFind templates by keyword\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet template by ID\nGet template schemas\nGet all templates in category\nCheck if template exists\nCreate agent instance from template\nInstantiate template by ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet all template IDs\nCreate new instantiation parameters\nCreate new template factory\nGet optional tools for this template\nParameter values for template customization\nRegister a template\nGet required tools for this template\nResource manager for the agent\nGet template schema\nCheck if template supports a specific capability\nGet template count\nTemplate schema used\nUnregister template\nValidate custom constraints (override in implementations)\nValidate individual parameter value\nValidate instantiation parameters\nValidate template parameters without instantiation\nAdd config override\nAdd environment variable\nSet event system\nAdd parameter value\nSet resource manager\nBasic template implementation for programmatically created …\nTemplate builder for creating templates programmatically\nTemplate customization options\nTemplate customizer for applying customizations\nTemplate mixin for adding common functionality\nAdd a capability requirement\nAdd configuration\nAdd a parameter to the template\nAdd a tool dependency\nAdditional capabilities\nAdditional parameters to add\nAdditional tool dependencies\nAdd optional boolean parameter with default\nBuild the customized template\nBuild into a basic template\nAdd capability\nAdd configuration\nConfiguration additions\nCreate a pattern-validated string parameter\nCreate a range-constrained numeric parameter\nCreate a custom parameter with validation\nAdd enum parameter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd optional integer parameter with default\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetadata overrides\nCreate new customizer for a template\nCreate new template builder\nOverride metadata\nOverride an existing parameter\nOverride resource requirements\nOverride a tool dependency\nAdd parameter\nParameter overrides (update existing parameters)\nResource requirement overrides\nSet resource requirements\nAdd required string parameter\nAdd tool dependency\nTool dependency overrides\nAdd caching\nAdd logging capabilities\nAdd metrics collection\nAdd rate limiting\nAdd retry logic\nMonitor other agents\nAlert severity levels\nMonitor application services\nMonitor custom metrics\nMonitor databases\nMonitor log files and events\nMonitor Agent configuration\nMonitor Agent template implementation\nFeature flags for monitoring behavior\nMonitoring scope types\nMonitor network endpoints\nMonitor system resources (CPU, memory, disk, network)\nAlert thresholds configuration\nCreate application monitor template for application …\nEnable alerting\nEnable health checks\nEnable log monitoring\nEnable metrics collection\nFeature flags for monitoring behavior\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHealth check timeout in seconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate lightweight monitor template for basic monitoring\nLog file patterns to monitor\nMaximum number of alerts per minute\nMaximum concurrent monitoring tasks\nMetrics retention period in seconds\nMonitoring interval in seconds\nMonitoring scopes this agent covers\nCreate new Monitor Agent template\nAlert severity mapping\nCreate system monitor template focused on system resources\nCreate Monitor Agent template with custom configuration\nUse conditional logic for task execution\nCustom orchestration strategy\nEvent-driven orchestration\nOrchestration strategy types\nOrchestrator Agent configuration\nOrchestrator Agent template implementation\nExecute tasks in parallel where possible\nPipeline-based execution\nExecute tasks sequentially\nAgent discovery patterns\nDefault orchestration strategy\nEnable agent health monitoring\nEnable workflow rollback on failure\nEnable workflow persistence\nCreate enterprise orchestrator template for complex …\nCreate event-driven orchestrator template\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHealth check interval in seconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum concurrent workflows\nMaximum number of managed agents\nWorkflow retry configuration\nMaximum workflow execution time in seconds\nCreate new Orchestrator Agent template\nCreate simple orchestrator template for basic workflow …\nCreate Orchestrator Agent template with custom …\nWorkflow templates directory\nAdvanced templates with extensive configuration options\nAgent reference\nAgents that analyze data or provide insights\nArray of values\nSimple templates with minimal configuration\nBoolean parameter\nAgent capability requirement\nAgents that handle communication tasks\nTemplate complexity level\nCustom category defined by user\nCustom type\nCustom validation rule\nEnum with defined values\nExpert-level templates requiring deep understanding\nFloating point parameter\nInteger parameter\nIntermediate templates with moderate customization\nMaximum length for strings/arrays\nMaximum value for numeric types\nMinimum length for strings/arrays\nMinimum value for numeric types\nAgents that monitor systems or other agents\nObject with defined schema\nAgents that orchestrate other agents or workflows\nParameter validation constraints\nParameter definition for template customization\nSupported parameter types\nRegular expression pattern for strings\nResource requirements for the template\nTemplate schema version for compatibility tracking\nString parameter\nTemplate category for organizing templates\nTemplate metadata\nComplete template definition schema\nTool dependency specification\nAgents that primarily execute tools\nTool reference\nAgents that provide utility functions\nInitial template schema version\nAlternative tools that can satisfy this dependency\nTemplate author/organization\nRequired capabilities\nTemplate category\nComplexity level\nConfiguration for this tool\nValidation constraints\nCPU requirements as percentage (0-100)\nWhether this capability is critical\nDefault value (if any)\nHuman-readable description\nTemplate description\nDisk space requirements in bytes\nDocumentation URL\nExamples of valid values\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet parameter by name\nGet tool dependency by name\nTemplate unique identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTemplate keywords for discovery\nTemplate license\nMaximum execution time in seconds\nMemory requirements in bytes\nTemplate metadata\nMinimum capability level required\nParameter name\nTool name or identifier\nCapability name\nTemplate display name\nNetwork bandwidth requirements in bytes/sec\nCreate a new template schema\nGet all optional parameters with defaults\nParameter type information\nTemplate parameters\nRepository or source URL\nWhether this parameter is required\nWhether this tool is required or optional\nGet all required parameters\nCheck if template has required tool\nResource requirements\nSchema version for compatibility\nTemplate-specific configuration\nTool dependencies\n<code>ToString::to_string</code>, but without panic on OOM.\nDescription of how this capability is used\nValidate the template schema\nValidation rules\nTool version requirement (optional)\nTemplate version\nAdd a capability requirement\nAdd template configuration\nAdd a parameter to the template\nSet resource requirements\nAdd a tool dependency\nAdd validation rule\nTool Agent configuration\nTool Agent template implementation\nCreate batch processing tool agent template\nEnable tool result caching\nEnable tool error recovery\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate lightweight tool agent template\nMaximum concurrent tool executions\nMaximum number of tools to load\nCreate new Tool Agent template\nCreate specialized tool agent template\nCustom tool configurations\nTool discovery patterns\nTool execution timeout in seconds\nCreate Tool Agent template with custom configuration\nCircular dependency\nConstraint violation\nCustom error\nCustom warning\nDependency not found\nDeprecated feature\nIncompatible configuration\nInvalid value\nMissing optional feature\nMissing required field\nPerformance concern\nResource limit exceeded\nSecurity consideration\nSuboptimal configuration\nTemplate validator for comprehensive validation\nValidation error types\nValidation result with detailed information\nValidation rule trait\nValidation warning types\nAdd an error\nAdd metadata\nAdd custom validation rule\nAdd a warning\nAnalyze template for best practices\nValidation errors\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck if there are any issues (errors or warnings)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether validation passed\nValidation metadata\nCreate new validator\nRegister available tool\nRegister multiple tools\nSet system resource limits\nCreate a successful validation result\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nValidate template instantiation parameters\nValidate schema\nValidate template schema\nValidation warnings\nABOUTME: Agent testing framework providing utilities for …\nABOUTME: Mock implementations for testing agent …\nPrelude for convenient imports in tests\nABOUTME: Pre-defined test scenarios for common agent …\nABOUTME: Utility functions and helpers for agent testing …\nTest assertions for agent behavior\nLifecycle event recorder for testing\nResource usage tracking\nTest configuration for agent testing\nFeature flags for testing behavior\nTest harness for running agent tests\nRecorded interaction during testing\nPerformance metrics collected during testing\nTest result capturing execution details\nTest builder for constructing test scenarios\nNumber of external API calls\nAssert execution time is within bounds\nAssert that agent output contains expected text\nAssert resource usage is within limits\nAssert agent state transitions\nAssert that agent made expected tool calls\nAverage response time\nClear recorded events\nExecution context\nTotal CPU time used\nEnable debug logging\nSet scenario description\nTest execution duration\nError message if failed\nExecute agent and record interaction\nTotal number of executions\nAdd expected output assertion\nNumber of failed executions\nFeature flags for testing behavior\nFind events of specific type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet recorded events\nInput provided\nRecorded interactions (moved out of test harness)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum response time\nCustom test metadata\nPerformance metrics\nMinimum response time\nCreate new test harness with default factory\nCreate new test scenario\nCreate new event recorder\nOutput received\nWhether the test passed\nPeak memory usage in bytes\nEnable performance profiling\nRecord all interactions\nRecord resource usage\nResource usage\nBuild and run the test scenario\nRun a test with the given agent configuration\nNumber of successful executions\nMaximum test duration before timeout\nTimestamp of interaction\nNumber of tool calls made\nValidate resource usage\nSet agent configuration\nCreate test harness with custom factory\nAdd test input\nSet setup function\nSet teardown function\nMock agent implementation for testing\nBuilder for creating mock agents with specific behaviors\nConfiguration for mock agent behavior\nPre-programmed response for mock agent\nMock tool implementation for testing\nTest doubles for various agent types\nAdd response to mock agent\nAdd state transition\nBase agent configuration\nSet agent type\nBuild the mock agent\nSimulated processing delay\nCreate a simple echo agent\nEvents to emit\nPanics\nPanics\nGet execution count\nGet execution count\nCreate an agent that always fails\nFailure message if <code>should_fail</code> is true\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize the agent\nInput pattern to match (substring match)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet last context\nGet last input\nMetadata to include\nCreate new mock agent\nCreate new mock tool\nCreate new mock agent builder\nPre-programmed responses\nSet execution delay\nSet event sender for lifecycle events\nSet failure mode\nSet failure mode\nSet response for specific input\nWhether to simulate failures\nCreate a slow agent\nStart the agent\nState transitions to simulate\nCreate a stateful agent\nStop the agent\nTerminate the agent\nResponse text\nCreate an agent with tool capabilities\nTool calls to simulate\nTool calls to include\nSet failure mode\nSet delay\nSet resource limits\nAdd response\nAdd state transition\nAdd allowed tool\nAdd response with tool calls\nOutput should contain text\nShould result in error\nOutput should exactly match\nExpected output patterns\nConfiguration for a test scenario\nResult of running a scenario\nScenario runner\nState should change to\nShould succeed\nIndividual test result\nCommon test scenarios\nTool should be called\nSimple echo scenario\nError handling scenario\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerformance scenario\nRun a scenario against an agent\nState transition scenario\nTool invocation scenario\nValidate output against expectation\nPerformance measurement utilities\nTest assertions\nTest agent configurations\nTest data generators\nTest environment setup\nTest report generator\nAdd test result\nAssert approximately equal with tolerance\nAssert duration is within range\nBasic agent configuration\nClean up test environment\nGenerate complex input\nGenerate execution context with metadata\nEnd measurement and log\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate agent input with media\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResource-limited agent configuration\nCreate new report\nGet pass rate\nGenerate random agent input\nSet up test environment\nStart measuring\nGenerate summary\nTool-enabled agent configuration\nRun with timeout\nContext enhancement options\nRules for how context data should be inherited in nested …\nSerializable context state\nInherit but create a copy (modifications don’t affect …\nCustom inheritance logic\nInherit value from parent context\nDo not inherit, start fresh\nInherit and share (modifications affect parent)\nContext manager for handling multiple tool execution …\nEnhanced execution context for tool operations that …\nRecord of tool execution within a context\nGet the base execution context\nGet context count\nGet the context ID\nCreate a child context for nested tool execution\nCreate and register a new context\nDefault inheritance rule for new data\nExecution duration\nWhether to enable context inheritance\nWhether to enable shared data across tools\nExport context state for serialization\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all data as a combined view\nGet an existing context\nGet execution history\nGet inheritance rule for a data key\nGet the last executed tool\nGet shared data\nGet tool-specific data\nCheck if a tool has been executed in this context\nImport context state from serialization\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all context IDs\nMaximum number of execution records to keep\nTool-specific metadata\nCreate a new tool execution context\nCreate a new context manager\nParameters passed to the tool\nRecord tool execution\nRemove a context\nOutput or error message\nSet inheritance rule for a data key\nSet shared data that can be accessed by all tools\nSet tool-specific data\nExecution start time\nWhether execution was successful\nConvert to base <code>ExecutionContext</code> for tool invocation\nName of the tool that was executed\nWhether to track tool execution history\nCreate a new tool execution context with options\nCreate a new context manager with options\nContext for tool recommendations\nHigh-level tool discovery that provides convenient APIs …\nSearch criteria for finding tools with multiple constraints\nFilter by required capabilities\nFilter by tool categories\nCustom query parameters\nGet tools by multiple categories\nFind tools by category\nFind tools that match multiple criteria\nFind tools by security level\nFind tools by text search in name/description\nFind tools with specific capability\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all available tools\nGet recommended tools based on context\nGet tool information by name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum security level allowed\nMaximum security level allowed\nMinimum security level required\nCreate a new tool discovery instance\nCreate new empty search criteria\nCreate new recommendation context\nMark as performance critical\nWhether performance is critical\nType of task being performed\nText search in tool names/descriptions\nCheck if a tool exists\nPrevious tool usage history\nUser preferences\nAdd a capability filter\nAdd a category filter\nAdd custom filter\nSet maximum security level\nSet maximum security level\nSet minimum security level\nAdd user preference\nSet task type\nAdd text search filter\nAdd usage history\nAbort operation\nAgent wrapping failed\nTry to recover using suggested actions\nContinue with best effort\nCollect all errors and report at end\nTool composition failed\nContext propagation failed\nCustom recovery strategy\nTool dependency resolution failed\nTool discovery failed\nError callback function type\nContext for error handling and recovery\nRecord of an error that occurred\nError recovery strategy\nError severity levels\nFail immediately on any error\nTool invocation failed\nParameter validation failed\nSuggested recovery actions for errors\nRecovery callback function type\nTool registration failed\nRequest user intervention\nResource limit exceeded\nRetry with same parameters\nRetry with modified parameters\nSecurity constraint violation\nSkip this step and continue\nTool state corruption\nError that occurred during a composition step\nTool timeout occurred\nError handler for tool integration operations\nComprehensive error type for tool integration operations\nTool not found in registry\nUse default value\nUse fallback tool\nTool or component involved\nAdditional context data\nExecution context identifier\nError message\nThe error that occurred\nGet error count for this context\nError history for this context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a tool integration error\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to <code>LLMSpellError</code>\nCheck if error is recoverable\nCreate new error handler\nCreate new error context\nOperation being performed\nRecord an error in the context\nWhether the error is recoverable\nRecovery action taken\nError recovery strategy\nWhether recovery was successful\nSuggested recovery actions\nGet error severity level\nStep identifier\nGet successful recovery count\nGet suggested recovery actions\nWhen the error occurred\nTool name that failed\n<code>ToString::to_string</code>, but without panic on OOM.\nAdd context data\nSet default recovery strategy\nSet recovery strategy\nSet tool-specific recovery strategy\nConfiguration for tool invocation behavior\nFeature flags for tool invocation behavior\nMetrics collected during tool invocation\nResult of a tool invocation with metadata\nTool invocation wrapper that provides validation, error …\nValidation error with context\nActual value that failed\nGet configuration\nCustom validation rules\nWhether to enable debug logging\nWhether to sandbox tool execution\nTime taken to execute the tool\nExpected type or value\nFeature flags for tool invocation behavior\nField that failed validation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke a tool with full validation and error handling\nInvoke a tool with basic error handling (convenience …\nMaximum execution time per tool call\nMaximum memory usage per tool call (in bytes)\nMemory used during execution (if tracked)\nError message\nExecution metrics\nCreate a new tool invoker with the given configuration\nCreate a new configuration with default values\nCreate a new validation error\nThe actual output from the tool\nTool security level used\nWhether the execution was successful\nWhether execution timed out\nWhether to track execution metrics\nUpdate configuration\nWhether to validate parameters before invocation\nNumber of validation errors\nParameter validation time\nAny warnings generated during execution\nAdd actual value information\nEnable or disable debug logging\nAdd expected value information\nSet maximum execution time\nSet maximum memory usage\nEnable or disable metrics tracking\nEnable or disable parameter validation\nEnable or disable sandboxing\nTool manager that provides concrete implementation of tool …\nConfiguration for <code>ToolManager</code> behavior\nClear caches\nCompose multiple tools into a workflow\nGet configuration\nDiscover tools based on query criteria\nWhether to cache availability checks\nWhether to cache tool metadata\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet information about a specific tool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke a tool by name with given parameters\nList all available tools\nMaximum execution time for tool invocation (milliseconds)\nMaximum number of parallel tool executions in composition\nCreate a new <code>ToolManager</code> with the given registry\nCheck if a specific tool is available\nUpdate configuration\nWhether to validate tool parameters before invocation\nCreate a new <code>ToolManager</code> with custom configuration")