searchState.loadedDescShard("llmspell_tools", 0, "ABOUTME: llmspell-tools implementation crate ABOUTME: …\nAcademic and research tools ABOUTME: Academic and research …\nABOUTME: API interaction tools module for HTTP requests, …\nAPI Key Integration for Tools\nABOUTME: Communication tools for email sending and …\nData processing and transformation tools\nDocument processing tools ABOUTME: Document processing …\nABOUTME: File system tools module for safe file operations …\nMacro to implement <code>ToolStatePersistence</code> trait for types …\nABOUTME: Tool lifecycle management with hook integration …\nABOUTME: Media processing tools module for audio, video, …\nABOUTME: Tool registry for discovery, validation, and …\nABOUTME: Resource-limited tool execution wrapper ABOUTME: …\nABOUTME: Search tools for web, semantic, and code searching\nState management and persistence tools\nABOUTME: System integration tools module for safe system …\nABOUTME: Utility tools module for various helper functions …\nABOUTME: Web tools module for web scraping, analysis, and …\nCitation Formatter tool\nCitation Formatter tool for academic bibliography …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new citation formatter tool\nABOUTME: GraphQL query tool with schema introspection, …\nABOUTME: HTTP request tool with authentication, retry …\nLocation of an error in the GraphQL query\nGraphQL tool configuration\nGraphQL error structure\nGraphQL operation types\nGraphQL query tool\nGraphQL request structure\nGraphQL response structure\nSchema introspection query for discovering API structure\nGraphQL mutation operation for modifying data\nStandard GraphQL query operation for fetching data\nSchema cache entry\nGraphQL subscription for real-time data updates\nColumn number in the query\nThe data returned by the operation\nEnable schema caching\nAny errors that occurred during execution\nAdditional metadata about the response\nAdditional error information\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number in the query\nLocations in the query where the error occurred\nMaximum query depth\nError message\nCreates a new GraphQL query tool with the given …\nName of the operation to execute if query contains …\nPath to the field that caused the error\nThe GraphQL query string\nSchema cache TTL in seconds\nDefault timeout in seconds\n<code>ToString::to_string</code>, but without panic on OOM.\nUser agent string\nVariables for parameterized queries\nAuthentication types\nHTTP method types\nHTTP request tool configuration\nHTTP request tool with advanced features (refactored)\nHTTP response structure\nResponse body types\nRetry configuration (simplified to use shared utility)\nExponential backoff factor\nDemonstrate hook-aware execution for HTTP requests This …\nEnable automatic redirect following\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet hook integration metadata for this tool\nInitial delay between retries in milliseconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of retry attempts\nMaximum delay between retries in milliseconds\nMaximum number of redirects to follow\nCreate a new HTTP request tool\nRate limiting (requests per minute)\nDefault retry configuration\nStatus codes that should trigger a retry\nCheck if this tool supports hook integration\nDefault timeout in seconds\n<code>ToString::to_string</code>, but without panic on OOM.\nUser agent string\nConfiguration helper for tools that need API keys\nTrait for tools that require API keys\nAdd an API key programmatically\nGet the list of API key configurations this tool needs\nDefault value if not found (for testing)\nReturns the argument unchanged.\nGet an API key for a service\nGet the global API key manager\nGet the API key\nCalls <code>U::from(self)</code>.\nCreate a new API key configuration\nSet whether the key is required\nWhether the API key is required\nService name (e.g., “<code>google_search</code>”, “sendgrid”)\nValidate that all required API keys are available\nSet a default value\nABOUTME: Database connector tool with support for …\nABOUTME: Email sending tool with support for SMTP, <code>SendGrid</code>…\nDatabase connection configuration\nDatabase connector configuration\nDatabase connector tool\nDatabase security configuration\nConnection pool configuration\nWhether to allow DDL operations (CREATE, DROP, ALTER)\nWhether to allow DML operations (INSERT, UPDATE, DELETE)\nAllowed database operations\nConnection timeout in seconds\nConnection string or individual parameters\nDatabase type (postgresql, mysql, sqlite)\nAvailable database configurations\nDefault database to use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate configuration from environment variables\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of connections in pool\nMaximum number of rows to return\nMinimum number of connections in pool\nCreate a new database connector tool\nConnection pool settings\nQuery timeout in seconds\nQuery timeout in seconds\nSecurity settings\nConfiguration for email providers\nEmail sender configuration\nEmail sending tool\nAPI key or credentials\nDefault provider to use\nDefault sender email\nEnable TLS/SSL by default\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate configuration from environment variables\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new email sender tool\nProvider type (smtp, sendgrid, ses)\nAvailable email providers\nProvider-specific settings\nConnection timeout in seconds\nABOUTME: CSV analysis tool with streaming support, …\nGraph Builder tool\nABOUTME: JSON processing tool with full jq support using …\nAnalyze CSV structure and statistics\nColumn statistics\nColumn data type\nConvert CSV to another format\nCSV analysis result\nCSV analyzer configuration\nCSV analyzer tool\nCSV analysis operation types\nExport format\nFilter rows based on conditions\nSample rows from CSV\nColumn statistics for streaming analysis\nTransform CSV data\nValidate CSV structure\nEnable automatic encoding detection\nDefault delimiter\nEnable header detection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum rows to analyze for statistics\nMaximum file size in bytes\nChunk size for streaming operations\n<code>ToString::to_string</code>, but without panic on OOM.\nSample size for type inference\nEdge data structure for serialization\nGraph Builder tool for data structure manipulation\nGraph types supported by the tool\nNode data structure for serialization\nSerializable graph structure\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new graph builder tool\nJSON processing operation types\nJSON processor configuration\nJSON processing tool with full jq support\nTransform JSON using full jq syntax\nStream process JSON lines\nValidate JSON against a schema\nDemonstrate hook-aware execution for JSON processing This …\nEnable streaming for large files\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet hook integration metadata for this tool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum execution time in milliseconds\nMaximum input size in bytes\nProcess JSON lines with streaming\nCheck if this tool supports hook integration\n<code>ToString::to_string</code>, but without panic on OOM.\nPDF Processor tool\nPDF Processor tool for document analysis and text …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new PDF processor tool\nABOUTME: Archive handling tool for ZIP/TAR/GZ formats with …\nABOUTME: Safe file system operations tool with sandboxing …\nABOUTME: File system monitoring tool for watching file …\nConfiguration for archive operations\nArchive handler tool for safe archive operations\nDefault compression level (0-9)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum extraction depth (for nested archives)\nMaximum size of files to extract (in bytes)\nMaximum number of files to extract\nMaximum total size of extracted content (in bytes)\nCreate a new archive handler with default configuration\nWhether to preserve file permissions\nCreate with custom configuration\nSet file sandbox for security\nFile converter tool configuration\nFile converter tool for handling various file format …\nCreate backup files before conversion\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum file size to process (in bytes)\nCreate a new file converter tool\nOutput directory for converted files\nPreserve original file timestamps\nAppend to file\nCopy file\nCreate directory\nDelete file\nCheck if file exists\nFile operation types\nFile operations configuration\nFile operations tool\nList directory contents\nGet file metadata\nMove/rename file\nRead file contents\nWrite file contents\nEnable recursive directory operations\nAllowed file paths for security (used in …\nEnable atomic writes\nDefault file permissions for new files\nDemonstrate hook-aware execution for file operations This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet hook integration metadata for this tool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum directory listing size\nMaximum file size for operations (in bytes)\nCheck if this tool supports hook integration\n<code>ToString::to_string</code>, but without panic on OOM.\nFile search tool configuration\nFile search tool for pattern matching within files and …\nDefault number of context lines to include\nDefault file extensions to exclude from searches\nDefault file extensions to include in searches\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum file size to search (in bytes)\nMaximum number of search results to return\nMaximum search depth for recursive searches\nCreate a new file search tool\nConfiguration for the <code>FileWatcherTool</code>\nFile system monitoring tool\nDefault debounce duration in milliseconds\nDefault timeout for watching operations in seconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of events to buffer\nMaximum number of paths to watch simultaneously\nCreate a new <code>FileWatcherTool</code>\nTool lifecycle exports for public API\nABOUTME: Tool-specific hook integration following patterns …\nABOUTME: Tool execution state machine for tracking tool …\nAudit logging configuration\nAudit log entry for tool execution\nExecution metrics for tool runs with hooks\nHook execution features configuration\nTrait for tools that support enhanced hook execution\nTool execution phases for hook context\nEnhanced tool executor with hook integration\nTool-specific hook context with execution metadata\nConfiguration for tool lifecycle hook integration\nAudit logging configuration\nAverage CPU time in milliseconds\nAverage memory usage in bytes\nBase hook context\nEnable circuit breaker protection\nCircuit breaker configuration\nEnable comprehensive audit logging\nError message if any\nExecute a tool with full hook integration\nExecute with hook integration\nTool execution phase\nExecution phase when this entry was created\nExecution success flag (post-execution only)\nHook features configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet resource metrics from all tool executions\nGet hook point for this execution phase\nTotal hook execution overhead in milliseconds\nEnable hook execution (can be disabled for performance)\nInput parameters (pre-execution) or None (post-execution)\nInput text\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAudit log sensitive parameters (be careful with secrets)\nMaximum time allowed for hook execution\nMaximum security level allowed for hook execution\nCreate a new tool hook context\nCreate a new tool executor with hook integration\nInput parameters (may be redacted)\nResource limits for tool execution including hooks\nNumber of times resource limits were hit\nResource usage metrics at this point\nResource metrics at time of entry\nSecurity level\nSecurity level of the tool\nEnable security-level validation for hooks\nSuccess status (None for pending, Some(bool) for completed)\nTimestamp of the entry\nTool category\nTool metadata\nTool name\nTotal number of tool executions\nSet execution success flag (for post-execution hooks)\nSet input parameters (for pre-execution hooks)\nAdd resource metrics\nAdd resource metrics from <code>ResourceTracker</code>\nTool is being cleaned up\nTool execution completed successfully\nTool currently executing\nTool execution statistics\nTool execution failed\nTool is being initialized\nTool ready for execution\nState transition record\nTool fully cleaned up\nTool execution states\nTool state machine for managing execution lifecycle\nTool not yet initialized\nCheck if tool can start execution\nComplete execution successfully\nGet current state\nFail execution\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet execution statistics\nGet state transition history\nInitialize the tool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if tool is healthy\nCheck if tool is in a specific state\nCheck if tool is in a final state\nCreate a new tool state machine\nStart cleanup\nStart execution\nGet percentage of time spent in a specific state\nTerminate the tool\nGet time spent in a specific state\nTransition to a new state\nAudio format types\nAudio metadata\nAudio processor configuration\nAudio processor tool for format detection and metadata …\nAlbum metadata\nWhether to analyze audio properties\nArtist metadata\nBit rate in bits per second\nNumber of channels\nConversion quality (0-10, where 10 is highest)\nDuration in seconds\nWhether to extract metadata tags\nFile size in bytes\nAudio format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetect format from file extension\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum file size to process (in bytes)\nCreate a new audio processor tool\nSample rate in Hz\nSupported formats for conversion\nTitle metadata\nYear metadata\nImage dimensions\nImage format types\nImage metadata\nImage processor configuration\nImage processor tool for format conversion and basic …\nCalculate aspect ratio\nBit depth per channel\nColor mode (RGB, RGBA, Grayscale, etc.)\nImage dimensions\nDPI if available\nEXIF data (if available)\nFile size in bytes\nImage format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetect format from file extension\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault JPEG quality (0-100)\nMaximum file size to process (in bytes)\nMaximum image dimensions\nGet MIME type for the format\nCreate a new image processor tool\nGet orientation\nDefault PNG compression level (0-9)\nWhether to preserve metadata during operations\nSupported formats for conversion\nVideo format types\nVideo metadata\nVideo processor configuration\nVideo processor tool for format detection and metadata …\nVideo resolution\nGet aspect ratio as a string\nAudio bitrate in bits per second\nNumber of audio channels\nAudio codec\nDuration in seconds\nWhether to extract detailed metadata\nFile size in bytes\nVideo format\nFrames per second\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDetect format from file extension\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum file size to process (in bytes)\nMaximum thumbnail height\nMaximum thumbnail width\nGet resolution name (e.g., “1080p”, “4K”)\nCreate a new video processor tool\nVideo resolution\nSupported formats for detection\nVideo bitrate in bits per second\nVideo codec\nCapability matcher for tool discovery\nStatistics about the tool registry\nResource usage statistics for tools with hook integration\nMetadata about a registered tool\nThread-safe tool registry for managing tool instances\nAverage CPU time across all executions\nAverage memory usage across all executions\nRequired capabilities (custom key-value pairs)\nRequired categories (any of these)\nTool category\nCount of tools per category\nCheck if a tool is registered\nTool description\nDiscover tools by capabilities\nExecute a tool by name (with or without hooks based on …\nExecute a tool with hook integration (if enabled)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet execution metrics from the tool executor\nGet hook configuration\nGet resource usage statistics for all tool executions\nGet registry statistics\nGet a tool by name\nGet the tool executor (if hook integration is enabled)\nGet tool metadata by name\nGet tools by category\nGet tools compatible with a security level\nCheck if hook integration is enabled\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all registered tools\nCheck if a tool matches this capability matcher\nMaximum security level allowed\nCustom metadata\nTool name\nCreate a new tool registry\nCreate a new capability matcher\nRegister a tool in the registry\nResource limits\nNumber of times resource limits were hit\nText-based search terms\nSecurity level required\nCount of tools per security level\nSecurity requirements\nEnable or disable hook integration\nNumber of tools with hook integration enabled\nTotal number of categories with tools\nTotal tool executions\nTotal overhead from hook execution in milliseconds\nTotal number of registered tools\nTotal number of tools in registry\nUnregister a tool\nTool version\nAdd capability requirement\nMatch tools by category\nCreate a new tool registry with hook support\nSet maximum security level\nAdd search terms\nExtension trait to easily add resource limiting to tools\nTrait for tools that support resource limiting\nWrapper that adds resource limiting to any tool\nHelper to track file operations with size limits\nCreate a resource tracker for this tool\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new resource-limited tool\nGet the resource limits for this tool\nHelper to track memory allocation for data processing\nWrap with default resource limits\nCreate with default limits\nWrap this tool with resource limits\nCreate with strict limits\nWrap with strict resource limits\nABOUTME: Search provider abstraction and implementations …\nABOUTME: Enhanced web search tool implementation with …\nProvider configuration\nSearch options\nCommon trait for all search providers\nSearch result structure\nSearch types supported by providers\nABOUTME: Brave Search API provider implementation ABOUTME: …\nABOUTME: <code>DuckDuckGo</code> search provider implementation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nABOUTME: Google Custom Search API provider implementation …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the provider is available (e.g., has API key …\nGet provider-specific metadata\nGet the provider name\nGet rate limit information (requests per minute)\nPerform a search\nABOUTME: <code>SerpApi</code> search provider implementation ABOUTME: …\nABOUTME: Serper.dev search provider implementation …\nBrave Search provider\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>DuckDuckGo</code> search provider\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGoogle Custom Search provider\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>SerpApi</code> provider - supports multiple search engines\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSerper.dev provider\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWeb search configuration\nEnhanced web search tool implementation\nDefault search provider\nProvider fallback chain\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate from environment configuration\nLoad configuration from environment variables\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLanguage preference\nMaximum results per search\nCreate a new web search tool\nAPI keys and configuration for different providers\nEnable safe search\nCached tool result\nRegistry statistics\nResource usage statistics\nTool execution statistics\nTool execution state for persistence\nState manager holder trait for concrete implementations\nExtension trait for tools to add state persistence …\nTool state registry for managing multiple tool states\nAverage execution time in milliseconds\nAverage memory usage in bytes\nCache hit ratio percentage\nAdd result to cache\nWhen this result was cached\nClean expired cache entries\nWhether this result contains sensitive data\nCreate a tool state representation from current tool state\nGet custom state (optional override)\nTool-specific custom state\nGet execution statistics (optional override)\nExecution statistics\nExecution time for this result\nNumber of failed executions\nNumber of file operations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cached result if valid\nGet custom state value\nGet registry statistics\nInput hash for cache key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast execution timestamp\nState timestamp\nLoad the tool’s state from storage\nLoad state for a specific tool\nTool metadata\nNumber of network requests\nCreate new tool state registry\nCreate new tool state\nPeak memory usage in bytes\nUpdate execution statistics\nRegister a tool for state management\nResource usage statistics\nRestore custom state (optional override)\nRestore execution statistics (optional override)\nRestore tool state from saved state\nRestore result cache (optional override)\nSerialized result\nGet result cache (optional override)\nCached results by input hash\nSave state for all registered tools\nSave the tool’s current state\nSet custom state value\nSet the state manager for this tool\nGet the state manager for this tool\nNumber of successful executions\nTool identifier\nTotal CPU time in milliseconds\nTotal execution time in milliseconds\nTotal number of executions\nTTL for cache entry in seconds\nCalculate cache hit ratio\nEnvironment reader tool configuration\nEnvironment reader tool for accessing system environment …\nWhether to allow reading all environment variables\nWhether to allow setting environment variables (requires …\nAllowed environment variable patterns (glob patterns)\nExplicitly blocked environment variable patterns\nDefault environment variables that are always safe to read\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of environment variables to return in list …\nCreate a new environment reader tool\nCreate a new environment reader tool with sandbox context\nExecution permissions configuration\nI/O capture configuration\nProcess executor tool configuration\nProcess executor tool for safe process execution\nProcess execution result\nWhether to allow arbitrary command execution\nEnvironment variables to pass to processes\nAllowed executable paths or names\nBlocked executable patterns\nDefault working directory\nDemonstrate hook-aware execution for process execution …\nExecution time in milliseconds\nExit code of the process\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet hook integration metadata for this tool\nWhether to inherit current process environment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nI/O capture settings\nMaximum execution time in seconds\nMaximum output size in bytes\nCreate a new process executor tool\nExecution permissions\nStandard error\nWhether to capture stderr\nStandard output\nWhether to capture stdout\nWhether the process was successful (exit code 0)\nCheck if this tool supports hook integration\nWhether the process was terminated due to timeout\nDNS resolution check\nHTTP/HTTPS health check\nHTTPS health check\nService check result\nService check type\nService checker tool configuration\nService checker tool for availability monitoring\nTCP port connectivity check\nWhether to allow checking any domain\nWhether to allow arbitrary port checking\nAllowed domains for checks\nAllowed ports for TCP checks\nWhether the service is available\nBlocked ports that should never be checked\nDefault retries for failed checks\nDefault timeout for checks in seconds\nError message if check failed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of concurrent checks\nMaximum timeout allowed in seconds\nAdditional metadata about the check\nCreate a new service checker tool\nResponse time in milliseconds\nStatus message\nTarget being checked (host:port or URL)\nCreate a new service checker tool with sandbox context\nCPU usage statistics\nDisk usage statistics\nDisk usage statistics\nMemory statistics\nProcess information\nStatistics types that can be collected\nStatistics collection configuration\nSystem monitor configuration\nSystem monitor tool for resource monitoring\nSystem resource statistics\nEnable all statistics\nAvailable disk space in bytes\nAvailable memory in bytes\nStatistics collection settings\nCPU count (logical cores)\nCPU sampling duration in milliseconds\nCPU usage percentage (0-100)\nDisk usage information by mount point\nSet of statistics types to collect\nFilesystem type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to include detailed disk information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a specific stat type is enabled\nLoad average (1, 5, 15 minutes) on Unix systems\nMaximum number of disk mounts to report\nMemory usage percentage (0-100)\nCreate a new system monitor tool\nNumber of running processes\nTotal disk space in bytes\nTotal memory in bytes\nSystem uptime in seconds\nDisk usage percentage (0-100)\nUsed disk space in bytes\nUsed memory in bytes\nBase64 encoding and decoding tool\nCalculator tool\nABOUTME: Data validation tool with built-in and custom …\nDate and time handler tool\nDiff calculation tool\nHash calculation and verification tool\nABOUTME: Template rendering tool with multiple engine …\nText manipulation and transformation tool\nUUID generation and manipulation tool\nBase64 encoding/decoding tool\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Base64 encoder tool\nCalculator tool for mathematical expressions\nDemonstrate hook-aware execution This method showcases how …\nReturns the argument unchanged.\nGet hook integration metadata for this tool\nCalls <code>U::from(self)</code>.\nCreate a new calculator tool\nHelper method to show hook integration capabilities\nArray validation\nCustom validation function (name references predefined …\nData validation configuration\nData validation tool\nDate format validation\nEmail validation\nEnumeration validation\nString length validation\nObject validation\nRegular expression pattern matching\nNumeric range validation\nRequired field validation\nType validation\nURL validation\nValidation error details\nValidation result\nValidation rule types\nCollection of validation rules for a field\nAdd a rule to the collection\nCustom error messages\nWhether to stop on first error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum validation errors to collect\nCreate a new data validation tool\nCreate a new set of validation rules\nWhether to validate nested structures\nCreate with custom configuration\nDate/time handler tool\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new date/time handler tool\nDiff calculator tool\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new diff calculator tool\nHash calculation tool\nDefault hash algorithm to use\nDefault output format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum file size for hashing (in bytes)\nCreate a new hash calculator tool\nSupported template engines\nTemplate engine configuration\nTemplate engine tool for rendering templates\nWhether to allow custom filters\nWhether to auto-escape HTML\nDefault template engine to use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum context size in bytes\nMaximum rendering time in milliseconds\nMaximum template size in bytes\nCreate a new template engine tool\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate with custom configuration\nText manipulation tool for string operations\nDefault indentation spaces\nDefault truncation length\nDefault word wrap width\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new text manipulator tool\nUUID generation tool\nDefault format for output\nDefault UUID version to use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new UUID generator tool\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nABOUTME: Web scraper tool for extracting content from web …\nWeb scraper tool for extracting content from web pages\nDefault timeout in seconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new web scraper tool\nUser agent string")