searchState.loadedDescShard("llmspell_bridge", 0, "ABOUTME: llmspell-bridge - Language-agnostic script …\nCentral LLMSpell configuration\nABOUTME: Agent bridge for script-to-agent communication …\nABOUTME: Agent discovery and management for script bridge …\nApply environment variable overrides (DEPRECATED - use …\nApply environment variable overrides using the centralized …\nABOUTME: Core artifact bridge providing language-agnostic …\nCreate a new builder for <code>LLMSpellConfig</code>\nABOUTME: Configuration bridge for runtime config access …\nABOUTME: Common type conversion traits for …\nDebug system configuration\nDebug bridge for script engines\nDefault script engine to use\nDiscover configuration file in standard locations\nABOUTME: Unified discovery pattern for bridge components …\nABOUTME: Language abstraction layer for script engines …\nEngine-specific configurations\nEvent system configuration\nReturns the argument unchanged.\nParse TOML content with environment variable overrides and …\nGet engine-specific configuration\nABOUTME: Global object injection infrastructure for script …\nABOUTME: Hook bridge for cross-language hook execution …\nHook system configuration\nCalls <code>U::from(self)</code>.\nABOUTME: JavaScript script engine implementation of …\nLoad configuration from TOML file with validation\nLoad configuration with automatic discovery\nABOUTME: Lua script engine implementation of …\nMerge values from JSON config (from registry) - exposed …\nABOUTME: Bridge monitoring implementations ABOUTME: …\nABOUTME: Workflow-based orchestration patterns for complex …\nABOUTME: Provider management for LLM providers accessible …\nProvider configurations\nABOUTME: Provider discovery for LLM providers ABOUTME: …\nABOUTME: Component registry for managing agents, tools, …\nABOUTME: Language-agnostic script runtime using …\nGlobal runtime settings\nABOUTME: Core session bridge providing language-agnostic …\nABOUTME: Storage backend discovery for state persistence …\nCheck if an engine is configured\nABOUTME: Tool registration and management for the bridge …\nTool-specific configurations\nValidate configuration\nABOUTME: Performance optimizations for workflow bridge …\nABOUTME: Workflow discovery and management for script …\nBridge between scripts and agents\nClear all agent instances\nConfigure alerts for an agent\nCreate a new agent instance\nCreate a child context\nCreate a composite agent that delegates to multiple agents\nCreate a new execution context\nCreate agent from template\nDelete an agent’s state\nEnable dynamic agent discovery by type or capability\nPut agent in error state\nExecute an agent\nExecute agent with streaming\nExecute agent with context\nReturns the argument unchanged.\nGet agent instance\nGet active alerts for an agent\nGet agent configuration\nGet detailed agent information including composition …\nGet health status for an agent\nGet agent information\nGet last error for agent\nGet metrics for an agent instance\nGet performance report for an agent\nGet recovery attempts count\nGet the current state of an agent\nGet state transition history\nGet state machine metrics\nGet all tool metadata for bulk discovery\nGet overall bridge metrics\nGet composition hierarchy for nested agents\nGet an existing context\nGet data from context\nGet shared memory data\nGet tool information\nGet tool metadata for discovery\nCheck if a tool is available\nInitialize an agent\nCalls <code>U::from(self)</code>.\nInvoke a tool on behalf of an agent\nCheck if agent is healthy\nList all agents with their capabilities\nList available agent types\nList active agent instances\nList all saved agent states\nList available templates\nList available tools\nLoad an agent’s state\nLog an event for an agent\nCreate a new agent bridge with provider manager\nPause an agent\nAttempt to recover agent from error\nRemove an agent instance\nClean up context\nResume an agent\nSave an agent’s state\nSet shared memory data\nSet the state manager for agent state persistence\nStart an agent\nStop an agent\nSubscribe to events for an agent (returns event channel)\nTerminate an agent\nUpdate context data\nCreate with custom factory\nWrap an agent as a tool for composition\nAgent discovery service for bridge\nInformation about an agent type\nCategory\nClear all cached agents\nComplexity level\nCreate an agent by type\nCreate an agent from a template\nDescription\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet agent metadata Get information about an agent type\nGet or create a cached agent\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList available agent types\nGet available templates from the global registry\nAgent type name\nCreate a new agent discovery service with provider manager\nOptional parameters\nRemove an agent from cache\nRequired parameters\nCreate with a custom factory\nCore artifact bridge for language-agnostic artifact …\nDelete an artifact\nReturns the argument unchanged.\nGet an artifact with metadata\nGet artifact content only\nGrant permission on an artifact\nCalls <code>U::from(self)</code>.\nList artifacts for a session\nCreate a new artifact bridge\nQuery artifacts across sessions\nRevoke permission on an artifact\nStore an artifact\nStore a file as an artifact\nConfiguration change audit entry\nConfiguration bridge with security and auditing\nType of configuration change\nGranular configuration permissions\nImmutable configuration settings that cannot be changed at …\nCan access sensitive data like API keys\nUpdate file operation allowed paths (requires <code>modify_tools</code> …\nWhether the change was allowed\nAllowed provider names for modification\nAllowed tool names for modification\nSecurity settings that are locked at boot-time (cannot be …\nType of change\nReason if denied\nCreate a bridge for a specific script context\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate full permissions (DANGEROUS!)\nGet the current configuration (read-only, with secret …\nGet the default engine\nGet provider configuration by name (with secret redaction)\nGet security configuration (requires special permission)\nGet tools configuration\nPaths that are always immutable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if file access is allowed\nCheck if network access is allowed\nList all configured providers\nWhether to allow provider deletions\nMaximum memory that can be set\nMinimum timeout that can be set\nCan modify provider settings\nCan modify runtime settings (non-security)\nCan modify security settings (DANGEROUS!)\nCan modify tool settings\nCreate a new config bridge with specified permissions\nNew value\nPrevious value (if applicable)\nPath to the changed value (e.g., “providers.openai.model…\nGet current permissions\nCan read configuration\nCreate read-only permissions\nRestore from a snapshot\nExport specific section as JSON\nSet a provider configuration (requires <code>modify_providers</code> …\nSet security settings (requires <code>modify_security</code> permission …\nCreate a snapshot of current configuration\nScript or component that made the change\nCreate standard modify permissions (no security changes)\nTimestamp of the change\nExport configuration as JSON (for script access)\nArray of values\nBoolean value\nBinary data\nConversion utilities\nTrait for converting script values to Rust types\nNull/nil value\nNumeric value (all numbers as f64)\nObject/table with string keys\nCommon script value representation for cross-language …\nUnified workflow result format for scripts\nString value\nTrait for converting Rust types to script values\nWorkflow error information\nWorkflow execution metadata\nGeneric workflow parameter structure\nResult data specific to workflow type\nAdditional error details\nExecution duration in milliseconds\nEnd time of execution\nError information if failed\nError type/category\nAdditional workflow-specific metadata\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from JSON value\nConvert a script value to this Rust type\nGet a nested value from an object by dot-separated path\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a <code>ScriptValue</code> is truthy (for conditional …\nConvert JSON value to workflow parameters\nStep or branch where error occurred\nHuman-readable error message\nExecution metadata\nConvert error strategy from string\nStart time of execution\nNumber of steps executed\nNumber of steps that failed\nNumber of steps that succeeded\nWhether the workflow completed successfully\nConvert to JSON value\nConvert this Rust type to a script value\nTransform conditional workflow result\nTransform generic workflow result from JSON\nTransform loop workflow result\nTransform parallel workflow result\nWorkflow name or ID\nWorkflow type that was executed\nDebug bridge that script engines interact with\nSimplified debug entry for script consumption\nMemory statistics for script debugging\nTimer handle for script usage\nAdd advanced filter rule\nAdd a module filter\nClear captured entries\nClear all module filters\nDump a value for debugging (pretty-print) - JSON fallback\nDump a value with enhanced formatting options (for script …\nGet the elapsed time for a timer without stopping it\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate flame graph compatible output\nGenerate JSON performance report\nGenerate a performance report\nGet captured debug entries\nGet module filter summary\nGet the current debug level\nGet memory usage snapshot\nGet memory statistics (placeholder for future …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if debugging is enabled\nRecord a lap for a timer\nLog a message at the specified level\nLog with metadata\nCreate a new debug bridge\nCreate a new timer handle\nRecord a custom event on a timer\nRemove a specific filter pattern\nSet default filter behavior\nEnable or disable debugging\nSet the debug level\nGet stack trace options for different debug levels\nStart a performance timer\nStop a timer and get the duration in milliseconds\nTrait for unified discovery across bridge components\nCommon discovery information fields\nHuman-readable description\nGet all available types with their information\nSupported features\nFilter types by criteria (note: cannot be used with dyn …\nReturns the argument unchanged.\nGet information about a specific type\nCheck if a type is available\nCalls <code>U::from(self)</code>.\nList all available type names\nMetadata\nOptional parameters\nRequired parameters\nType name\nABOUTME: <code>ScriptEngineBridge</code> trait defining …\nABOUTME: Engine factory for creating script engines by …\nABOUTME: Common types for script engine abstraction layer …\nFeatures supported by a script engine\nExecution context for scripts\nCore abstraction for script execution engines\nMetadata about script execution\nOutput from script execution\nStreaming output from script execution\nSecurity context for script execution\nAllow file system access\nAllow network access\nAllow process spawning\nSupports async/await or coroutines\nAny console/print output captured\nSupports debugging/breakpoints\nEngine that executed the script\nEnvironment variables\nExecute a script and return the output\nExecute a script with streaming output support\nExecution time in milliseconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the name of this script engine\nGet the current execution context\nInject language-agnostic APIs into the engine\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum execution time in milliseconds\nMaximum execution time in milliseconds\nMaximum memory usage in bytes\nMaximum script size in bytes\nMemory usage in bytes\nExecution metadata\nExecution metadata\nSupports module imports\nSupports multimodal content\nThe main output value\nSecurity restrictions\nSet the execution context\nSet script arguments to be made available in the script …\nScript-specific state\nThe underlying stream of outputs\nSupports streaming output\nGet the features supported by this engine\nCheck if this engine supports multimodal content\nCheck if this engine supports streaming execution\nAny warnings generated\nCurrent working directory\nBrowser-style resolution\nDeno-style resolution\nFactory for creating script engines\nInformation about an available engine\nFull standard library\nConfiguration for the JavaScript engine\nBuilder for <code>JSConfig</code>\nConfiguration for the Lua engine\nBuilder for <code>LuaConfig</code>\nJavaScript module resolution strategies\nNode.js-style resolution\nNo standard library\nSafe subset only\nPlugin interface for third-party script engines\nLua standard library access levels\nAdd a package path\nBuild the configuration\nBuild the configuration\nCreate a new builder for <code>LuaConfig</code>\nCreate a new builder for <code>JSConfig</code>\nCreate an instance of this engine\nCreate an engine by name with the given configuration\nCreate a JavaScript engine with the given configuration\nCreate a Lua engine with the given configuration\nCreate a Lua engine with the given configuration and …\nEnable or disable debug features\nEnable debug features\nGet a description of this engine\nEnable or disable console API\nEnable console API\nGet the name of this engine\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all available engines (built-in and plugins)\nSet the maximum heap size in bytes\nMaximum heap size in bytes\nSet the maximum memory usage in bytes\nMaximum memory usage in bytes\nSet the module resolution strategy\nModule resolution strategy\nCreate a new builder with default configuration\nCreate a new builder with default configuration\nSet all package paths at once\nCustom package paths\nRegister a third-party engine plugin\nSet the standard library access level\nStandard library access level\nEnable or disable strict mode\nEnable strict mode\nGet the features supported by this engine\nUnregister an engine plugin\nGet the version of this engine\nAPI injection failed\nEngine configuration invalid\nEngine not found\nScript execution failed\nResource limit exceeded\nCommon error types for script engines\nScript syntax error\nType conversion failed\nFeature not supported by engine\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>EventBridge</code> for cross-language event communication\nEvent filter criteria for advanced pattern matching\nSubscription handle for managing event subscriptions\nCorrelation ID filter\nGet the underlying event bus reference\nEvent type pattern\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet event bus statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList active subscriptions\nAdditional metadata filters\nCreate a new <code>EventBridge</code> with default <code>EventBus</code>\nPublish an event with correlation ID for hook integration\nPublish an event to the event bus\nSource component pattern\nSubscribe to events matching a pattern\nSubscribe to events with advanced filtering\nGet subscription count\nTarget component pattern\nUnsubscribe from events\nCreate a new <code>EventBridge</code> with custom <code>EventBus</code>\nAdapter that implements <code>EventEmitter</code> trait using <code>EventBus</code>\nGet the event configuration\nEmit a simple event with type and data\nEmit a structured event with full metadata\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if events are enabled\nCreate a new <code>EventBusAdapter</code> with the given <code>EventBus</code>\nCreate with custom configuration\nSet the language context\nEvent serialization utilities for cross-language support\nDeserialize event data from a specific language context\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert JSON representation back to <code>UniversalEvent</code>\nSerialize event data for a specific language context\nConvert <code>UniversalEvent</code> to JSON representation suitable for …\nValidate that an event can be safely …\nABOUTME: Agent global object implementation for script …\nABOUTME: Artifact global object providing artifact …\nABOUTME: Config global object implementation for script …\nABOUTME: Core global objects that are injected into script …\nInitialize the standard global registry with all core …\nDebug global object implementation for script engines\nABOUTME: Event global object providing cross-language …\nABOUTME: Hook global object providing cross-language hook …\nABOUTME: High-performance global injection system with …\nABOUTME: JSON global object providing JSON parsing and …\nABOUTME: Provider global object implementation for script …\nABOUTME: Global registry for managing all injectable …\nABOUTME: Session global object providing session …\nABOUTME: State global object providing persistent state …\nABOUTME: Streaming global object implementation for script …\nStandardized Tool API\nABOUTME: Tool global object implementation for script …\nABOUTME: Core types and traits for the global object …\nABOUTME: Workflow global object implementation for script …\nAgent global object for script engines\nGet the agent bridge\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Agent global\nCreate with state manager support\nArtifact global object providing artifact management for …\nArtifact bridge for core operations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Artifact global\nConfig bridge global object for script engines\nGet the config bridge\nCreate a Config global for a specific script\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Config global with specified permissions\nConfig global object for script engines\nLogger global object for script engines\nUtils global object for script engines\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug global object for script engines\nGet the debug bridge\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Debug global\nEvent global object providing cross-language event bus …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Event global\nHook global object providing cross-language hook system\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Hook global with the bridge\nHigh-performance global injector\nCache for compiled global injections\nClean up all globals\nClear the cache\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet injection metrics from the last injection\nGet cache hit rate\nInject all globals into a JavaScript environment\nInject all globals into a Lua environment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new injection cache\nCreate a new global injector\nJSON global object providing JSON utilities\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new JSON global\nProvider global object for script engines\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Provider global with access to provider …\nRegistry for all global objects\nBuilder for creating a <code>GlobalRegistry</code> with dependency …\nBuild the registry with dependency resolution\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a global by name\nGet all registered globals in injection order\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet metadata for all registered globals\nGet injection metrics\nCreate a new builder\nRegister a global object\nGlobal object that provides replay functionality\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSession global object providing session management for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Session global\nSession bridge for core operations\nContainer for session infrastructure components\nReturns the argument unchanged.\nHelper function to get or create session infrastructure …\nCalls <code>U::from(self)</code>.\nState global object providing persistent state management\nBackup manager for state backup/restore operations …\nFallback in-memory state storage (when <code>StateAccess</code> is not …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMigration engine for schema transitions (optional)\nCreate a new State global without state backend (fallback …\nHelper method to parse scope string to <code>StateScope</code> enum\nSchema registry for migration planning (optional)\n<code>StateAccess</code> implementation for persistent storage …\nOriginal <code>StateManager</code> for migration/backup features …\nCreate a new State global with full infrastructure support\nCreate a new State global with full migration support\nCreate a new State global with <code>StateAccess</code> integration\nCreate a new State global with <code>StateManager</code> integration …\nContainer for state infrastructure components\nReturns the argument unchanged.\nHelper function to get or create state infrastructure from …\nCalls <code>U::from(self)</code>.\nStreaming global object for script engines\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Streaming global\nStandard parameter definition exposed to scripts\nStandard tool API trait that all script engines must …\nStandard tool information exposed to scripts\nStandard tool schema exposed to scripts\nTool category\nDefault value if any\nTool description\nSchema description\nParameter description\nDiscover tools with optional filters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all tool categories\nGet a specific tool’s information\nGet a tool’s schema\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvoke a tool with parameters\nList all available tools\nTool name\nSchema name\nParameter name\nParameter type as string\nParameters\nWhether required\nConvert from core <code>ToolSchema</code> to standard schema\nCheck if a tool exists\nTool version\nTool global object for script engines\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Tool global\nGet the component registry\nShared context available to all globals during injection\nMetadata about a global object\nTrait for objects that can be injected as globals into …\nPerformance metrics for global injection\nGet average injection time per global\nBridge references for cross-global communication\nCache hit rate (0.0 to 1.0)\nClean up any resources when the global is removed\nOther globals this one depends on\nDescription of the global’s functionality\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a bridge reference\nNumber of globals injected\nInitialize any resources needed by this global\nInject this global into a JavaScript environment\nInject this global into a Lua environment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if injection meets performance requirements (&lt;5ms)\nGet metadata about this global\nName of the global (e.g., “Agent”, “Tool”)\nCreate a new global context\nTime spent per global (microseconds)\nProvider manager for LLM access\nComponent registry for tools and agents\nWhether this global is required or optional\nStore a bridge reference for cross-global access\nState access for persistent storage (optional)\nTotal time spent injecting globals (microseconds)\nVersion of the global API\nCreate a new global context with state access\nWorkflow global object for script engines\nGet the workflow bridge\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Workflow global without state manager\nGet the component registry\nCreate a new Workflow global with state manager\nBridge between scripts and the hook system\nHook registration handle for cleanup\nInformation about a registered hook\nDisable a hook by ID\nEnable a hook by ID\nExecute hooks for a given hook point\nExecute hooks and publish integration events\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet information about a specific hook\nGet metrics from the hook executor\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all registered hooks for a hook point\nCreate a new hook bridge\nRegister a language adapter\nRegister a hook from a script language\nUnregister a hook\nABOUTME: <code>JSEngine</code> implementation of <code>ScriptEngineBridge</code> …\nABOUTME: JavaScript-specific global object implementations …\nJavaScript script engine implementation\nGet the supported features for JavaScript\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new JavaScript engine with the given configuration\nABOUTME: JavaScript Agent global implementation stub …\nABOUTME: JavaScript-specific event global bindings (stub …\nABOUTME: JavaScript hook global stub for Phase 15 …\nABOUTME: JavaScript JSON global implementation - native …\nABOUTME: JavaScript-specific Provider global stub …\nABOUTME: JavaScript State global implementation ABOUTME: …\nABOUTME: JavaScript Streaming global implementation stub …\nABOUTME: JavaScript Tool global implementation stub …\nABOUTME: JavaScript Workflow global implementation stub …\nInject Agent global into JavaScript engine\nInject the Event global into a JavaScript environment\nInject the Hook global into JavaScript (stub for Phase 15)\nInject JSON global into JavaScript engine\nInject Provider global stub into JavaScript environment\nInject State global into JavaScript engine\nInject Streaming global into JavaScript engine\nInject Tool global into JavaScript engine\nInject Workflow global into JavaScript engine\nABOUTME: Consolidated Lua-specific type conversions …\nABOUTME: <code>LuaEngine</code> implementation of <code>ScriptEngineBridge</code> …\nLua global objects for scripting\nABOUTME: Lua hook adapter for cross-language hook execution\nAdvanced object dumping utilities for Lua values\nOutput capture for Lua <code>print()</code> and other console functions\nStack trace collection for Lua scripts\nConvert <code>AgentOutput</code> to Lua table\nConvert JSON value to Lua value\nConvert Lua table to <code>AgentInput</code>\nConvert Lua table to JSON value\nConvert Lua table to tool input (JSON)\nConvert Lua table to workflow parameters\nConvert Lua value to JSON value\nConvert <code>ScriptWorkflowResult</code> to Lua table\nConvert tool output to Lua table\nConvert workflow result to Lua table\nLua script engine implementation\nGet the supported features for Lua\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Lua engine with the given configuration\nSet the runtime configuration\nABOUTME: Lua-specific Agent global implementation ABOUTME: …\nABOUTME: Lua-specific ARGS global implementation for …\nABOUTME: Lua-specific Artifact global implementation …\nABOUTME: Lua-specific configuration global implementation …\nLua-specific Debug global implementation\nABOUTME: Lua-specific event global bindings with …\nABOUTME: Lua bindings for the cross-language hook system …\nABOUTME: Lua-specific JSON global implementation ABOUTME: …\nABOUTME: Lua-specific Provider global implementation …\nABOUTME: Lua-specific Session global implementation …\nABOUTME: Lua-specific State global implementation ABOUTME: …\nABOUTME: Lua-specific Streaming global implementation …\nABOUTME: Lua-specific Tool global implementation ABOUTME: …\nABOUTME: Lua-specific Workflow global implementation …\nInject Agent global into Lua environment\nInject ARGS global into Lua environment\nInject Artifact global into Lua environment\nCreate example Lua code for Config usage\nInject the Config global into Lua\nInject Debug global into Lua environment\nInject the Event global into a Lua environment\nInject the Hook global into Lua\nInject JSON global into Lua environment\nInject Provider global into Lua environment\nLua wrapper for <code>HookResultComparator</code>\nLua wrapper for <code>ParameterModification</code>\nLua wrapper for <code>ReplayConfig</code>\nLua wrapper for <code>ReplayMode</code>\nLua wrapper for <code>ReplaySchedule</code>\nCreate the replay API table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInject replay global into Lua environment\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInject Session global into Lua environment\nInject State global into Lua environment\nCreate a Lua-compatible stream from a Rust async stream\nInject Streaming global into Lua environment\nInject Tool global into Lua environment\nInject Workflow global into Lua environment\nLua-specific hook adapter\nReturns the argument unchanged.\nConvert <code>HookContext</code> to Lua table\nCalls <code>U::from(self)</code>.\nConvert Lua value to <code>HookResult</code>\nCreate a new Lua hook adapter\nObject dumping configuration options\nCreate compact dumping options for one-liners\nCustom formatting for specific types\nCreate Lua functions for object dumping\nCreate options for debugging specific depth\nDump a Lua value with a label\nDump a Lua value with advanced formatting options\nReturns the argument unchanged.\nNumber of spaces per indentation level\nCalls <code>U::from(self)</code>.\nMaximum array elements to show\nMaximum depth to traverse nested structures\nMaximum string length before truncation\nMaximum table pairs to show\nWhether to show table addresses/references\nWhether to show types alongside values\nCreate verbose dumping options for detailed inspection\nConsole output collector\nClear captured lines\nReturns the argument unchanged.\nGet captured lines\nInstall all output capture overrides\nCalls <code>U::from(self)</code>.\nCreate a new console capture\nOverride other console functions (io.write, etc.)\nOverride Lua’s <code>print()</code> function to capture output\nCreate a console capture with debug bridge\nStack frame information\nComplete stack trace\nStack trace collection options\nWhether to capture local variables\nCapture a stack trace from the current Lua execution point\nWhether to capture upvalues\nCreate a stack trace function for Lua scripts\nError message if capture failed\nCreate options for error-level capture (minimal)\nCreate options for trace-level capture (comprehensive)\nFormat the stack trace as a readable string\nGet frame count\nStack frames from bottom to top\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to include source information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number in source\nFunction definition line\nLocal variables at this frame\nMaximum depth captured\nMaximum stack depth to capture\nFunction name (if available)\nNumber of parameters\nNumber of upvalues\nSource file or chunk name\nFormat as JSON string\nGet the topmost frame (most recent call)\nWhether the trace was truncated\nUpvalues at this frame\nFunction type (Lua, C, main, tail)\nExecute an async operation synchronously with proper error …\nExecute an async operation that returns a Lua value …\nConcrete implementation of <code>HealthCheck</code> trait\nMock check agent health for bridge\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDynamic orchestration that adapts based on results\nEvent-driven orchestration responding to triggers\nConditions for workflow execution\nGoal-oriented orchestration working backwards from …\nOrchestration configuration\nBuilder for <code>OrchestrationConfig</code>\nOrchestration plan defining workflow execution\nOrchestration runtime for executing plans\nOrchestration status\nOrchestration strategy for complex workflows\nOrchestration templates for common patterns\nResource limits for orchestration\nBuilder for <code>ResourceLimits</code>\nHow to handle workflow results\nRetry configuration for workflows\nBuilder for <code>RetryConfig</code>\nStatic orchestration with predefined flow\nSuccess criteria for orchestration\nNode in orchestration workflow tree\nSet whether to allow parallel orchestration branches\nWhether to allow parallel orchestration branches\nSet backoff in milliseconds\nBackoff strategy\nBuild the <code>ResourceLimits</code>\nBuild the <code>OrchestrationConfig</code>\nBuild the <code>RetryConfig</code>\nCreate a new builder for <code>OrchestrationConfig</code>\nCreate a new builder for <code>ResourceLimits</code>\nCreate a new builder for <code>RetryConfig</code>\nChild nodes (for composite workflows)\nNumber of completed nodes\nCondition expression (evaluated against context)\nWorkflow configuration\nKey name for storing results\nCreate a data processing pipeline orchestration\nRequired previous nodes to complete\nPlan description\nElapsed time in seconds\nConditions for executing this node\nSet whether to use exponential backoff\nWhether to use exponential backoff\nNumber of failed nodes\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet orchestration status\nGlobal context available to all workflows\nPlan ID\nNode ID\nOrchestration ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether orchestration is complete\nWhether orchestration is successful\nSet maximum total agent invocations\nMaximum total agent invocations\nSet maximum retry attempts\nMaximum retry attempts\nSet maximum concurrent workflows\nMaximum concurrent workflows\nSet the maximum orchestration depth\nMaximum orchestration depth (nested workflows)\nSet maximum memory usage in MB\nMaximum memory usage in MB\nMinimum success rate for workflows\nPlan name\nCreate new orchestration runtime\nCreate a new builder with default limits\nCreate a new builder with default configuration\nCreate a new builder with default configuration\nWhether this node is optional\nPlan name\nWhether to propagate errors\nRequired outputs in final context\nCreate a multi-agent research orchestration\nSet the resource limits\nResource limits for orchestration\nHow to handle node results\nRetry configuration\nRoot workflow configuration\nStart orchestration from plan\nWhether to store results in context\nSet the orchestration strategy\nOrchestration strategy\nSuccess criteria for orchestration\nCustom success expression\nSet the timeout in seconds\nTimeout for entire orchestration\nTotal number of nodes\nWorkflow type\nInformation about a registered provider\nManages LLM providers for script access\nCheck if a provider supports a specific capability\nGet the core provider manager\nCreate and initialize a provider from a <code>ModelSpecifier</code>\nCreate an Arc to a new core provider manager with the same …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the default provider\nGet a provider by name\nGet information about a specific provider\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all registered providers\nCreate a new provider manager with configuration\nSet the default provider\nProvider discovery service\nInformation about a provider type\nProvider category (cloud, local, etc.)\nCommon models available\nDescription of the provider\nProvider-specific features\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet providers that support multimodal\nGet information about a specific provider type\nGet providers by category\nGet runtime provider information if provider manager is …\nGet providers that support streaming\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all available provider types\nProvider type name\nCreate a new provider discovery service\nOptional configuration\nRequired configuration\nWhether the provider supports multimodal content\nWhether the provider supports streaming\nCreate with a provider manager for dynamic discovery\nCentral registry for all components accessible from scripts\nCreate an <code>ExecutionContext</code> with registry services (state, …\nGet the <code>EventBus</code> if available\nReturns the argument unchanged.\nGet an agent by name\nGet a tool by name\nGet a workflow by name\nCalls <code>U::from(self)</code>.\nList all registered agents\nList all registered tools\nList all registered workflows\nCreate a new empty registry\nRegister an agent\nRegister a tool\nRegister a workflow\nCreate a new registry with <code>EventBus</code> support\nCentral script runtime that uses <code>ScriptEngineBridge</code> …\nExecute a script and return the output\nExecute a script with streaming output\nReturns the argument unchanged.\nGet the engine’s supported features\nGet the name of the current engine\nGet the current execution context\nCalls <code>U::from(self)</code>.\nCreate a new runtime with a specific engine by name\nCreate a new runtime with JavaScript engine\nCreate a new runtime with Lua engine\nGet the provider manager\nGet the component registry\nUpdate the execution context\nSet script arguments to be passed to the script\nCheck if the engine supports multimodal content\nCheck if the engine supports streaming\nCore session bridge for language-agnostic session …\nCheck if a session can be replayed\nClear the current session context\nComplete a session\nCreate a new session\nDelete a session\nReturns the argument unchanged.\nGet the current session ID\nGet an existing session\nGet session metadata\nGet replay metadata for a session\nGet session tags\nGet session timeline\nCalls <code>U::from(self)</code>.\nList replayable sessions\nList sessions with optional filtering\nLoad a session from storage\nCreate a new session bridge\nReplay a session\nRestore recent sessions\nResume a session\nSave all active sessions\nSave a session to storage\nSet the current session ID\nSet session tags\nSuspend a session\nUpdate session metadata\nExecute a closure with a specific session context\nA no-prefix adapter that passes keys through without any …\nAdapter that bridges <code>StateManager</code> to the <code>StateAccess</code> trait\nBuilder for creating <code>StateManagerAdapter</code> with custom …\nSet the storage backend type\nBuild the adapter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an adapter from configuration\nCreate an in-memory adapter (useful for testing)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new builder with memory backend\nCreate a new adapter with the given state manager and scope\nCreate a new no-scope adapter\nSet custom persistence configuration\nSet the default scope\nGet the underlying state manager (for advanced operations)\nSet the default scope for operations\nConfiguration for storage backend selection and setup\nBuilder for <code>StorageConfig</code>\nStorage backend discovery service\nInformation about a storage backend\nStorage performance characteristics\nSet the backend type\nSelected backend name (memory, sled, rocksdb)\nBackend type identifier\nBuild the final <code>StorageConfig</code>\nCreate a new builder for <code>StorageConfig</code>\nDescription of the backend\nEnable compression\nEnable compression if backend supports it\nEnable encryption\nEnable encryption if backend supports it\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet information about a specific storage backend\nGet backends by performance characteristics\nGet backends that support compression\nGet backends that support encryption\nGet backends suitable for large datasets\nGet backends by persistence characteristic\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSuitable for large datasets\nList all available backend names\nConvenience method to configure for memory backend\nBackend name\nCreate a new storage discovery service\nCreate a new builder with default configuration\nOptional configuration parameters\nAdd a configuration parameter\nSet multiple parameters at once\nBackend-specific configuration parameters\nPerformance characteristics\nSet performance preset\nPerformance optimization preset (<code>fast</code>, <code>balanced</code>, …\nWhether backend is persistent across restarts\nRead latency category (low, medium, high)\nRequired configuration parameters\nConvenience method to configure for rocksdb backend\nConvenience method to configure for sled backend\nWhether backend supports compression\nWhether backend supports encryption\nThroughput category (low, medium, high)\nWrite latency category (low, medium, high)\nTool discovery service\nInformation about a tool type\nTool category\nTool description\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all registered tool names\nGet a tool by name from the registry\nGet information about a specific tool\nGet tools by category\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all available tool names\nTool name\nCreate a new tool discovery service\nInitialize and register all Phase 2 tools with the bridge …\nResource limits\nTool schema with parameters\nSecurity level\nSecurity requirements\nWorkflow execution cache for recently executed workflows\nPerformance-optimized parameter conversion\nPerformance metrics collector\nCached workflow type information\nGet average operation duration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet cached execution if available and fresh\nOptimized workflow discovery with caching\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if performance is within acceptable bounds\nCreate a new execution cache with the specified capacity\nGet p99 operation duration\nStore execution result in cache\nRecord operation duration\nFast parameter validation without full parsing\nBridge metrics for monitoring\nWorkflow completed successfully\nWorkflow failed with error\nWorkflow is ready to execute\nWorkflow is currently executing\nSearch criteria for workflows\nStandardized workflow factory using llmspell-workflows\nBridge between scripts and workflows\nDiscovery service for available workflow types\nRecord of workflow execution\nTrait for workflow execution through the bridge\nInformation about a workflow type\nWorkflow metadata\nWorkflow registry for managing workflow instances\nStatus of a workflow instance\nWorkflow template for creating workflow instances\nWorkflow usage statistics\nAuthor/creator\nAuthor filter\nAverage execution time in ms\nClear execution history\nCreate workflow from Rust structures directly (for …\nCreate a workflow instance from Rust structures\nCreated after date\nCreation timestamp\nDefault configuration\nHuman-readable description\nDescription\nTemplate description\nExecution duration in milliseconds\nEnd time\nError message if failed\nExample usage\nExecute the workflow\nExecute a workflow\nFailed executions\nSupported features\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all workflow type information\nGet information about all workflow types\nGet bridge metrics\nGet workflow execution history\nGet performance metrics\nGet a workflow template\nGet workflow usage statistics\nGet a workflow instance by ID\nGet a workflow by ID\nGet information about a specific workflow type\nGet information about a specific workflow type\nGet workflow status\nGet all workflow types with their info\nCheck if a workflow type is available\nTemplate ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast execution time\nList active workflow instances\nList all templates\nList all available workflow types\nList available workflow types\nList available workflow types\nList all registered workflows\nModified after date\nLast modified timestamp\nGet workflow name\nWorkflow name\nTemplate name\nName pattern (substring match)\nCreate a new workflow discovery service\nCreate a new workflow bridge with optional state manager\nCreate a new workflow registry\nOptional parameters\nParameter schema\nRegister a workflow template\nRegister a workflow instance\nRemove a workflow instance\nRequired parameters for creation\nSearch workflows by criteria\nStart time\nGet the state manager if available\nSuccess status\nSuccessful executions\nTags for categorization\nTags to match (any)\nTotal executions\nUnregister a workflow\nUpdate workflow usage statistics\nVersion\nWorkflow ID\nGet workflow type\nWorkflow type name (e.g., “sequential”, “conditional…\nWorkflow type\nWorkflow type\nWorkflow type\nWorkflow type filter")