-- Example: Your First Workflow - Chaining Operations
-- Purpose: Learn how to create workflows that chain multiple steps
-- Audience: Script Users (Beginners)
-- Prerequisites: Completed 03-simple-agent
-- Expected Output: Multi-step workflow execution
-- Version: 0.7.0
-- Tags: getting-started, workflows, sequential, automation, beginner

print("=== Your First Workflow ===")
print("")

-- Workflows allow you to chain multiple operations together.
-- Each step can be a tool invocation, agent call, or custom function.

print("1. Creating a simple data processing workflow...")
print("")

-- This workflow will:
-- 1. Generate a unique ID
-- 2. Get current timestamp
-- 3. Create a data record
-- 4. Save it to a file

local workflow = Workflow.builder()
    :name("data_processor")
    :description("Process and save data with ID and timestamp")
    :sequential()  -- Steps run one after another
    :add_step({
        name = "generate_id",
        type = "tool",
        tool = "uuid_generator",
        input = {
            operation = "generate",
            version = "v4"
        }
    })
    :add_step({
        name = "get_timestamp",
        type = "tool",
        tool = "date_time_handler",
        input = {
            operation = "now"
        }
    })
    :add_step({
        name = "create_record",
        type = "tool",
        tool = "template_engine",
        input = {
            input = [[
Record ID: {{id}}
Timestamp: {{timestamp}}
Status: CREATED
Message: This record was generated by a workflow
            ]],
            context = {
                id = "{{step:generate_id:output}}",
                timestamp = "{{step:get_timestamp:output}}"
            }
        }
    })
    :add_step({
        name = "save_record",
        type = "tool",
        tool = "file_operations",
        input = {
            operation = "write",
            path = "/tmp/workflow_record.txt",
            input = "{{step:create_record:output}}"
        }
    })
    :build()

print("   ‚úÖ Workflow created with 4 steps")
print("")

-- Execute the workflow
print("2. Executing the workflow...")
print("")

local result = workflow:execute({})

if result and result.success then
    print("   ‚úÖ Workflow completed successfully!")
    print("   Steps executed: " .. (result.steps_executed or "unknown"))
    
    -- Read the created file to show the result
    print("")
    print("3. Checking the result...")
    local file_content = Tool.invoke("file_operations", {
        operation = "read",
        path = "/tmp/workflow_record.txt"
    })
    
    if file_content and file_content.text then
        print("   Created record:")
        print("   " .. string.rep("-", 40))
        for line in file_content.text:gmatch("[^\n]+") do
            print("   " .. line)
        end
        print("   " .. string.rep("-", 40))
    end
else
    print("   ‚ùå Workflow failed: " .. (result and result.error or "Unknown error"))
end

print("")

-- Example 2: Simple tool chaining (without formal workflow)
print("4. Alternative: Simple tool chaining...")
print("")

-- Sometimes you don't need a full workflow, just chain tools directly
local id_result = Tool.invoke("uuid_generator", {
    operation = "generate",
    version = "v4"
})

local time_result = Tool.invoke("date_time_handler", {
    operation = "now"
})

if id_result and time_result then
    local simple_record = string.format(
        "Quick Record\nID: %s\nTime: %s\n",
        id_result.text or "unknown",
        time_result.text or "unknown"
    )
    
    print("   Simple chained result:")
    print("   " .. simple_record)
end

print("")
print("üéâ Congratulations! You've successfully:")
print("   - Created a sequential workflow")
print("   - Added multiple steps to process data")
print("   - Executed the workflow")
print("   - Learned about step output references ({{step:name:output}})")
print("")
print("üí° Key Concepts:")
print("   - Workflows chain operations together")
print("   - Sequential workflows run steps in order")
print("   - Steps can reference outputs from previous steps")
print("   - Each step can be a tool, agent, or custom function")
print("")
print("Next: Continue to '05-state-persistence' to learn about saving state!")