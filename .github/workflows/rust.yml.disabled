name: Rust CI

on:
  push:
    branches: [ main, Phase-3 ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build with different feature combinations
  build-features:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - ""                    # No features
          - "email"              # Email only
          - "database"           # Database only
          - "email,database"     # Both email and database
          - "full"               # All features
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Build with features
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo build --workspace --verbose
        else
          cargo build --workspace --features "${{ matrix.features }}" --verbose
        fi
    - name: Run tests with features
      run: |
        if [ "${{ matrix.features }}" = "" ]; then
          cargo test --workspace --verbose
        else
          cargo test --workspace --features "${{ matrix.features }}" --verbose
        fi

  # Quality checks
  quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    - name: Check formatting
      run: cargo fmt --all -- --check
    - name: Run clippy
      run: cargo clippy --workspace --all-features -- -D warnings
    - name: Build documentation
      run: cargo doc --workspace --all-features --no-deps

  # Security audit
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  # Test coverage (optional)
  coverage:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    - name: Generate coverage
      run: cargo tarpaulin --workspace --all-features --out Json
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./tarpaulin-report.json