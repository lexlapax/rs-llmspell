name: Test Suite

on:
  pull_request:
    branches: [ main, development, "Phase-*" ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'full'
        type: choice
        options:
          - minimal
          - fast
          - full
          - expensive

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Quick checks for all PRs
  minimal-tests:
    name: Minimal Tests (Format & Lint)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Run minimal tests
        env:
          TEST_LEVEL: minimal
        run: ./scripts/ci-test.sh

  # Standard tests for merges to main
  fast-tests:
    name: Fast Tests (Unit Tests)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Run fast tests
        env:
          TEST_LEVEL: fast
        run: ./scripts/ci-test.sh

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-fast
          path: test-reports/

  # Full validation suite
  full-tests:
    name: Full Tests (Integration + Apps)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Run full tests
        env:
          TEST_LEVEL: full
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'stub-key' }}
        run: ./scripts/ci-test.sh

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-full
          path: test-reports/

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: |
            test-reports/*.html
            test-reports/*.json

  # Cross-platform testing
  platform-tests:
    name: Platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run platform-specific tests (Unix)
        if: matrix.os != 'windows-latest'
        env:
          TEST_LEVEL: fast
        run: ./scripts/ci-test.sh

      - name: Run platform-specific tests (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets --all-features
          cargo test --workspace --lib --bins

  # Performance benchmarking
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: cargo bench --workspace --all-features -- --output-format bencher | tee benchmark-results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.txt

  # Documentation build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build documentation
        run: cargo doc --workspace --all-features --no-deps

      - name: Check for broken links
        run: |
          cargo doc --workspace --all-features --no-deps 2>&1 | grep -i "warning" && exit 1 || exit 0

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Test result summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [minimal-tests, fast-tests, full-tests, platform-tests]

    steps:
      - name: Check test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check each job result
          if [ "${{ needs.minimal-tests.result }}" == "success" ] || [ "${{ needs.minimal-tests.result }}" == "skipped" ]; then
            echo "✅ Minimal Tests: ${{ needs.minimal-tests.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Minimal Tests: ${{ needs.minimal-tests.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.fast-tests.result }}" == "success" ] || [ "${{ needs.fast-tests.result }}" == "skipped" ]; then
            echo "✅ Fast Tests: ${{ needs.fast-tests.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Fast Tests: ${{ needs.fast-tests.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.full-tests.result }}" == "success" ] || [ "${{ needs.full-tests.result }}" == "skipped" ]; then
            echo "✅ Full Tests: ${{ needs.full-tests.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Full Tests: ${{ needs.full-tests.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.platform-tests.result }}" == "success" ] || [ "${{ needs.platform-tests.result }}" == "skipped" ]; then
            echo "✅ Platform Tests: ${{ needs.platform-tests.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Platform Tests: ${{ needs.platform-tests.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          # Overall result
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.minimal-tests.result }}" == "failure" ] || \
             [ "${{ needs.fast-tests.result }}" == "failure" ] || \
             [ "${{ needs.full-tests.result }}" == "failure" ] || \
             [ "${{ needs.platform-tests.result }}" == "failure" ]; then
            echo "### ❌ Overall: FAILED" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "### ✅ Overall: PASSED" >> $GITHUB_STEP_SUMMARY
          fi